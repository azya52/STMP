
STMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003f44  08003f44  00013f44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000120  20000000  08004084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a68  20000120  080041a4  00020120  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001b88  080041a4  00021b88  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020106  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004c53  00000000  00000000  0004024f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000084e1  00000000  00000000  00044ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ba0  00000000  00000000  0004d388  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001208  00000000  00000000  0004df28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007d1d  00000000  00000000  0004f130  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003cc8  00000000  00000000  00056e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005ab15  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ccc  00000000  00000000  0005ab94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000120 	.word	0x20000120
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f2c 	.word	0x08003f2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000124 	.word	0x20000124
 8000148:	08003f2c 	.word	0x08003f2c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_llsr>:
 8000160:	40d0      	lsrs	r0, r2
 8000162:	1c0b      	adds	r3, r1, #0
 8000164:	40d1      	lsrs	r1, r2
 8000166:	469c      	mov	ip, r3
 8000168:	3a20      	subs	r2, #32
 800016a:	40d3      	lsrs	r3, r2
 800016c:	4318      	orrs	r0, r3
 800016e:	4252      	negs	r2, r2
 8000170:	4663      	mov	r3, ip
 8000172:	4093      	lsls	r3, r2
 8000174:	4318      	orrs	r0, r3
 8000176:	4770      	bx	lr

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800017a:	4b0e      	ldr	r3, [pc, #56]	; (80001b4 <HAL_InitTick+0x3c>)
{
 800017c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800017e:	7818      	ldrb	r0, [r3, #0]
 8000180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000184:	fbb3 f3f0 	udiv	r3, r3, r0
 8000188:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <HAL_InitTick+0x40>)
 800018a:	6810      	ldr	r0, [r2, #0]
 800018c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000190:	f000 f89e 	bl	80002d0 <HAL_SYSTICK_Config>
 8000194:	4604      	mov	r4, r0
 8000196:	b958      	cbnz	r0, 80001b0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000198:	2d0f      	cmp	r5, #15
 800019a:	d809      	bhi.n	80001b0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800019c:	4602      	mov	r2, r0
 800019e:	4629      	mov	r1, r5
 80001a0:	f04f 30ff 	mov.w	r0, #4294967295
 80001a4:	f000 f854 	bl	8000250 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <HAL_InitTick+0x44>)
 80001aa:	4620      	mov	r0, r4
 80001ac:	601d      	str	r5, [r3, #0]
 80001ae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80001b0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80001b2:	bd38      	pop	{r3, r4, r5, pc}
 80001b4:	20000000 	.word	0x20000000
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	20000004 	.word	0x20000004

080001c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c0:	4a07      	ldr	r2, [pc, #28]	; (80001e0 <HAL_Init+0x20>)
{
 80001c2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001c6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c8:	f043 0310 	orr.w	r3, r3, #16
 80001cc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ce:	f000 f82d 	bl	800022c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001d2:	2000      	movs	r0, #0
 80001d4:	f7ff ffd0 	bl	8000178 <HAL_InitTick>
  HAL_MspInit();
 80001d8:	f002 fe66 	bl	8002ea8 <HAL_MspInit>
}
 80001dc:	2000      	movs	r0, #0
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	40022000 	.word	0x40022000

080001e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001e4:	4a03      	ldr	r2, [pc, #12]	; (80001f4 <HAL_IncTick+0x10>)
 80001e6:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <HAL_IncTick+0x14>)
 80001e8:	6811      	ldr	r1, [r2, #0]
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	440b      	add	r3, r1
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	200005b8 	.word	0x200005b8
 80001f8:	20000000 	.word	0x20000000

080001fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001fc:	4b01      	ldr	r3, [pc, #4]	; (8000204 <HAL_GetTick+0x8>)
 80001fe:	6818      	ldr	r0, [r3, #0]
}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	200005b8 	.word	0x200005b8

08000208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000208:	b538      	push	{r3, r4, r5, lr}
 800020a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800020c:	f7ff fff6 	bl	80001fc <HAL_GetTick>
 8000210:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000212:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000214:	bf1e      	ittt	ne
 8000216:	4b04      	ldrne	r3, [pc, #16]	; (8000228 <HAL_Delay+0x20>)
 8000218:	781b      	ldrbne	r3, [r3, #0]
 800021a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800021c:	f7ff ffee 	bl	80001fc <HAL_GetTick>
 8000220:	1b40      	subs	r0, r0, r5
 8000222:	4284      	cmp	r4, r0
 8000224:	d8fa      	bhi.n	800021c <HAL_Delay+0x14>
  {
  }
}
 8000226:	bd38      	pop	{r3, r4, r5, pc}
 8000228:	20000000 	.word	0x20000000

0800022c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800022e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000232:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000236:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800023a:	041b      	lsls	r3, r3, #16
 800023c:	0c1b      	lsrs	r3, r3, #16
 800023e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000246:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000248:	60d3      	str	r3, [r2, #12]
 800024a:	4770      	bx	lr
 800024c:	e000ed00 	.word	0xe000ed00

08000250 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000252:	b530      	push	{r4, r5, lr}
 8000254:	68dc      	ldr	r4, [r3, #12]
 8000256:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000260:	2b04      	cmp	r3, #4
 8000262:	bf28      	it	cs
 8000264:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000266:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000268:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026c:	bf98      	it	ls
 800026e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	fa05 f303 	lsl.w	r3, r5, r3
 8000274:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	bf88      	it	hi
 800027a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027c:	4019      	ands	r1, r3
 800027e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000280:	fa05 f404 	lsl.w	r4, r5, r4
 8000284:	3c01      	subs	r4, #1
 8000286:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000288:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028a:	ea42 0201 	orr.w	r2, r2, r1
 800028e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	bfaf      	iteee	ge
 8000294:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4b06      	ldrlt	r3, [pc, #24]	; (80002b4 <HAL_NVIC_SetPriority+0x64>)
 800029a:	f000 000f 	andlt.w	r0, r0, #15
 800029e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	bfa5      	ittet	ge
 80002a2:	b2d2      	uxtbge	r2, r2
 80002a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	e000ed00 	.word	0xe000ed00
 80002b4:	e000ed14 	.word	0xe000ed14

080002b8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b8:	2301      	movs	r3, #1
 80002ba:	0942      	lsrs	r2, r0, #5
 80002bc:	f000 001f 	and.w	r0, r0, #31
 80002c0:	fa03 f000 	lsl.w	r0, r3, r0
 80002c4:	4b01      	ldr	r3, [pc, #4]	; (80002cc <HAL_NVIC_EnableIRQ+0x14>)
 80002c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ca:	4770      	bx	lr
 80002cc:	e000e100 	.word	0xe000e100

080002d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d0:	3801      	subs	r0, #1
 80002d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002d6:	d20a      	bcs.n	80002ee <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002de:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000e010 	.word	0xe000e010
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80002fc:	4a11      	ldr	r2, [pc, #68]	; (8000344 <FLASH_SetErrorCode+0x48>)
 80002fe:	68d3      	ldr	r3, [r2, #12]
 8000300:	f013 0310 	ands.w	r3, r3, #16
 8000304:	d005      	beq.n	8000312 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000306:	4910      	ldr	r1, [pc, #64]	; (8000348 <FLASH_SetErrorCode+0x4c>)
 8000308:	69cb      	ldr	r3, [r1, #28]
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000310:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000312:	68d2      	ldr	r2, [r2, #12]
 8000314:	0750      	lsls	r0, r2, #29
 8000316:	d506      	bpl.n	8000326 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000318:	490b      	ldr	r1, [pc, #44]	; (8000348 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800031a:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800031e:	69ca      	ldr	r2, [r1, #28]
 8000320:	f042 0201 	orr.w	r2, r2, #1
 8000324:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000326:	4a07      	ldr	r2, [pc, #28]	; (8000344 <FLASH_SetErrorCode+0x48>)
 8000328:	69d1      	ldr	r1, [r2, #28]
 800032a:	07c9      	lsls	r1, r1, #31
 800032c:	d508      	bpl.n	8000340 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800032e:	4806      	ldr	r0, [pc, #24]	; (8000348 <FLASH_SetErrorCode+0x4c>)
 8000330:	69c1      	ldr	r1, [r0, #28]
 8000332:	f041 0104 	orr.w	r1, r1, #4
 8000336:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000338:	69d1      	ldr	r1, [r2, #28]
 800033a:	f021 0101 	bic.w	r1, r1, #1
 800033e:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000340:	60d3      	str	r3, [r2, #12]
 8000342:	4770      	bx	lr
 8000344:	40022000 	.word	0x40022000
 8000348:	200005c0 	.word	0x200005c0

0800034c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_FLASH_Unlock+0x1c>)
 800034e:	6918      	ldr	r0, [r3, #16]
 8000350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000354:	d007      	beq.n	8000366 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000356:	4a05      	ldr	r2, [pc, #20]	; (800036c <HAL_FLASH_Unlock+0x20>)
 8000358:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800035a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800035e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000360:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000362:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000366:	4770      	bx	lr
 8000368:	40022000 	.word	0x40022000
 800036c:	45670123 	.word	0x45670123

08000370 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000370:	4a03      	ldr	r2, [pc, #12]	; (8000380 <HAL_FLASH_Lock+0x10>)
}
 8000372:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000374:	6913      	ldr	r3, [r2, #16]
 8000376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037a:	6113      	str	r3, [r2, #16]
}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40022000 	.word	0x40022000

08000384 <FLASH_WaitForLastOperation>:
{
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8000388:	f7ff ff38 	bl	80001fc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800038c:	4c11      	ldr	r4, [pc, #68]	; (80003d4 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 800038e:	4607      	mov	r7, r0
 8000390:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000392:	68e3      	ldr	r3, [r4, #12]
 8000394:	07d8      	lsls	r0, r3, #31
 8000396:	d412      	bmi.n	80003be <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000398:	68e3      	ldr	r3, [r4, #12]
 800039a:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800039c:	bf44      	itt	mi
 800039e:	2320      	movmi	r3, #32
 80003a0:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80003a2:	68eb      	ldr	r3, [r5, #12]
 80003a4:	06da      	lsls	r2, r3, #27
 80003a6:	d406      	bmi.n	80003b6 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80003a8:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80003aa:	07db      	lsls	r3, r3, #31
 80003ac:	d403      	bmi.n	80003b6 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80003ae:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80003b0:	f010 0004 	ands.w	r0, r0, #4
 80003b4:	d002      	beq.n	80003bc <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 80003b6:	f7ff ffa1 	bl	80002fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80003ba:	2001      	movs	r0, #1
}
 80003bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80003be:	1c73      	adds	r3, r6, #1
 80003c0:	d0e7      	beq.n	8000392 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80003c2:	b90e      	cbnz	r6, 80003c8 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80003c4:	2003      	movs	r0, #3
 80003c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80003c8:	f7ff ff18 	bl	80001fc <HAL_GetTick>
 80003cc:	1bc0      	subs	r0, r0, r7
 80003ce:	4286      	cmp	r6, r0
 80003d0:	d2df      	bcs.n	8000392 <FLASH_WaitForLastOperation+0xe>
 80003d2:	e7f7      	b.n	80003c4 <FLASH_WaitForLastOperation+0x40>
 80003d4:	40022000 	.word	0x40022000

080003d8 <HAL_FLASH_Program>:
{
 80003d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80003dc:	4c1f      	ldr	r4, [pc, #124]	; (800045c <HAL_FLASH_Program+0x84>)
{
 80003de:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80003e0:	7e23      	ldrb	r3, [r4, #24]
{
 80003e2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80003e4:	2b01      	cmp	r3, #1
{
 80003e6:	460f      	mov	r7, r1
 80003e8:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80003ea:	d033      	beq.n	8000454 <HAL_FLASH_Program+0x7c>
 80003ec:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80003ee:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80003f2:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80003f4:	f7ff ffc6 	bl	8000384 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80003f8:	bb40      	cbnz	r0, 800044c <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80003fa:	2d01      	cmp	r5, #1
 80003fc:	d003      	beq.n	8000406 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80003fe:	2d02      	cmp	r5, #2
 8000400:	bf0c      	ite	eq
 8000402:	2502      	moveq	r5, #2
 8000404:	2504      	movne	r5, #4
 8000406:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000408:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800040a:	f8df b054 	ldr.w	fp, [pc, #84]	; 8000460 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800040e:	0132      	lsls	r2, r6, #4
 8000410:	4640      	mov	r0, r8
 8000412:	4649      	mov	r1, r9
 8000414:	f7ff fea4 	bl	8000160 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000418:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800041c:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000420:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 800042a:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800042e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000432:	f7ff ffa7 	bl	8000384 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000436:	f8db 3010 	ldr.w	r3, [fp, #16]
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 8000442:	b918      	cbnz	r0, 800044c <HAL_FLASH_Program+0x74>
 8000444:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8000446:	b2f3      	uxtb	r3, r6
 8000448:	429d      	cmp	r5, r3
 800044a:	d8e0      	bhi.n	800040e <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 800044c:	2300      	movs	r3, #0
 800044e:	7623      	strb	r3, [r4, #24]
  return status;
 8000450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000454:	2002      	movs	r0, #2
}
 8000456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800045a:	bf00      	nop
 800045c:	200005c0 	.word	0x200005c0
 8000460:	40022000 	.word	0x40022000

08000464 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000464:	2200      	movs	r2, #0
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <FLASH_MassErase.isra.0+0x1c>)
 8000468:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <FLASH_MassErase.isra.0+0x20>)
 800046c:	691a      	ldr	r2, [r3, #16]
 800046e:	f042 0204 	orr.w	r2, r2, #4
 8000472:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000474:	691a      	ldr	r2, [r3, #16]
 8000476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800047a:	611a      	str	r2, [r3, #16]
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	200005c0 	.word	0x200005c0
 8000484:	40022000 	.word	0x40022000

08000488 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000488:	2200      	movs	r2, #0
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <FLASH_PageErase+0x1c>)
 800048c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <FLASH_PageErase+0x20>)
 8000490:	691a      	ldr	r2, [r3, #16]
 8000492:	f042 0202 	orr.w	r2, r2, #2
 8000496:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000498:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800049a:	691a      	ldr	r2, [r3, #16]
 800049c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004a0:	611a      	str	r2, [r3, #16]
 80004a2:	4770      	bx	lr
 80004a4:	200005c0 	.word	0x200005c0
 80004a8:	40022000 	.word	0x40022000

080004ac <HAL_FLASHEx_Erase>:
{
 80004ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80004b0:	4d23      	ldr	r5, [pc, #140]	; (8000540 <HAL_FLASHEx_Erase+0x94>)
{
 80004b2:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 80004b4:	7e2b      	ldrb	r3, [r5, #24]
{
 80004b6:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d03d      	beq.n	8000538 <HAL_FLASHEx_Erase+0x8c>
 80004bc:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80004be:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80004c0:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80004c2:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004c4:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80004c8:	d113      	bne.n	80004f2 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004ca:	f7ff ff5b 	bl	8000384 <FLASH_WaitForLastOperation>
 80004ce:	b120      	cbz	r0, 80004da <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80004d0:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80004d2:	2300      	movs	r3, #0
 80004d4:	762b      	strb	r3, [r5, #24]
  return status;
 80004d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80004da:	f7ff ffc3 	bl	8000464 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80004de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80004e2:	f7ff ff4f 	bl	8000384 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80004e6:	4a17      	ldr	r2, [pc, #92]	; (8000544 <HAL_FLASHEx_Erase+0x98>)
 80004e8:	6913      	ldr	r3, [r2, #16]
 80004ea:	f023 0304 	bic.w	r3, r3, #4
 80004ee:	6113      	str	r3, [r2, #16]
 80004f0:	e7ef      	b.n	80004d2 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004f2:	f7ff ff47 	bl	8000384 <FLASH_WaitForLastOperation>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d1ea      	bne.n	80004d0 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000502:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000504:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000506:	4c0f      	ldr	r4, [pc, #60]	; (8000544 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8000510:	429e      	cmp	r6, r3
 8000512:	d2de      	bcs.n	80004d2 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000514:	4630      	mov	r0, r6
 8000516:	f7ff ffb7 	bl	8000488 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800051a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800051e:	f7ff ff31 	bl	8000384 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000522:	6923      	ldr	r3, [r4, #16]
 8000524:	f023 0302 	bic.w	r3, r3, #2
 8000528:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800052a:	b110      	cbz	r0, 8000532 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 800052c:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000530:	e7cf      	b.n	80004d2 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000532:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000536:	e7e7      	b.n	8000508 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8000538:	2002      	movs	r0, #2
}
 800053a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800053e:	bf00      	nop
 8000540:	200005c0 	.word	0x200005c0
 8000544:	40022000 	.word	0x40022000

08000548 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800054c:	4604      	mov	r4, r0
{
 800054e:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000550:	2800      	cmp	r0, #0
 8000552:	d060      	beq.n	8000616 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000554:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000558:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800055c:	b91b      	cbnz	r3, 8000566 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800055e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000562:	f002 fd21 	bl	8002fa8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000566:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000568:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800056a:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 800056c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000570:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000574:	f000 fefe 	bl	8001374 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800057c:	682b      	ldr	r3, [r5, #0]
 800057e:	f104 0804 	add.w	r8, r4, #4
 8000582:	6033      	str	r3, [r6, #0]
 8000584:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000588:	6820      	ldr	r0, [r4, #0]
 800058a:	f000 fee3 	bl	8001354 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800058e:	2100      	movs	r1, #0
 8000590:	6820      	ldr	r0, [r4, #0]
 8000592:	f000 fef9 	bl	8001388 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000596:	2100      	movs	r1, #0
 8000598:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800059a:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 800059c:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800059e:	4608      	mov	r0, r1
 80005a0:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 80005a4:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80005a8:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80005aa:	3101      	adds	r1, #1
 80005ac:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 80005ae:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80005b2:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 80005b6:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 80005b8:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 80005ba:	6410      	str	r0, [r2, #64]	; 0x40
 80005bc:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 80005c0:	d1f0      	bne.n	80005a4 <HAL_PCD_Init+0x5c>
 80005c2:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 80005c4:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 80005c6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 80005ca:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80005cc:	3201      	adds	r2, #1
 80005ce:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 80005d0:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80005d4:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 80005d8:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 80005dc:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 80005e0:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 80005e4:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 80005e8:	d1ed      	bne.n	80005c6 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80005ea:	466e      	mov	r6, sp
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80005f0:	682b      	ldr	r3, [r5, #0]
 80005f2:	6033      	str	r3, [r6, #0]
 80005f4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80005f8:	6820      	ldr	r0, [r4, #0]
 80005fa:	f000 fec7 	bl	800138c <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 80005fe:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000600:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000604:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000606:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 800060a:	f001 f99b 	bl	8001944 <USB_DevDisconnect>
  return HAL_OK;
 800060e:	2000      	movs	r0, #0
}
 8000610:	b006      	add	sp, #24
 8000612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000616:	2001      	movs	r0, #1
 8000618:	e7fa      	b.n	8000610 <HAL_PCD_Init+0xc8>

0800061a <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800061a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800061e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000620:	2b01      	cmp	r3, #1
{
 8000622:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000624:	d00e      	beq.n	8000644 <HAL_PCD_Start+0x2a>
 8000626:	2101      	movs	r1, #1
 8000628:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800062c:	f002 fded 	bl	800320a <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000630:	6820      	ldr	r0, [r4, #0]
 8000632:	f001 f985 	bl	8001940 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000636:	6820      	ldr	r0, [r4, #0]
 8000638:	f000 fe93 	bl	8001362 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800063c:	2000      	movs	r0, #0
 800063e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000642:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000644:	2002      	movs	r0, #2
}
 8000646:	bd10      	pop	{r4, pc}

08000648 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000648:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 800064c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800064e:	2a01      	cmp	r2, #1
{
 8000650:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000652:	d00b      	beq.n	800066c <HAL_PCD_SetAddress+0x24>
 8000654:	2201      	movs	r2, #1
 8000656:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 800065a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800065e:	6800      	ldr	r0, [r0, #0]
 8000660:	f001 f968 	bl	8001934 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000664:	2000      	movs	r0, #0
 8000666:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 800066a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800066c:	2002      	movs	r0, #2
  return HAL_OK;
}
 800066e:	bd10      	pop	{r4, pc}

08000670 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000670:	b538      	push	{r3, r4, r5, lr}
 8000672:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000674:	b248      	sxtb	r0, r1
 8000676:	2800      	cmp	r0, #0
 8000678:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800067c:	bfb5      	itete	lt
 800067e:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000682:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000686:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000688:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800068c:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 800068e:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000690:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000692:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000694:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000698:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 800069a:	2b01      	cmp	r3, #1
 800069c:	d009      	beq.n	80006b2 <HAL_PCD_EP_Open+0x42>
 800069e:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80006a0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80006a2:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80006a6:	f000 fe91 	bl	80013cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 80006b0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80006b2:	2002      	movs	r0, #2
}
 80006b4:	bd38      	pop	{r3, r4, r5, pc}

080006b6 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80006b6:	b24b      	sxtb	r3, r1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006be:	bfb5      	itete	lt
 80006c0:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80006c4:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006c8:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80006ca:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80006ce:	0fdb      	lsrs	r3, r3, #31
{  
 80006d0:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 80006d2:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80006d4:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 80006d6:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 80006da:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d009      	beq.n	80006f4 <HAL_PCD_EP_Close+0x3e>
 80006e0:	2301      	movs	r3, #1
 80006e2:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80006e6:	6800      	ldr	r0, [r0, #0]
 80006e8:	f000 ffe2 	bl	80016b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80006f2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80006f4:	2002      	movs	r0, #2
}
 80006f6:	bd10      	pop	{r4, pc}

080006f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006f8:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80006fa:	2600      	movs	r6, #0
 80006fc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000700:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000702:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000704:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000708:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800070c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 800070e:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000712:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000716:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 800071a:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 800071e:	6800      	ldr	r0, [r0, #0]
 8000720:	f001 f92a 	bl	8001978 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000724:	4630      	mov	r0, r6
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000728:	f001 010f 	and.w	r1, r1, #15
 800072c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000730:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000734:	4770      	bx	lr

08000736 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000736:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800073a:	b570      	push	{r4, r5, r6, lr}
 800073c:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800073e:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000740:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000742:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000744:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000746:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800074a:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800074e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000750:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000752:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000754:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000758:	6800      	ldr	r0, [r0, #0]
 800075a:	f001 f90d 	bl	8001978 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800075e:	4630      	mov	r0, r6
 8000760:	bd70      	pop	{r4, r5, r6, pc}
	...

08000764 <HAL_PCD_IRQHandler>:
{ 
 8000764:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000768:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800076a:	6800      	ldr	r0, [r0, #0]
 800076c:	f001 f8ec 	bl	8001948 <USB_ReadInterrupts>
 8000770:	0400      	lsls	r0, r0, #16
 8000772:	f100 8098 	bmi.w	80008a6 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000776:	6820      	ldr	r0, [r4, #0]
 8000778:	f001 f8e6 	bl	8001948 <USB_ReadInterrupts>
 800077c:	0541      	lsls	r1, r0, #21
 800077e:	d50f      	bpl.n	80007a0 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000780:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000782:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000784:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800078c:	041b      	lsls	r3, r3, #16
 800078e:	0c1b      	lsrs	r3, r3, #16
 8000790:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000794:	f002 fc3f 	bl	8003016 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000798:	2100      	movs	r1, #0
 800079a:	4620      	mov	r0, r4
 800079c:	f7ff ff54 	bl	8000648 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80007a0:	6820      	ldr	r0, [r4, #0]
 80007a2:	f001 f8d1 	bl	8001948 <USB_ReadInterrupts>
 80007a6:	0447      	lsls	r7, r0, #17
 80007a8:	d508      	bpl.n	80007bc <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80007aa:	6822      	ldr	r2, [r4, #0]
 80007ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007b4:	041b      	lsls	r3, r3, #16
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80007bc:	6820      	ldr	r0, [r4, #0]
 80007be:	f001 f8c3 	bl	8001948 <USB_ReadInterrupts>
 80007c2:	0486      	lsls	r6, r0, #18
 80007c4:	d508      	bpl.n	80007d8 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80007c6:	6822      	ldr	r2, [r4, #0]
 80007c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007d0:	041b      	lsls	r3, r3, #16
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80007d8:	6820      	ldr	r0, [r4, #0]
 80007da:	f001 f8b5 	bl	8001948 <USB_ReadInterrupts>
 80007de:	04c5      	lsls	r5, r0, #19
 80007e0:	d51c      	bpl.n	800081c <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80007e2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80007e4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80007e6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80007ea:	f023 0304 	bic.w	r3, r3, #4
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	0c1b      	lsrs	r3, r3, #16
 80007f2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80007f6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80007fa:	f023 0308 	bic.w	r3, r3, #8
 80007fe:	041b      	lsls	r3, r3, #16
 8000800:	0c1b      	lsrs	r3, r3, #16
 8000802:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000806:	f002 fc29 	bl	800305c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800080a:	6822      	ldr	r2, [r4, #0]
 800080c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000814:	041b      	lsls	r3, r3, #16
 8000816:	0c1b      	lsrs	r3, r3, #16
 8000818:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800081c:	6820      	ldr	r0, [r4, #0]
 800081e:	f001 f893 	bl	8001948 <USB_ReadInterrupts>
 8000822:	0500      	lsls	r0, r0, #20
 8000824:	d51d      	bpl.n	8000862 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000826:	6820      	ldr	r0, [r4, #0]
 8000828:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800082c:	b29b      	uxth	r3, r3
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000836:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800083a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800083e:	041b      	lsls	r3, r3, #16
 8000840:	0c1b      	lsrs	r3, r3, #16
 8000842:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000846:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800084a:	b29b      	uxth	r3, r3
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000854:	f001 f878 	bl	8001948 <USB_ReadInterrupts>
 8000858:	04c1      	lsls	r1, r0, #19
 800085a:	d402      	bmi.n	8000862 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 800085c:	4620      	mov	r0, r4
 800085e:	f002 fbed 	bl	800303c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000862:	6820      	ldr	r0, [r4, #0]
 8000864:	f001 f870 	bl	8001948 <USB_ReadInterrupts>
 8000868:	0582      	lsls	r2, r0, #22
 800086a:	d50b      	bpl.n	8000884 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800086c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800086e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000870:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000878:	041b      	lsls	r3, r3, #16
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000880:	f002 fbc5 	bl	800300e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000884:	6820      	ldr	r0, [r4, #0]
 8000886:	f001 f85f 	bl	8001948 <USB_ReadInterrupts>
 800088a:	05c3      	lsls	r3, r0, #23
 800088c:	d508      	bpl.n	80008a0 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800088e:	6822      	ldr	r2, [r4, #0]
 8000890:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000898:	041b      	lsls	r3, r3, #16
 800089a:	0c1b      	lsrs	r3, r3, #16
 800089c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80008a0:	b002      	add	sp, #8
 80008a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80008a6:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80008a8:	4fc8      	ldr	r7, [pc, #800]	; (8000bcc <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80008aa:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000bd0 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80008ae:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000bd4 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 80008b2:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 80008b6:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80008ba:	6820      	ldr	r0, [r4, #0]
 80008bc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80008c6:	041b      	lsls	r3, r3, #16
 80008c8:	f57f af55 	bpl.w	8000776 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80008cc:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 80008d0:	f015 050f 	ands.w	r5, r5, #15
 80008d4:	f040 80ab 	bne.w	8000a2e <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 80008d8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008dc:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 80008de:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008e2:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 80008e4:	d126      	bne.n	8000934 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008e6:	403b      	ands	r3, r7
 80008e8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80008ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80008fc:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000900:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000906:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000908:	4413      	add	r3, r2
 800090a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800090c:	4620      	mov	r0, r4
 800090e:	f002 fb77 	bl	8003000 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000912:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0cf      	beq.n	80008ba <HAL_PCD_IRQHandler+0x156>
 800091a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800091c:	2a00      	cmp	r2, #0
 800091e:	d1cc      	bne.n	80008ba <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000920:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000924:	6821      	ldr	r1, [r4, #0]
 8000926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800092e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000932:	e7c2      	b.n	80008ba <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000934:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000938:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800093c:	051a      	lsls	r2, r3, #20
 800093e:	d51f      	bpl.n	8000980 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000940:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000944:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000948:	b29b      	uxth	r3, r3
 800094a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800094e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000952:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000956:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800095a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800095e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000962:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000966:	f001 f907 	bl	8001b78 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800096a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800096c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800096e:	8813      	ldrh	r3, [r2, #0]
 8000970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000974:	051b      	lsls	r3, r3, #20
 8000976:	0d1b      	lsrs	r3, r3, #20
 8000978:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800097a:	f002 fb33 	bl	8002fe4 <HAL_PCD_SetupStageCallback>
 800097e:	e79c      	b.n	80008ba <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000980:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000984:	041b      	lsls	r3, r3, #16
 8000986:	d598      	bpl.n	80008ba <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000988:	8803      	ldrh	r3, [r0, #0]
 800098a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800098e:	051b      	lsls	r3, r3, #20
 8000990:	0d1b      	lsrs	r3, r3, #20
 8000992:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000994:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000998:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800099c:	b29b      	uxth	r3, r3
 800099e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80009aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009ae:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 80009b2:	b163      	cbz	r3, 80009ce <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80009b4:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 80009b8:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 80009bc:	f001 f8dc 	bl	8001b78 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80009c0:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80009c4:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 80009c8:	4413      	add	r3, r2
 80009ca:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80009ce:	2100      	movs	r1, #0
 80009d0:	4620      	mov	r0, r4
 80009d2:	f002 fb0d 	bl	8002ff0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009d6:	6822      	ldr	r2, [r4, #0]
 80009d8:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 80009dc:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80009e0:	2d3e      	cmp	r5, #62	; 0x3e
 80009e2:	b289      	uxth	r1, r1
 80009e4:	f101 0106 	add.w	r1, r1, #6
 80009e8:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80009ec:	d917      	bls.n	8000a1e <HAL_PCD_IRQHandler+0x2ba>
 80009ee:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80009f2:	06ee      	lsls	r6, r5, #27
 80009f4:	bf04      	itt	eq
 80009f6:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80009fa:	b29b      	uxtheq	r3, r3
 80009fc:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000a06:	8813      	ldrh	r3, [r2, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	ea03 0308 	and.w	r3, r3, r8
 8000a0e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1a:	8013      	strh	r3, [r2, #0]
 8000a1c:	e74d      	b.n	80008ba <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000a1e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000a22:	07ed      	lsls	r5, r5, #31
 8000a24:	bf44      	itt	mi
 8000a26:	3301      	addmi	r3, #1
 8000a28:	b29b      	uxthmi	r3, r3
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	e7e8      	b.n	8000a00 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000a2e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000a38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a3c:	0419      	lsls	r1, r3, #16
 8000a3e:	d53f      	bpl.n	8000ac0 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000a40:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a44:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a4c:	051b      	lsls	r3, r3, #20
 8000a4e:	0d1b      	lsrs	r3, r3, #20
 8000a50:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a54:	eb04 010a 	add.w	r1, r4, sl
 8000a58:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d174      	bne.n	8000b4a <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a60:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a64:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	3306      	adds	r3, #6
 8000a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a74:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000a78:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000a7c:	b136      	cbz	r6, 8000a8c <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000a7e:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000a82:	4633      	mov	r3, r6
 8000a84:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000a88:	f001 f876 	bl	8001b78 <USB_ReadPMA>
 8000a8c:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000a90:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000a94:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000a98:	4433      	add	r3, r6
 8000a9a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a9e:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000aa2:	4432      	add	r2, r6
 8000aa4:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000aa8:	b123      	cbz	r3, 8000ab4 <HAL_PCD_IRQHandler+0x350>
 8000aaa:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000aae:	4286      	cmp	r6, r0
 8000ab0:	f080 8086 	bcs.w	8000bc0 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000ab4:	44a2      	add	sl, r4
 8000ab6:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000aba:	4620      	mov	r0, r4
 8000abc:	f002 fa98 	bl	8002ff0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000ac0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ac4:	061a      	lsls	r2, r3, #24
 8000ac6:	f57f aef8 	bpl.w	80008ba <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000aca:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000acc:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ace:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000ad2:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	403b      	ands	r3, r7
 8000ad8:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000adc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000ae0:	3502      	adds	r5, #2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d178      	bne.n	8000bd8 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ae6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000aea:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	3302      	adds	r3, #2
 8000af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000af6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000afa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000afe:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b06:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000b08:	b11b      	cbz	r3, 8000b12 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000b0a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000b0c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b0e:	f000 ff21 	bl	8001954 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b12:	6822      	ldr	r2, [r4, #0]
 8000b14:	4426      	add	r6, r4
 8000b16:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000b1a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	3302      	adds	r3, #2
 8000b22:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000b26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000b2a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000b2e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b30:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000b34:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000b36:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000b38:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000b3a:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b3c:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8085 	bne.w	8000c4e <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b44:	f002 fa5c 	bl	8003000 <HAL_PCD_DataInStageCallback>
 8000b48:	e6b7      	b.n	80008ba <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000b4a:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000b4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b58:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000b5c:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000b5e:	d021      	beq.n	8000ba4 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b60:	3202      	adds	r2, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b68:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000b6c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000b70:	b136      	cbz	r6, 8000b80 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000b72:	4633      	mov	r3, r6
 8000b74:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b78:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000b7c:	f000 fffc 	bl	8001b78 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000b80:	eb04 030a 	add.w	r3, r4, sl
 8000b84:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000b88:	6822      	ldr	r2, [r4, #0]
 8000b8a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b92:	051b      	lsls	r3, r3, #20
 8000b94:	0d1b      	lsrs	r3, r3, #20
 8000b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b9e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000ba2:	e773      	b.n	8000a8c <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ba4:	3206      	adds	r2, #6
 8000ba6:	4413      	add	r3, r2
 8000ba8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bac:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000bb0:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e3      	beq.n	8000b80 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000bb8:	4633      	mov	r3, r6
 8000bba:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000bbe:	e7db      	b.n	8000b78 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000bc0:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff fd97 	bl	80006f8 <HAL_PCD_EP_Receive>
 8000bca:	e779      	b.n	8000ac0 <HAL_PCD_IRQHandler+0x35c>
 8000bcc:	ffff8f0f 	.word	0xffff8f0f
 8000bd0:	ffffbf8f 	.word	0xffffbf8f
 8000bd4:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000bd8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000bdc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000be6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000bea:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000bec:	d020      	beq.n	8000c30 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000bee:	3202      	adds	r2, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bf6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000bfa:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c02:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000c04:	b11b      	cbz	r3, 8000c0e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000c06:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000c08:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000c0a:	f000 fea3 	bl	8001954 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000c0e:	19a3      	adds	r3, r4, r6
 8000c10:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000c14:	6822      	ldr	r2, [r4, #0]
 8000c16:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c1e:	051b      	lsls	r3, r3, #20
 8000c20:	0d1b      	lsrs	r3, r3, #20
 8000c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000c2e:	e770      	b.n	8000b12 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000c30:	3206      	adds	r2, #6
 8000c32:	4413      	add	r3, r2
 8000c34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c38:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000c3c:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c44:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0e1      	beq.n	8000c0e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000c4a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000c4c:	e7dc      	b.n	8000c08 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000c4e:	f7ff fd72 	bl	8000736 <HAL_PCD_EP_Transmit>
 8000c52:	e632      	b.n	80008ba <HAL_PCD_IRQHandler+0x156>

08000c54 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000c54:	2201      	movs	r2, #1
{
 8000c56:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000c58:	b24b      	sxtb	r3, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c60:	bfb5      	itete	lt
 8000c62:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000c66:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c6a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c6c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c70:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000c72:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000c74:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000c76:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c78:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000c7a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c7e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00e      	beq.n	8000ca2 <HAL_PCD_EP_SetStall+0x4e>
 8000c84:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000c88:	6800      	ldr	r0, [r0, #0]
 8000c8a:	f000 fddf 	bl	800184c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000c8e:	b925      	cbnz	r5, 8000c9a <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000c90:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000c94:	6820      	ldr	r0, [r4, #0]
 8000c96:	f000 fe5b 	bl	8001950 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000ca2:	2002      	movs	r0, #2
}
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}

08000ca6 <HAL_PCD_EP_ClrStall>:
{
 8000ca6:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000ca8:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000caa:	b24b      	sxtb	r3, r1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000cb2:	bfb5      	itete	lt
 8000cb4:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000cb8:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000cbc:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000cbe:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000cc2:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000cc4:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000cc6:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000cc8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000cca:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000cce:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d009      	beq.n	8000ce8 <HAL_PCD_EP_ClrStall+0x42>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000cda:	6800      	ldr	r0, [r0, #0]
 8000cdc:	f000 fde8 	bl	80018b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000ce0:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000ce8:	2002      	movs	r0, #2
}
 8000cea:	bd38      	pop	{r3, r4, r5, pc}

08000cec <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8000cec:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000cf0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000cf2:	2b01      	cmp	r3, #1
{
 8000cf4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000cf6:	d011      	beq.n	8000d1c <HAL_PCD_EP_Flush+0x30>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  if ((ep_addr & 0x80U) == 0x80U)
 8000cfe:	060b      	lsls	r3, r1, #24
 8000d00:	d508      	bpl.n	8000d14 <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 8000d02:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000d06:	6800      	ldr	r0, [r0, #0]
 8000d08:	f000 fb5b 	bl	80013c2 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000d12:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 8000d14:	6800      	ldr	r0, [r0, #0]
 8000d16:	f000 fb56 	bl	80013c6 <USB_FlushRxFifo>
 8000d1a:	e7f7      	b.n	8000d0c <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 8000d1c:	2002      	movs	r0, #2
}
 8000d1e:	bd10      	pop	{r4, pc}

08000d20 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000d20:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d24:	bf1b      	ittet	ne
 8000d26:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000d2a:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000d2e:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d32:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000d34:	bf08      	it	eq
 8000d36:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000d3a:	b91a      	cbnz	r2, 8000d44 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000d3c:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000d3e:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000d40:	2000      	movs	r0, #0
 8000d42:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000d44:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000d46:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000d48:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000d4a:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000d4c:	8103      	strh	r3, [r0, #8]
 8000d4e:	e7f7      	b.n	8000d40 <HAL_PCDEx_PMAConfig+0x20>

08000d50 <HAL_PWR_EnterSLEEPMode>:
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_PWR_EnterSLEEPMode+0x1c>)

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000d52:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d54:	6913      	ldr	r3, [r2, #16]
 8000d56:	f023 0304 	bic.w	r3, r3, #4
 8000d5a:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000d5c:	d101      	bne.n	8000d62 <HAL_PWR_EnterSLEEPMode+0x12>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000d5e:	bf30      	wfi
 8000d60:	4770      	bx	lr
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8000d62:	bf40      	sev
  __ASM volatile ("wfe");
 8000d64:	bf20      	wfe
 8000d66:	bf20      	wfe
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d70:	6803      	ldr	r3, [r0, #0]
{
 8000d72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d76:	07db      	lsls	r3, r3, #31
{
 8000d78:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7a:	d410      	bmi.n	8000d9e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7c:	682b      	ldr	r3, [r5, #0]
 8000d7e:	079f      	lsls	r7, r3, #30
 8000d80:	d45e      	bmi.n	8000e40 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d82:	682b      	ldr	r3, [r5, #0]
 8000d84:	0719      	lsls	r1, r3, #28
 8000d86:	f100 8095 	bmi.w	8000eb4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d8a:	682b      	ldr	r3, [r5, #0]
 8000d8c:	075a      	lsls	r2, r3, #29
 8000d8e:	f100 80bf 	bmi.w	8000f10 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d92:	69ea      	ldr	r2, [r5, #28]
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 812d 	bne.w	8000ff4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	e014      	b.n	8000dc8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d9e:	4c90      	ldr	r4, [pc, #576]	; (8000fe0 <HAL_RCC_OscConfig+0x270>)
 8000da0:	6863      	ldr	r3, [r4, #4]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d007      	beq.n	8000dba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000daa:	6863      	ldr	r3, [r4, #4]
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d10c      	bne.n	8000dce <HAL_RCC_OscConfig+0x5e>
 8000db4:	6863      	ldr	r3, [r4, #4]
 8000db6:	03de      	lsls	r6, r3, #15
 8000db8:	d509      	bpl.n	8000dce <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	039c      	lsls	r4, r3, #14
 8000dbe:	d5dd      	bpl.n	8000d7c <HAL_RCC_OscConfig+0xc>
 8000dc0:	686b      	ldr	r3, [r5, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1da      	bne.n	8000d7c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
}
 8000dc8:	b002      	add	sp, #8
 8000dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dce:	686b      	ldr	r3, [r5, #4]
 8000dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd4:	d110      	bne.n	8000df8 <HAL_RCC_OscConfig+0x88>
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ddc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dde:	f7ff fa0d 	bl	80001fc <HAL_GetTick>
 8000de2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	0398      	lsls	r0, r3, #14
 8000de8:	d4c8      	bmi.n	8000d7c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dea:	f7ff fa07 	bl	80001fc <HAL_GetTick>
 8000dee:	1b80      	subs	r0, r0, r6
 8000df0:	2864      	cmp	r0, #100	; 0x64
 8000df2:	d9f7      	bls.n	8000de4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000df4:	2003      	movs	r0, #3
 8000df6:	e7e7      	b.n	8000dc8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df8:	b99b      	cbnz	r3, 8000e22 <HAL_RCC_OscConfig+0xb2>
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e00:	6023      	str	r3, [r4, #0]
 8000e02:	6823      	ldr	r3, [r4, #0]
 8000e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e0a:	f7ff f9f7 	bl	80001fc <HAL_GetTick>
 8000e0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	0399      	lsls	r1, r3, #14
 8000e14:	d5b2      	bpl.n	8000d7c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e16:	f7ff f9f1 	bl	80001fc <HAL_GetTick>
 8000e1a:	1b80      	subs	r0, r0, r6
 8000e1c:	2864      	cmp	r0, #100	; 0x64
 8000e1e:	d9f7      	bls.n	8000e10 <HAL_RCC_OscConfig+0xa0>
 8000e20:	e7e8      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	d103      	bne.n	8000e32 <HAL_RCC_OscConfig+0xc2>
 8000e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2e:	6023      	str	r3, [r4, #0]
 8000e30:	e7d1      	b.n	8000dd6 <HAL_RCC_OscConfig+0x66>
 8000e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e36:	6023      	str	r3, [r4, #0]
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3e:	e7cd      	b.n	8000ddc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e40:	4c67      	ldr	r4, [pc, #412]	; (8000fe0 <HAL_RCC_OscConfig+0x270>)
 8000e42:	6863      	ldr	r3, [r4, #4]
 8000e44:	f013 0f0c 	tst.w	r3, #12
 8000e48:	d007      	beq.n	8000e5a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e4a:	6863      	ldr	r3, [r4, #4]
 8000e4c:	f003 030c 	and.w	r3, r3, #12
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d110      	bne.n	8000e76 <HAL_RCC_OscConfig+0x106>
 8000e54:	6863      	ldr	r3, [r4, #4]
 8000e56:	03da      	lsls	r2, r3, #15
 8000e58:	d40d      	bmi.n	8000e76 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	079b      	lsls	r3, r3, #30
 8000e5e:	d502      	bpl.n	8000e66 <HAL_RCC_OscConfig+0xf6>
 8000e60:	692b      	ldr	r3, [r5, #16]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d1af      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	696a      	ldr	r2, [r5, #20]
 8000e6a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e6e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e72:	6023      	str	r3, [r4, #0]
 8000e74:	e785      	b.n	8000d82 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e76:	692a      	ldr	r2, [r5, #16]
 8000e78:	4b5a      	ldr	r3, [pc, #360]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000e7a:	b16a      	cbz	r2, 8000e98 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e80:	f7ff f9bc 	bl	80001fc <HAL_GetTick>
 8000e84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	079f      	lsls	r7, r3, #30
 8000e8a:	d4ec      	bmi.n	8000e66 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e8c:	f7ff f9b6 	bl	80001fc <HAL_GetTick>
 8000e90:	1b80      	subs	r0, r0, r6
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d9f7      	bls.n	8000e86 <HAL_RCC_OscConfig+0x116>
 8000e96:	e7ad      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000e98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e9a:	f7ff f9af 	bl	80001fc <HAL_GetTick>
 8000e9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	0798      	lsls	r0, r3, #30
 8000ea4:	f57f af6d 	bpl.w	8000d82 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff f9a8 	bl	80001fc <HAL_GetTick>
 8000eac:	1b80      	subs	r0, r0, r6
 8000eae:	2802      	cmp	r0, #2
 8000eb0:	d9f6      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x130>
 8000eb2:	e79f      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eb4:	69aa      	ldr	r2, [r5, #24]
 8000eb6:	4c4a      	ldr	r4, [pc, #296]	; (8000fe0 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	4b4b      	ldr	r3, [pc, #300]	; (8000fe8 <HAL_RCC_OscConfig+0x278>)
 8000eba:	b1da      	cbz	r2, 8000ef4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ec0:	f7ff f99c 	bl	80001fc <HAL_GetTick>
 8000ec4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ec8:	079b      	lsls	r3, r3, #30
 8000eca:	d50d      	bpl.n	8000ee8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ecc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ed0:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_RCC_OscConfig+0x27c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ed8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("nop");
 8000eda:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000edc:	9b01      	ldr	r3, [sp, #4]
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	9201      	str	r2, [sp, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f9      	bne.n	8000eda <HAL_RCC_OscConfig+0x16a>
 8000ee6:	e750      	b.n	8000d8a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff f988 	bl	80001fc <HAL_GetTick>
 8000eec:	1b80      	subs	r0, r0, r6
 8000eee:	2802      	cmp	r0, #2
 8000ef0:	d9e9      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x156>
 8000ef2:	e77f      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000ef4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ef6:	f7ff f981 	bl	80001fc <HAL_GetTick>
 8000efa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000efe:	079f      	lsls	r7, r3, #30
 8000f00:	f57f af43 	bpl.w	8000d8a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f04:	f7ff f97a 	bl	80001fc <HAL_GetTick>
 8000f08:	1b80      	subs	r0, r0, r6
 8000f0a:	2802      	cmp	r0, #2
 8000f0c:	d9f6      	bls.n	8000efc <HAL_RCC_OscConfig+0x18c>
 8000f0e:	e771      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f10:	4c33      	ldr	r4, [pc, #204]	; (8000fe0 <HAL_RCC_OscConfig+0x270>)
 8000f12:	69e3      	ldr	r3, [r4, #28]
 8000f14:	00d8      	lsls	r0, r3, #3
 8000f16:	d424      	bmi.n	8000f62 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000f18:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	69e3      	ldr	r3, [r4, #28]
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	61e3      	str	r3, [r4, #28]
 8000f22:	69e3      	ldr	r3, [r4, #28]
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2c:	4e30      	ldr	r6, [pc, #192]	; (8000ff0 <HAL_RCC_OscConfig+0x280>)
 8000f2e:	6833      	ldr	r3, [r6, #0]
 8000f30:	05d9      	lsls	r1, r3, #23
 8000f32:	d518      	bpl.n	8000f66 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f34:	68eb      	ldr	r3, [r5, #12]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d126      	bne.n	8000f88 <HAL_RCC_OscConfig+0x218>
 8000f3a:	6a23      	ldr	r3, [r4, #32]
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f42:	f7ff f95b 	bl	80001fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f46:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f4a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	6a23      	ldr	r3, [r4, #32]
 8000f4e:	079b      	lsls	r3, r3, #30
 8000f50:	d53f      	bpl.n	8000fd2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000f52:	2f00      	cmp	r7, #0
 8000f54:	f43f af1d 	beq.w	8000d92 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f58:	69e3      	ldr	r3, [r4, #28]
 8000f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	61e3      	str	r3, [r4, #28]
 8000f60:	e717      	b.n	8000d92 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000f62:	2700      	movs	r7, #0
 8000f64:	e7e2      	b.n	8000f2c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f66:	6833      	ldr	r3, [r6, #0]
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f6e:	f7ff f945 	bl	80001fc <HAL_GetTick>
 8000f72:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f74:	6833      	ldr	r3, [r6, #0]
 8000f76:	05da      	lsls	r2, r3, #23
 8000f78:	d4dc      	bmi.n	8000f34 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f7a:	f7ff f93f 	bl	80001fc <HAL_GetTick>
 8000f7e:	eba0 0008 	sub.w	r0, r0, r8
 8000f82:	2864      	cmp	r0, #100	; 0x64
 8000f84:	d9f6      	bls.n	8000f74 <HAL_RCC_OscConfig+0x204>
 8000f86:	e735      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f88:	b9ab      	cbnz	r3, 8000fb6 <HAL_RCC_OscConfig+0x246>
 8000f8a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	6223      	str	r3, [r4, #32]
 8000f96:	6a23      	ldr	r3, [r4, #32]
 8000f98:	f023 0304 	bic.w	r3, r3, #4
 8000f9c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f9e:	f7ff f92d 	bl	80001fc <HAL_GetTick>
 8000fa2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa4:	6a23      	ldr	r3, [r4, #32]
 8000fa6:	0798      	lsls	r0, r3, #30
 8000fa8:	d5d3      	bpl.n	8000f52 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000faa:	f7ff f927 	bl	80001fc <HAL_GetTick>
 8000fae:	1b80      	subs	r0, r0, r6
 8000fb0:	4540      	cmp	r0, r8
 8000fb2:	d9f7      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x234>
 8000fb4:	e71e      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb6:	2b05      	cmp	r3, #5
 8000fb8:	6a23      	ldr	r3, [r4, #32]
 8000fba:	d103      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x254>
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6223      	str	r3, [r4, #32]
 8000fc2:	e7ba      	b.n	8000f3a <HAL_RCC_OscConfig+0x1ca>
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6223      	str	r3, [r4, #32]
 8000fca:	6a23      	ldr	r3, [r4, #32]
 8000fcc:	f023 0304 	bic.w	r3, r3, #4
 8000fd0:	e7b6      	b.n	8000f40 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd2:	f7ff f913 	bl	80001fc <HAL_GetTick>
 8000fd6:	eba0 0008 	sub.w	r0, r0, r8
 8000fda:	42b0      	cmp	r0, r6
 8000fdc:	d9b6      	bls.n	8000f4c <HAL_RCC_OscConfig+0x1dc>
 8000fde:	e709      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	42420000 	.word	0x42420000
 8000fe8:	42420480 	.word	0x42420480
 8000fec:	200000ac 	.word	0x200000ac
 8000ff0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff4:	4c22      	ldr	r4, [pc, #136]	; (8001080 <HAL_RCC_OscConfig+0x310>)
 8000ff6:	6863      	ldr	r3, [r4, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	f43f aee2 	beq.w	8000dc6 <HAL_RCC_OscConfig+0x56>
 8001002:	2300      	movs	r3, #0
 8001004:	4e1f      	ldr	r6, [pc, #124]	; (8001084 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001006:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001008:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800100a:	d12b      	bne.n	8001064 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800100c:	f7ff f8f6 	bl	80001fc <HAL_GetTick>
 8001010:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	0199      	lsls	r1, r3, #6
 8001016:	d41f      	bmi.n	8001058 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001018:	6a2b      	ldr	r3, [r5, #32]
 800101a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101e:	d105      	bne.n	800102c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001020:	6862      	ldr	r2, [r4, #4]
 8001022:	68a9      	ldr	r1, [r5, #8]
 8001024:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001028:	430a      	orrs	r2, r1
 800102a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800102c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800102e:	6862      	ldr	r2, [r4, #4]
 8001030:	430b      	orrs	r3, r1
 8001032:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001036:	4313      	orrs	r3, r2
 8001038:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800103a:	2301      	movs	r3, #1
 800103c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800103e:	f7ff f8dd 	bl	80001fc <HAL_GetTick>
 8001042:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	019a      	lsls	r2, r3, #6
 8001048:	f53f aea7 	bmi.w	8000d9a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104c:	f7ff f8d6 	bl	80001fc <HAL_GetTick>
 8001050:	1b40      	subs	r0, r0, r5
 8001052:	2802      	cmp	r0, #2
 8001054:	d9f6      	bls.n	8001044 <HAL_RCC_OscConfig+0x2d4>
 8001056:	e6cd      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff f8d0 	bl	80001fc <HAL_GetTick>
 800105c:	1bc0      	subs	r0, r0, r7
 800105e:	2802      	cmp	r0, #2
 8001060:	d9d7      	bls.n	8001012 <HAL_RCC_OscConfig+0x2a2>
 8001062:	e6c7      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001064:	f7ff f8ca 	bl	80001fc <HAL_GetTick>
 8001068:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	f57f ae94 	bpl.w	8000d9a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001072:	f7ff f8c3 	bl	80001fc <HAL_GetTick>
 8001076:	1b40      	subs	r0, r0, r5
 8001078:	2802      	cmp	r0, #2
 800107a:	d9f6      	bls.n	800106a <HAL_RCC_OscConfig+0x2fa>
 800107c:	e6ba      	b.n	8000df4 <HAL_RCC_OscConfig+0x84>
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	42420060 	.word	0x42420060

08001088 <HAL_RCC_GetSysClockFreq>:
{
 8001088:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800108c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800108e:	ac02      	add	r4, sp, #8
 8001090:	f103 0510 	add.w	r5, r3, #16
 8001094:	4622      	mov	r2, r4
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	6859      	ldr	r1, [r3, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	c203      	stmia	r2!, {r0, r1}
 800109e:	42ab      	cmp	r3, r5
 80010a0:	4614      	mov	r4, r2
 80010a2:	d1f7      	bne.n	8001094 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010a4:	2301      	movs	r3, #1
 80010a6:	f88d 3004 	strb.w	r3, [sp, #4]
 80010aa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80010ac:	4911      	ldr	r1, [pc, #68]	; (80010f4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010ae:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80010b2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80010b4:	f003 020c 	and.w	r2, r3, #12
 80010b8:	2a08      	cmp	r2, #8
 80010ba:	d117      	bne.n	80010ec <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010bc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80010c0:	a806      	add	r0, sp, #24
 80010c2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010c4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010c6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010ca:	d50c      	bpl.n	80010e6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010cc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010d0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010d4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010d6:	aa06      	add	r2, sp, #24
 80010d8:	4413      	add	r3, r2
 80010da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010de:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80010e2:	b007      	add	sp, #28
 80010e4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_RCC_GetSysClockFreq+0x74>)
 80010e8:	4350      	muls	r0, r2
 80010ea:	e7fa      	b.n	80010e2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80010ee:	e7f8      	b.n	80010e2 <HAL_RCC_GetSysClockFreq+0x5a>
 80010f0:	08003f44 	.word	0x08003f44
 80010f4:	40021000 	.word	0x40021000
 80010f8:	007a1200 	.word	0x007a1200
 80010fc:	003d0900 	.word	0x003d0900

08001100 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001100:	4a54      	ldr	r2, [pc, #336]	; (8001254 <HAL_RCC_ClockConfig+0x154>)
{
 8001102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001106:	6813      	ldr	r3, [r2, #0]
{
 8001108:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	428b      	cmp	r3, r1
{
 8001110:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001112:	d32a      	bcc.n	800116a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001114:	6829      	ldr	r1, [r5, #0]
 8001116:	078c      	lsls	r4, r1, #30
 8001118:	d434      	bmi.n	8001184 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	07ca      	lsls	r2, r1, #31
 800111c:	d447      	bmi.n	80011ae <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800111e:	4a4d      	ldr	r2, [pc, #308]	; (8001254 <HAL_RCC_ClockConfig+0x154>)
 8001120:	6813      	ldr	r3, [r2, #0]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	429e      	cmp	r6, r3
 8001128:	f0c0 8082 	bcc.w	8001230 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112c:	682a      	ldr	r2, [r5, #0]
 800112e:	4c4a      	ldr	r4, [pc, #296]	; (8001258 <HAL_RCC_ClockConfig+0x158>)
 8001130:	f012 0f04 	tst.w	r2, #4
 8001134:	f040 8087 	bne.w	8001246 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	0713      	lsls	r3, r2, #28
 800113a:	d506      	bpl.n	800114a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	692a      	ldr	r2, [r5, #16]
 8001140:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001144:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001148:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800114a:	f7ff ff9d 	bl	8001088 <HAL_RCC_GetSysClockFreq>
 800114e:	6863      	ldr	r3, [r4, #4]
 8001150:	4a42      	ldr	r2, [pc, #264]	; (800125c <HAL_RCC_ClockConfig+0x15c>)
 8001152:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	40d8      	lsrs	r0, r3
 800115a:	4b41      	ldr	r3, [pc, #260]	; (8001260 <HAL_RCC_ClockConfig+0x160>)
 800115c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff f80a 	bl	8000178 <HAL_InitTick>
  return HAL_OK;
 8001164:	2000      	movs	r0, #0
}
 8001166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116a:	6813      	ldr	r3, [r2, #0]
 800116c:	f023 0307 	bic.w	r3, r3, #7
 8001170:	430b      	orrs	r3, r1
 8001172:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001174:	6813      	ldr	r3, [r2, #0]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	4299      	cmp	r1, r3
 800117c:	d0ca      	beq.n	8001114 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800117e:	2001      	movs	r0, #1
 8001180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001186:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800118a:	bf1e      	ittt	ne
 800118c:	685a      	ldrne	r2, [r3, #4]
 800118e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001192:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001194:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001196:	bf42      	ittt	mi
 8001198:	685a      	ldrmi	r2, [r3, #4]
 800119a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800119e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	68a8      	ldr	r0, [r5, #8]
 80011a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011a8:	4302      	orrs	r2, r0
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	e7b5      	b.n	800111a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ae:	686a      	ldr	r2, [r5, #4]
 80011b0:	4c29      	ldr	r4, [pc, #164]	; (8001258 <HAL_RCC_ClockConfig+0x158>)
 80011b2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b6:	d11c      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	d0df      	beq.n	800117e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011be:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c4:	f023 0303 	bic.w	r3, r3, #3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80011cc:	f7ff f816 	bl	80001fc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80011d2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d114      	bne.n	8001202 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d8:	6863      	ldr	r3, [r4, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d09d      	beq.n	800111e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e2:	f7ff f80b 	bl	80001fc <HAL_GetTick>
 80011e6:	1bc0      	subs	r0, r0, r7
 80011e8:	4540      	cmp	r0, r8
 80011ea:	d9f5      	bls.n	80011d8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80011ec:	2003      	movs	r0, #3
 80011ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f2:	2a02      	cmp	r2, #2
 80011f4:	d102      	bne.n	80011fc <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011fa:	e7df      	b.n	80011bc <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	f013 0f02 	tst.w	r3, #2
 8001200:	e7dc      	b.n	80011bc <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001202:	2b02      	cmp	r3, #2
 8001204:	d10f      	bne.n	8001226 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001206:	6863      	ldr	r3, [r4, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b08      	cmp	r3, #8
 800120e:	d086      	beq.n	800111e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001210:	f7fe fff4 	bl	80001fc <HAL_GetTick>
 8001214:	1bc0      	subs	r0, r0, r7
 8001216:	4540      	cmp	r0, r8
 8001218:	d9f5      	bls.n	8001206 <HAL_RCC_ClockConfig+0x106>
 800121a:	e7e7      	b.n	80011ec <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800121c:	f7fe ffee 	bl	80001fc <HAL_GetTick>
 8001220:	1bc0      	subs	r0, r0, r7
 8001222:	4540      	cmp	r0, r8
 8001224:	d8e2      	bhi.n	80011ec <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001226:	6863      	ldr	r3, [r4, #4]
 8001228:	f013 0f0c 	tst.w	r3, #12
 800122c:	d1f6      	bne.n	800121c <HAL_RCC_ClockConfig+0x11c>
 800122e:	e776      	b.n	800111e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001230:	6813      	ldr	r3, [r2, #0]
 8001232:	f023 0307 	bic.w	r3, r3, #7
 8001236:	4333      	orrs	r3, r6
 8001238:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800123a:	6813      	ldr	r3, [r2, #0]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	429e      	cmp	r6, r3
 8001242:	d19c      	bne.n	800117e <HAL_RCC_ClockConfig+0x7e>
 8001244:	e772      	b.n	800112c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001246:	6863      	ldr	r3, [r4, #4]
 8001248:	68e9      	ldr	r1, [r5, #12]
 800124a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800124e:	430b      	orrs	r3, r1
 8001250:	6063      	str	r3, [r4, #4]
 8001252:	e771      	b.n	8001138 <HAL_RCC_ClockConfig+0x38>
 8001254:	40022000 	.word	0x40022000
 8001258:	40021000 	.word	0x40021000
 800125c:	08003f85 	.word	0x08003f85
 8001260:	200000ac 	.word	0x200000ac

08001264 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001264:	6803      	ldr	r3, [r0, #0]
{
 8001266:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800126a:	07d9      	lsls	r1, r3, #31
{
 800126c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800126e:	d520      	bpl.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001270:	4c35      	ldr	r4, [pc, #212]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001272:	69e3      	ldr	r3, [r4, #28]
 8001274:	00da      	lsls	r2, r3, #3
 8001276:	d432      	bmi.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001278:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	69e3      	ldr	r3, [r4, #28]
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	61e3      	str	r3, [r4, #28]
 8001282:	69e3      	ldr	r3, [r4, #28]
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	4e2f      	ldr	r6, [pc, #188]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800128e:	6833      	ldr	r3, [r6, #0]
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	d526      	bpl.n	80012e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001294:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001296:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800129a:	d136      	bne.n	800130a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800129c:	6a23      	ldr	r3, [r4, #32]
 800129e:	686a      	ldr	r2, [r5, #4]
 80012a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012a4:	4313      	orrs	r3, r2
 80012a6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012a8:	b11f      	cbz	r7, 80012b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012aa:	69e3      	ldr	r3, [r4, #28]
 80012ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80012b2:	6828      	ldr	r0, [r5, #0]
 80012b4:	0783      	lsls	r3, r0, #30
 80012b6:	d506      	bpl.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80012b8:	4a23      	ldr	r2, [pc, #140]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80012ba:	68a9      	ldr	r1, [r5, #8]
 80012bc:	6853      	ldr	r3, [r2, #4]
 80012be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80012c6:	f010 0010 	ands.w	r0, r0, #16
 80012ca:	d01b      	beq.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012cc:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80012ce:	68e9      	ldr	r1, [r5, #12]
 80012d0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80012d2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012d8:	430b      	orrs	r3, r1
 80012da:	6053      	str	r3, [r2, #4]
 80012dc:	e012      	b.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80012de:	2700      	movs	r7, #0
 80012e0:	e7d4      	b.n	800128c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e2:	6833      	ldr	r3, [r6, #0]
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80012ea:	f7fe ff87 	bl	80001fc <HAL_GetTick>
 80012ee:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	6833      	ldr	r3, [r6, #0]
 80012f2:	05d8      	lsls	r0, r3, #23
 80012f4:	d4ce      	bmi.n	8001294 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f6:	f7fe ff81 	bl	80001fc <HAL_GetTick>
 80012fa:	eba0 0008 	sub.w	r0, r0, r8
 80012fe:	2864      	cmp	r0, #100	; 0x64
 8001300:	d9f6      	bls.n	80012f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001302:	2003      	movs	r0, #3
}
 8001304:	b002      	add	sp, #8
 8001306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800130a:	686a      	ldr	r2, [r5, #4]
 800130c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001310:	4293      	cmp	r3, r2
 8001312:	d0c3      	beq.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001314:	2001      	movs	r0, #1
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001318:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800131a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800131c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800131e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001322:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001324:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001326:	07d9      	lsls	r1, r3, #31
 8001328:	d5b8      	bpl.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800132a:	f7fe ff67 	bl	80001fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001332:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001334:	6a23      	ldr	r3, [r4, #32]
 8001336:	079a      	lsls	r2, r3, #30
 8001338:	d4b0      	bmi.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7fe ff5f 	bl	80001fc <HAL_GetTick>
 800133e:	1b80      	subs	r0, r0, r6
 8001340:	4540      	cmp	r0, r8
 8001342:	d9f7      	bls.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001344:	e7dd      	b.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	40007000 	.word	0x40007000
 8001350:	42420440 	.word	0x42420440

08001354 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001354:	b084      	sub	sp, #16
 8001356:	a801      	add	r0, sp, #4
 8001358:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800135c:	b004      	add	sp, #16
 800135e:	2000      	movs	r0, #0
 8001360:	4770      	bx	lr

08001362 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001362:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001366:	b29b      	uxth	r3, r3
 8001368:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800136c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001370:	2000      	movs	r0, #0
 8001372:	4770      	bx	lr

08001374 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001374:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001378:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 800137c:	045b      	lsls	r3, r3, #17
 800137e:	0c5b      	lsrs	r3, r3, #17
 8001380:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001384:	2000      	movs	r0, #0
 8001386:	4770      	bx	lr

08001388 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001388:	2000      	movs	r0, #0
 800138a:	4770      	bx	lr

0800138c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800138c:	b084      	sub	sp, #16
 800138e:	b510      	push	{r4, lr}
 8001390:	ac03      	add	r4, sp, #12
 8001392:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 800139a:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 800139c:	2301      	movs	r3, #1
 800139e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80013a2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80013a6:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80013aa:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80013ae:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 80013b2:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80013ba:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80013be:	4610      	mov	r0, r2
 80013c0:	4770      	bx	lr

080013c2 <USB_FlushTxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80013c2:	2000      	movs	r0, #0
 80013c4:	4770      	bx	lr

080013c6 <USB_FlushRxFifo>:
 80013c6:	2000      	movs	r0, #0
 80013c8:	4770      	bx	lr
	...

080013cc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80013cc:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80013ce:	78cb      	ldrb	r3, [r1, #3]
 80013d0:	780a      	ldrb	r2, [r1, #0]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d80f      	bhi.n	80013f6 <USB_ActivateEndpoint+0x2a>
 80013d6:	e8df f003 	tbb	[pc, r3]
 80013da:	6402      	.short	0x6402
 80013dc:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80013de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80013e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80013e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ea:	041b      	lsls	r3, r3, #16
 80013ec:	0c1b      	lsrs	r3, r3, #16
 80013ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80013f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80013f6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80013fa:	780c      	ldrb	r4, [r1, #0]
 80013fc:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001400:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001404:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001408:	401a      	ands	r2, r3
 800140a:	432a      	orrs	r2, r5
 800140c:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001410:	7a8a      	ldrb	r2, [r1, #10]
 8001412:	780d      	ldrb	r5, [r1, #0]
 8001414:	2a00      	cmp	r2, #0
 8001416:	f040 8097 	bne.w	8001548 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 800141a:	784c      	ldrb	r4, [r1, #1]
 800141c:	888a      	ldrh	r2, [r1, #4]
 800141e:	2c00      	cmp	r4, #0
 8001420:	d04a      	beq.n	80014b8 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001422:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001426:	0852      	lsrs	r2, r2, #1
 8001428:	b2a4      	uxth	r4, r4
 800142a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800142e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001432:	0052      	lsls	r2, r2, #1
 8001434:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001438:	780c      	ldrb	r4, [r1, #0]
 800143a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800143e:	0652      	lsls	r2, r2, #25
 8001440:	d508      	bpl.n	8001454 <USB_ActivateEndpoint+0x88>
 8001442:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001446:	4013      	ands	r3, r2
 8001448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001450:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001454:	780a      	ldrb	r2, [r1, #0]
 8001456:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800145a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800145e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001462:	041b      	lsls	r3, r3, #16
 8001464:	0c1b      	lsrs	r3, r3, #16
 8001466:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800146a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001472:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001476:	2000      	movs	r0, #0
 8001478:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800147a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800147e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001486:	041b      	lsls	r3, r3, #16
 8001488:	0c1b      	lsrs	r3, r3, #16
 800148a:	e7b2      	b.n	80013f2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800148c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001490:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80014a0:	e7a7      	b.n	80013f2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80014a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80014aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	0c1b      	lsrs	r3, r3, #16
 80014b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b6:	e79c      	b.n	80013f2 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80014b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80014bc:	0852      	lsrs	r2, r2, #1
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3304      	adds	r3, #4
 80014c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80014c6:	0052      	lsls	r2, r2, #1
 80014c8:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80014cc:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80014d0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80014d4:	690d      	ldr	r5, [r1, #16]
 80014d6:	b292      	uxth	r2, r2
 80014d8:	780b      	ldrb	r3, [r1, #0]
 80014da:	3206      	adds	r2, #6
 80014dc:	2d3e      	cmp	r5, #62	; 0x3e
 80014de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80014e2:	d929      	bls.n	8001538 <USB_ActivateEndpoint+0x16c>
 80014e4:	f3c5 164f 	ubfx	r6, r5, #5, #16
 80014e8:	06eb      	lsls	r3, r5, #27
 80014ea:	bf04      	itt	eq
 80014ec:	f106 33ff 	addeq.w	r3, r6, #4294967295
 80014f0:	b29e      	uxtheq	r6, r3
 80014f2:	4b6e      	ldr	r3, [pc, #440]	; (80016ac <USB_ActivateEndpoint+0x2e0>)
 80014f4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80014fe:	780a      	ldrb	r2, [r1, #0]
 8001500:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001504:	045e      	lsls	r6, r3, #17
 8001506:	d50b      	bpl.n	8001520 <USB_ActivateEndpoint+0x154>
 8001508:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800150c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001510:	051b      	lsls	r3, r3, #20
 8001512:	0d1b      	lsrs	r3, r3, #20
 8001514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001520:	780a      	ldrb	r2, [r1, #0]
 8001522:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800152a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800152e:	041b      	lsls	r3, r3, #16
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001536:	e798      	b.n	800146a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001538:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800153c:	07ed      	lsls	r5, r5, #31
 800153e:	bf44      	itt	mi
 8001540:	3301      	addmi	r3, #1
 8001542:	b29b      	uxthmi	r3, r3
 8001544:	029b      	lsls	r3, r3, #10
 8001546:	e7d7      	b.n	80014f8 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001548:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 800154c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001550:	0512      	lsls	r2, r2, #20
 8001552:	0d12      	lsrs	r2, r2, #20
 8001554:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001558:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800155c:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001560:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001564:	780c      	ldrb	r4, [r1, #0]
 8001566:	b292      	uxth	r2, r2
 8001568:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800156c:	88cc      	ldrh	r4, [r1, #6]
 800156e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001572:	0864      	lsrs	r4, r4, #1
 8001574:	0064      	lsls	r4, r4, #1
 8001576:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800157a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800157e:	780c      	ldrb	r4, [r1, #0]
 8001580:	b292      	uxth	r2, r2
 8001582:	3204      	adds	r2, #4
 8001584:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001588:	890c      	ldrh	r4, [r1, #8]
 800158a:	0864      	lsrs	r4, r4, #1
 800158c:	0064      	lsls	r4, r4, #1
 800158e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001592:	784a      	ldrb	r2, [r1, #1]
 8001594:	780c      	ldrb	r4, [r1, #0]
 8001596:	2a00      	cmp	r2, #0
 8001598:	d147      	bne.n	800162a <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800159a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800159e:	0455      	lsls	r5, r2, #17
 80015a0:	d508      	bpl.n	80015b4 <USB_ActivateEndpoint+0x1e8>
 80015a2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80015a6:	4013      	ands	r3, r2
 80015a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80015b4:	780a      	ldrb	r2, [r1, #0]
 80015b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015ba:	065c      	lsls	r4, r3, #25
 80015bc:	d50b      	bpl.n	80015d6 <USB_ActivateEndpoint+0x20a>
 80015be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015c6:	051b      	lsls	r3, r3, #20
 80015c8:	0d1b      	lsrs	r3, r3, #20
 80015ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80015d6:	780a      	ldrb	r2, [r1, #0]
 80015d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015e0:	051b      	lsls	r3, r3, #20
 80015e2:	0d1b      	lsrs	r3, r3, #20
 80015e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80015f0:	f248 0280 	movw	r2, #32896	; 0x8080
 80015f4:	780c      	ldrb	r4, [r1, #0]
 80015f6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80015fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	0c1b      	lsrs	r3, r3, #16
 8001606:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800160a:	4313      	orrs	r3, r2
 800160c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001610:	7809      	ldrb	r1, [r1, #0]
 8001612:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800161a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	4313      	orrs	r3, r2
 8001624:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001628:	e725      	b.n	8001476 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800162a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800162e:	0452      	lsls	r2, r2, #17
 8001630:	d508      	bpl.n	8001644 <USB_ActivateEndpoint+0x278>
 8001632:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001636:	4013      	ands	r3, r2
 8001638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001640:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001644:	780a      	ldrb	r2, [r1, #0]
 8001646:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800164a:	065b      	lsls	r3, r3, #25
 800164c:	d50b      	bpl.n	8001666 <USB_ActivateEndpoint+0x29a>
 800164e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001656:	051b      	lsls	r3, r3, #20
 8001658:	0d1b      	lsrs	r3, r3, #20
 800165a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800165e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001662:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001666:	780a      	ldrb	r2, [r1, #0]
 8001668:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800166c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001670:	051b      	lsls	r3, r3, #20
 8001672:	0d1b      	lsrs	r3, r3, #20
 8001674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001680:	f248 0280 	movw	r2, #32896	; 0x8080
 8001684:	780c      	ldrb	r4, [r1, #0]
 8001686:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800168a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800168e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	4313      	orrs	r3, r2
 8001698:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800169c:	7809      	ldrb	r1, [r1, #0]
 800169e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80016a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016aa:	e7b8      	b.n	800161e <USB_ActivateEndpoint+0x252>
 80016ac:	ffff8000 	.word	0xffff8000

080016b0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80016b0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 80016b2:	7a8c      	ldrb	r4, [r1, #10]
 80016b4:	784a      	ldrb	r2, [r1, #1]
 80016b6:	780b      	ldrb	r3, [r1, #0]
 80016b8:	bbcc      	cbnz	r4, 800172e <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 80016ba:	b302      	cbz	r2, 80016fe <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80016bc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016c0:	0652      	lsls	r2, r2, #25
 80016c2:	d50b      	bpl.n	80016dc <USB_DeactivateEndpoint+0x2c>
 80016c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016cc:	0512      	lsls	r2, r2, #20
 80016ce:	0d12      	lsrs	r2, r2, #20
 80016d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016d4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80016d8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80016dc:	780a      	ldrb	r2, [r1, #0]
 80016de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	0c1b      	lsrs	r3, r3, #16
 80016ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80016fa:	2000      	movs	r0, #0
 80016fc:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80016fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001702:	0454      	lsls	r4, r2, #17
 8001704:	d50b      	bpl.n	800171e <USB_DeactivateEndpoint+0x6e>
 8001706:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800170a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800170e:	0512      	lsls	r2, r2, #20
 8001710:	0d12      	lsrs	r2, r2, #20
 8001712:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001716:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800171a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800171e:	780a      	ldrb	r2, [r1, #0]
 8001720:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172c:	e7dd      	b.n	80016ea <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 800172e:	2a00      	cmp	r2, #0
 8001730:	d148      	bne.n	80017c4 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001732:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001736:	0452      	lsls	r2, r2, #17
 8001738:	d50b      	bpl.n	8001752 <USB_DeactivateEndpoint+0xa2>
 800173a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800173e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001742:	0512      	lsls	r2, r2, #20
 8001744:	0d12      	lsrs	r2, r2, #20
 8001746:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800174a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800174e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001752:	780a      	ldrb	r2, [r1, #0]
 8001754:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001758:	065c      	lsls	r4, r3, #25
 800175a:	d50b      	bpl.n	8001774 <USB_DeactivateEndpoint+0xc4>
 800175c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001764:	051b      	lsls	r3, r3, #20
 8001766:	0d1b      	lsrs	r3, r3, #20
 8001768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001770:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001774:	780a      	ldrb	r2, [r1, #0]
 8001776:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800177a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800177e:	051b      	lsls	r3, r3, #20
 8001780:	0d1b      	lsrs	r3, r3, #20
 8001782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001786:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800178a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800178e:	f248 0280 	movw	r2, #32896	; 0x8080
 8001792:	780c      	ldrb	r4, [r1, #0]
 8001794:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800179c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	0c1b      	lsrs	r3, r3, #16
 80017a4:	4313      	orrs	r3, r2
 80017a6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80017aa:	7809      	ldrb	r1, [r1, #0]
 80017ac:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80017b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	0c1b      	lsrs	r3, r3, #16
 80017bc:	4313      	orrs	r3, r2
 80017be:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80017c2:	e79a      	b.n	80016fa <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017c8:	0452      	lsls	r2, r2, #17
 80017ca:	d50b      	bpl.n	80017e4 <USB_DeactivateEndpoint+0x134>
 80017cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017d4:	0512      	lsls	r2, r2, #20
 80017d6:	0d12      	lsrs	r2, r2, #20
 80017d8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80017dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017e4:	780a      	ldrb	r2, [r1, #0]
 80017e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017ea:	065b      	lsls	r3, r3, #25
 80017ec:	d50b      	bpl.n	8001806 <USB_DeactivateEndpoint+0x156>
 80017ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017f6:	051b      	lsls	r3, r3, #20
 80017f8:	0d1b      	lsrs	r3, r3, #20
 80017fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001802:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001806:	780a      	ldrb	r2, [r1, #0]
 8001808:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800180c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001810:	051b      	lsls	r3, r3, #20
 8001812:	0d1b      	lsrs	r3, r3, #20
 8001814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001820:	f248 0280 	movw	r2, #32896	; 0x8080
 8001824:	780c      	ldrb	r4, [r1, #0]
 8001826:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800182a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800182e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4313      	orrs	r3, r2
 8001838:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800183c:	7809      	ldrb	r1, [r1, #0]
 800183e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184a:	e7b5      	b.n	80017b8 <USB_DeactivateEndpoint+0x108>

0800184c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 800184c:	780a      	ldrb	r2, [r1, #0]
 800184e:	b98a      	cbnz	r2, 8001874 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001850:	8803      	ldrh	r3, [r0, #0]
 8001852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001862:	f083 0310 	eor.w	r3, r3, #16
 8001866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186e:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001870:	2000      	movs	r0, #0
 8001872:	4770      	bx	lr
    if (ep->is_in)
 8001874:	784b      	ldrb	r3, [r1, #1]
 8001876:	b183      	cbz	r3, 800189a <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001878:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800187c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800188c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001898:	e7ea      	b.n	8001870 <USB_EPSetStall+0x24>
 800189a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800189e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	0c1b      	lsrs	r3, r3, #16
 80018aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018ae:	e7ed      	b.n	800188c <USB_EPSetStall+0x40>

080018b0 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80018b0:	784b      	ldrb	r3, [r1, #1]
 80018b2:	780a      	ldrb	r2, [r1, #0]
 80018b4:	b313      	cbz	r3, 80018fc <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ba:	065b      	lsls	r3, r3, #25
 80018bc:	d50b      	bpl.n	80018d6 <USB_EPClearStall+0x26>
 80018be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018c6:	051b      	lsls	r3, r3, #20
 80018c8:	0d1b      	lsrs	r3, r3, #20
 80018ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80018d6:	780a      	ldrb	r2, [r1, #0]
 80018d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80018ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80018f8:	2000      	movs	r0, #0
 80018fa:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001900:	045b      	lsls	r3, r3, #17
 8001902:	d50b      	bpl.n	800191c <USB_EPClearStall+0x6c>
 8001904:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800190c:	051b      	lsls	r3, r3, #20
 800190e:	0d1b      	lsrs	r3, r3, #20
 8001910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001918:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800191c:	780a      	ldrb	r2, [r1, #0]
 800191e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192a:	041b      	lsls	r3, r3, #16
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001932:	e7db      	b.n	80018ec <USB_EPClearStall+0x3c>

08001934 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001934:	b911      	cbnz	r1, 800193c <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 800193c:	2000      	movs	r0, #0
 800193e:	4770      	bx	lr

08001940 <USB_DevConnect>:
 8001940:	2000      	movs	r0, #0
 8001942:	4770      	bx	lr

08001944 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001944:	2000      	movs	r0, #0
 8001946:	4770      	bx	lr

08001948 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001948:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800194c:	b280      	uxth	r0, r0
 800194e:	4770      	bx	lr

08001950 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001950:	2000      	movs	r0, #0
 8001952:	4770      	bx	lr

08001954 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001954:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001956:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001958:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800195a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800195e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001960:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001964:	42a3      	cmp	r3, r4
 8001966:	d100      	bne.n	800196a <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001968:	bd10      	pop	{r4, pc}
 800196a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 800196e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001972:	3401      	adds	r4, #1
 8001974:	e7f6      	b.n	8001964 <USB_WritePMA+0x10>
	...

08001978 <USB_EPStartXfer>:
{
 8001978:	b570      	push	{r4, r5, r6, lr}
 800197a:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 800197c:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 800197e:	7849      	ldrb	r1, [r1, #1]
{
 8001980:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001982:	2901      	cmp	r1, #1
 8001984:	6933      	ldr	r3, [r6, #16]
 8001986:	7ab0      	ldrb	r0, [r6, #10]
 8001988:	d166      	bne.n	8001a58 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 800198a:	429a      	cmp	r2, r3
 800198c:	461c      	mov	r4, r3
      ep->xfer_len =0;
 800198e:	bf9b      	ittet	ls
 8001990:	2300      	movls	r3, #0
 8001992:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001994:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001996:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001998:	bf88      	it	hi
 800199a:	61b2      	strhi	r2, [r6, #24]
 800199c:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 800199e:	bb10      	cbnz	r0, 80019e6 <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80019a0:	88b2      	ldrh	r2, [r6, #4]
 80019a2:	6971      	ldr	r1, [r6, #20]
 80019a4:	4628      	mov	r0, r5
 80019a6:	f7ff ffd5 	bl	8001954 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80019aa:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80019ae:	7832      	ldrb	r2, [r6, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3302      	adds	r3, #2
 80019b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019b8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80019bc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80019c0:	7832      	ldrb	r2, [r6, #0]
 80019c2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80019c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019ce:	041b      	lsls	r3, r3, #16
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80019d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019de:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80019e2:	2000      	movs	r0, #0
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80019e6:	7832      	ldrb	r2, [r6, #0]
 80019e8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 80019ec:	00d2      	lsls	r2, r2, #3
 80019ee:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80019f2:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80019f6:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80019f8:	d01a      	beq.n	8001a30 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80019fa:	3102      	adds	r1, #2
 80019fc:	440a      	add	r2, r1
 80019fe:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001a02:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001a06:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001a08:	6971      	ldr	r1, [r6, #20]
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	f7ff ffa2 	bl	8001954 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001a10:	7873      	ldrb	r3, [r6, #1]
 8001a12:	7832      	ldrb	r2, [r6, #0]
 8001a14:	b99b      	cbnz	r3, 8001a3e <USB_EPStartXfer+0xc6>
 8001a16:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a1e:	051b      	lsls	r3, r3, #20
 8001a20:	0d1b      	lsrs	r3, r3, #20
 8001a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a2a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001a2e:	e7c7      	b.n	80019c0 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001a30:	440a      	add	r2, r1
 8001a32:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001a36:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001a3a:	88f2      	ldrh	r2, [r6, #6]
 8001a3c:	e7e4      	b.n	8001a08 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d1be      	bne.n	80019c0 <USB_EPStartXfer+0x48>
 8001a42:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a4a:	051b      	lsls	r3, r3, #20
 8001a4c:	0d1b      	lsrs	r3, r3, #20
 8001a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a56:	e7e8      	b.n	8001a2a <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001a58:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001a5a:	bf93      	iteet	ls
 8001a5c:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8001a5e:	1ad2      	subhi	r2, r2, r3
 8001a60:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8001a62:	61b3      	strls	r3, [r6, #24]
 8001a64:	bf98      	it	ls
 8001a66:	4613      	movls	r3, r2
 8001a68:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8001a6a:	bb70      	cbnz	r0, 8001aca <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001a6c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001a70:	2b3e      	cmp	r3, #62	; 0x3e
 8001a72:	b289      	uxth	r1, r1
 8001a74:	f101 0106 	add.w	r1, r1, #6
 8001a78:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001a7c:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001a80:	d918      	bls.n	8001ab4 <USB_EPStartXfer+0x13c>
 8001a82:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001a86:	06db      	lsls	r3, r3, #27
 8001a88:	bf04      	itt	eq
 8001a8a:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8001a8e:	b29a      	uxtheq	r2, r3
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <USB_EPStartXfer+0x1fc>)
 8001a92:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a9c:	7832      	ldrb	r2, [r6, #0]
 8001a9e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ab2:	e790      	b.n	80019d6 <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001ab4:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001ab8:	07dc      	lsls	r4, r3, #31
 8001aba:	bf44      	itt	mi
 8001abc:	3201      	addmi	r2, #1
 8001abe:	b292      	uxthmi	r2, r2
 8001ac0:	0292      	lsls	r2, r2, #10
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001ac8:	e7e8      	b.n	8001a9c <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001aca:	b9b9      	cbnz	r1, 8001afc <USB_EPStartXfer+0x184>
 8001acc:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001ad0:	2b3e      	cmp	r3, #62	; 0x3e
 8001ad2:	b289      	uxth	r1, r1
 8001ad4:	f101 0102 	add.w	r1, r1, #2
 8001ad8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001adc:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8001ae0:	d928      	bls.n	8001b34 <USB_EPStartXfer+0x1bc>
 8001ae2:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8001ae6:	06da      	lsls	r2, r3, #27
 8001ae8:	bf04      	itt	eq
 8001aea:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8001aee:	b290      	uxtheq	r0, r2
 8001af0:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <USB_EPStartXfer+0x1fc>)
 8001af2:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8001af6:	b292      	uxth	r2, r2
 8001af8:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8001afc:	7872      	ldrb	r2, [r6, #1]
 8001afe:	7831      	ldrb	r1, [r6, #0]
 8001b00:	bb5a      	cbnz	r2, 8001b5a <USB_EPStartXfer+0x1e2>
 8001b02:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001b06:	2b3e      	cmp	r3, #62	; 0x3e
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	f102 0206 	add.w	r2, r2, #6
 8001b0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001b12:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001b16:	d915      	bls.n	8001b44 <USB_EPStartXfer+0x1cc>
 8001b18:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8001b1c:	06dc      	lsls	r4, r3, #27
 8001b1e:	bf04      	itt	eq
 8001b20:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8001b24:	b299      	uxtheq	r1, r3
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <USB_EPStartXfer+0x1fc>)
 8001b28:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8001b32:	e7b3      	b.n	8001a9c <USB_EPStartXfer+0x124>
 8001b34:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001b38:	07d8      	lsls	r0, r3, #31
 8001b3a:	bf44      	itt	mi
 8001b3c:	3201      	addmi	r2, #1
 8001b3e:	b292      	uxthmi	r2, r2
 8001b40:	0292      	lsls	r2, r2, #10
 8001b42:	e7d8      	b.n	8001af6 <USB_EPStartXfer+0x17e>
 8001b44:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8001b48:	07db      	lsls	r3, r3, #31
 8001b4a:	bf44      	itt	mi
 8001b4c:	3101      	addmi	r1, #1
 8001b4e:	b289      	uxthmi	r1, r1
 8001b50:	0289      	lsls	r1, r1, #10
 8001b52:	b289      	uxth	r1, r1
 8001b54:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8001b58:	e7a0      	b.n	8001a9c <USB_EPStartXfer+0x124>
 8001b5a:	2a01      	cmp	r2, #1
 8001b5c:	d19e      	bne.n	8001a9c <USB_EPStartXfer+0x124>
 8001b5e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001b62:	b292      	uxth	r2, r2
 8001b64:	3202      	adds	r2, #2
 8001b66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001b6a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001b6e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001b72:	e793      	b.n	8001a9c <USB_EPStartXfer+0x124>
 8001b74:	ffff8000 	.word	0xffff8000

08001b78 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001b78:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001b7a:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001b7c:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001b7e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001b82:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001b84:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001b88:	42a3      	cmp	r3, r4
 8001b8a:	d100      	bne.n	8001b8e <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001b8c:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001b8e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001b92:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8001b96:	3401      	adds	r4, #1
 8001b98:	e7f6      	b.n	8001b88 <USB_ReadPMA+0x10>
	...

08001b9c <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8001ba0:	4800      	ldr	r0, [pc, #0]	; (8001ba4 <USBD_MSC_GetHSCfgDesc+0x8>)
 8001ba2:	4770      	bx	lr
 8001ba4:	20000060 	.word	0x20000060

08001ba8 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8001ba8:	2320      	movs	r3, #32
 8001baa:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8001bac:	4800      	ldr	r0, [pc, #0]	; (8001bb0 <USBD_MSC_GetFSCfgDesc+0x8>)
 8001bae:	4770      	bx	lr
 8001bb0:	20000040 	.word	0x20000040

08001bb4 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8001bb8:	4800      	ldr	r0, [pc, #0]	; (8001bbc <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8001bba:	4770      	bx	lr
 8001bbc:	2000008c 	.word	0x2000008c

08001bc0 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8001bc0:	230a      	movs	r3, #10
 8001bc2:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8001bc4:	4800      	ldr	r0, [pc, #0]	; (8001bc8 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8001bc6:	4770      	bx	lr
 8001bc8:	20000080 	.word	0x20000080

08001bcc <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001bcc:	7c03      	ldrb	r3, [r0, #16]
{
 8001bce:	b510      	push	{r4, lr}
 8001bd0:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001bd2:	b9c3      	cbnz	r3, 8001c06 <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8001bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd8:	2202      	movs	r2, #2
 8001bda:	2101      	movs	r1, #1
 8001bdc:	f001 fa88 	bl	80030f0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001be0:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8001be4:	2202      	movs	r2, #2
 8001be6:	2181      	movs	r1, #129	; 0x81
 8001be8:	4620      	mov	r0, r4
 8001bea:	f001 fa81 	bl	80030f0 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8001bee:	f240 406c 	movw	r0, #1132	; 0x46c
 8001bf2:	f001 fb05 	bl	8003200 <USBD_static_malloc>
 8001bf6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001bfa:	b158      	cbz	r0, 8001c14 <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f000 f8bb 	bl	8001d78 <MSC_BOT_Init>
    ret = 0;
 8001c02:	2000      	movs	r0, #0
 8001c04:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8001c06:	2340      	movs	r3, #64	; 0x40
 8001c08:	2202      	movs	r2, #2
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	f001 fa70 	bl	80030f0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001c10:	2340      	movs	r3, #64	; 0x40
 8001c12:	e7e7      	b.n	8001be4 <USBD_MSC_Init+0x18>
    ret = 1; 
 8001c14:	2001      	movs	r0, #1
}
 8001c16:	bd10      	pop	{r4, pc}

08001c18 <USBD_MSC_DeInit>:
{
 8001c18:	b510      	push	{r4, lr}
 8001c1a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	f001 fa77 	bl	8003110 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001c22:	2181      	movs	r1, #129	; 0x81
 8001c24:	4620      	mov	r0, r4
 8001c26:	f001 fa73 	bl	8003110 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f000 f8cf 	bl	8001dce <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8001c30:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001c34:	b120      	cbz	r0, 8001c40 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8001c36:	f001 fae7 	bl	8003208 <USBD_static_free>
    pdev->pClassData  = NULL; 
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001c40:	2000      	movs	r0, #0
 8001c42:	bd10      	pop	{r4, pc}

08001c44 <USBD_MSC_Setup>:
{
 8001c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c48:	780b      	ldrb	r3, [r1, #0]
{
 8001c4a:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c4c:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8001c50:	460d      	mov	r5, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8001c52:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c56:	d02d      	beq.n	8001cb4 <USBD_MSC_Setup+0x70>
 8001c58:	2c20      	cmp	r4, #32
 8001c5a:	d14a      	bne.n	8001cf2 <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 8001c5c:	784a      	ldrb	r2, [r1, #1]
 8001c5e:	2afe      	cmp	r2, #254	; 0xfe
 8001c60:	d005      	beq.n	8001c6e <USBD_MSC_Setup+0x2a>
 8001c62:	2aff      	cmp	r2, #255	; 0xff
 8001c64:	d019      	beq.n	8001c9a <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8001c66:	f000 fe7a 	bl	800295e <USBD_CtlError>
       return USBD_FAIL; 
 8001c6a:	2402      	movs	r4, #2
 8001c6c:	e01f      	b.n	8001cae <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8001c6e:	884c      	ldrh	r4, [r1, #2]
 8001c70:	b984      	cbnz	r4, 8001c94 <USBD_MSC_Setup+0x50>
 8001c72:	88cf      	ldrh	r7, [r1, #6]
 8001c74:	2f01      	cmp	r7, #1
 8001c76:	d10d      	bne.n	8001c94 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8001c78:	061a      	lsls	r2, r3, #24
 8001c7a:	d50b      	bpl.n	8001c94 <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8001c7c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8001c84:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8001c86:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8001c8a:	4641      	mov	r1, r8
 8001c8c:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8001c8e:	f000 fe8d 	bl	80029ac <USBD_CtlSendData>
      break;
 8001c92:	e00c      	b.n	8001cae <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8001c94:	4629      	mov	r1, r5
 8001c96:	4630      	mov	r0, r6
 8001c98:	e7e5      	b.n	8001c66 <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8001c9a:	884a      	ldrh	r2, [r1, #2]
 8001c9c:	2a00      	cmp	r2, #0
 8001c9e:	d1f9      	bne.n	8001c94 <USBD_MSC_Setup+0x50>
 8001ca0:	88cc      	ldrh	r4, [r1, #6]
 8001ca2:	2c00      	cmp	r4, #0
 8001ca4:	d1f6      	bne.n	8001c94 <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 8001ca6:	061b      	lsls	r3, r3, #24
 8001ca8:	d4f4      	bmi.n	8001c94 <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 8001caa:	f000 f885 	bl	8001db8 <MSC_BOT_Reset>
}
 8001cae:	4620      	mov	r0, r4
 8001cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8001cb4:	784f      	ldrb	r7, [r1, #1]
 8001cb6:	2f0a      	cmp	r7, #10
 8001cb8:	d01d      	beq.n	8001cf6 <USBD_MSC_Setup+0xb2>
 8001cba:	2f0b      	cmp	r7, #11
 8001cbc:	d01f      	beq.n	8001cfe <USBD_MSC_Setup+0xba>
 8001cbe:	2f01      	cmp	r7, #1
 8001cc0:	d1f5      	bne.n	8001cae <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8001cc2:	7909      	ldrb	r1, [r1, #4]
 8001cc4:	f001 fa32 	bl	800312c <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8001cc8:	7929      	ldrb	r1, [r5, #4]
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f001 fa20 	bl	8003110 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8001cd0:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	7c33      	ldrb	r3, [r6, #16]
 8001cd8:	da17      	bge.n	8001d0a <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001cda:	b9a3      	cbnz	r3, 8001d06 <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 8001cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	f001 fa03 	bl	80030f0 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8001cea:	7929      	ldrb	r1, [r5, #4]
 8001cec:	4630      	mov	r0, r6
 8001cee:	f000 f915 	bl	8001f1c <MSC_BOT_CplClrFeature>
  return 0;
 8001cf2:	2400      	movs	r4, #0
 8001cf4:	e7db      	b.n	8001cae <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f108 0104 	add.w	r1, r8, #4
 8001cfc:	e7c7      	b.n	8001c8e <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 8001cfe:	788b      	ldrb	r3, [r1, #2]
 8001d00:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8001d04:	e7d3      	b.n	8001cae <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8001d06:	2340      	movs	r3, #64	; 0x40
 8001d08:	e7ea      	b.n	8001ce0 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001d0a:	b923      	cbnz	r3, 8001d16 <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 8001d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8001d10:	2202      	movs	r2, #2
 8001d12:	4639      	mov	r1, r7
 8001d14:	e7e6      	b.n	8001ce4 <USBD_MSC_Setup+0xa0>
 8001d16:	2340      	movs	r3, #64	; 0x40
 8001d18:	e7fa      	b.n	8001d10 <USBD_MSC_Setup+0xcc>

08001d1a <USBD_MSC_DataIn>:
{
 8001d1a:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8001d1c:	f000 f878 	bl	8001e10 <MSC_BOT_DataIn>
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	bd08      	pop	{r3, pc}

08001d24 <USBD_MSC_DataOut>:
{
 8001d24:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8001d26:	f000 f88f 	bl	8001e48 <MSC_BOT_DataOut>
}
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	bd08      	pop	{r3, pc}

08001d2e <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8001d2e:	b109      	cbz	r1, 8001d34 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8001d30:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8001d34:	2000      	movs	r0, #0
 8001d36:	4770      	bx	lr

08001d38 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8001d38:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001d3a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
{
 8001d3e:	4605      	mov	r5, r0
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8001d40:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8001d44:	b93b      	cbnz	r3, 8001d56 <MSC_BOT_Abort+0x1e>
 8001d46:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 8001d4a:	b123      	cbz	r3, 8001d56 <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0) &&
 8001d4c:	7a63      	ldrb	r3, [r4, #9]
 8001d4e:	b913      	cbnz	r3, 8001d56 <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8001d50:	2101      	movs	r1, #1
 8001d52:	f001 f9f9 	bl	8003148 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8001d56:	2181      	movs	r1, #129	; 0x81
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f001 f9f5 	bl	8003148 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8001d5e:	7a63      	ldrb	r3, [r4, #9]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d108      	bne.n	8001d76 <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev,
 8001d64:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 8001d68:	4628      	mov	r0, r5
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8001d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8001d6e:	231f      	movs	r3, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	f001 ba31 	b.w	80031d8 <USBD_LL_PrepareReceive>
 8001d76:	bd70      	pop	{r4, r5, r6, pc}

08001d78 <MSC_BOT_Init>:
{
 8001d78:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8001d7a:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 8001d7e:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 8001d80:	2000      	movs	r0, #0
 8001d82:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8001d84:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8001d86:	f885 045d 	strb.w	r0, [r5, #1117]	; 0x45d
  hmsc->scsi_sense_head = 0;
 8001d8a:	f885 045c 	strb.w	r0, [r5, #1116]	; 0x45c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8001d8e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8001d96:	2101      	movs	r1, #1
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f001 f9c7 	bl	800312c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8001d9e:	2181      	movs	r1, #129	; 0x81
 8001da0:	4620      	mov	r0, r4
 8001da2:	f001 f9c3 	bl	800312c <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8001da6:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8001daa:	4620      	mov	r0, r4
}
 8001dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8001db0:	231f      	movs	r3, #31
 8001db2:	2101      	movs	r1, #1
 8001db4:	f001 ba10 	b.w	80031d8 <USBD_LL_PrepareReceive>

08001db8 <MSC_BOT_Reset>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8001db8:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8001dba:	2101      	movs	r1, #1
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8001dbc:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8001dc0:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8001dc2:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8001dc4:	231f      	movs	r3, #31
 8001dc6:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001dca:	f001 ba05 	b.w	80031d8 <USBD_LL_PrepareReceive>

08001dce <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8001dd4:	721a      	strb	r2, [r3, #8]
 8001dd6:	4770      	bx	lr

08001dd8 <MSC_BOT_SendCSW>:
{
 8001dd8:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MSC_BOT_SendCSW+0x34>)
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001ddc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
{
 8001de0:	4605      	mov	r5, r0
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8001de2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  hmsc->bot_state = USBD_BOT_IDLE;
 8001de6:	2300      	movs	r3, #0
  hmsc->csw.bStatus = CSW_Status;
 8001de8:	f884 1438 	strb.w	r1, [r4, #1080]	; 0x438
  hmsc->bot_state = USBD_BOT_IDLE;
 8001dec:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8001dee:	f204 422c 	addw	r2, r4, #1068	; 0x42c
 8001df2:	230d      	movs	r3, #13
 8001df4:	2181      	movs	r1, #129	; 0x81
 8001df6:	f001 f9e1 	bl	80031bc <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8001dfa:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 8001dfe:	4628      	mov	r0, r5
}
 8001e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8001e04:	231f      	movs	r3, #31
 8001e06:	2101      	movs	r1, #1
 8001e08:	f001 b9e6 	b.w	80031d8 <USBD_LL_PrepareReceive>
 8001e0c:	53425355 	.word	0x53425355

08001e10 <MSC_BOT_DataIn>:
{
 8001e10:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8001e12:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
{
 8001e16:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8001e18:	7a1a      	ldrb	r2, [r3, #8]
 8001e1a:	2a02      	cmp	r2, #2
 8001e1c:	d003      	beq.n	8001e26 <MSC_BOT_DataIn+0x16>
 8001e1e:	d312      	bcc.n	8001e46 <MSC_BOT_DataIn+0x36>
 8001e20:	2a04      	cmp	r2, #4
 8001e22:	d90e      	bls.n	8001e42 <MSC_BOT_DataIn+0x32>
 8001e24:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8001e26:	f203 421b 	addw	r2, r3, #1051	; 0x41b
 8001e2a:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 8001e2e:	f000 f89f 	bl	8001f70 <SCSI_ProcessCmd>
 8001e32:	2800      	cmp	r0, #0
 8001e34:	da07      	bge.n	8001e46 <MSC_BOT_DataIn+0x36>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8001e36:	2101      	movs	r1, #1
 8001e38:	4620      	mov	r0, r4
}
 8001e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8001e3e:	f7ff bfcb 	b.w	8001dd8 <MSC_BOT_SendCSW>
 8001e42:	2100      	movs	r1, #0
 8001e44:	e7f9      	b.n	8001e3a <MSC_BOT_DataIn+0x2a>
 8001e46:	bd10      	pop	{r4, pc}

08001e48 <MSC_BOT_DataOut>:
{
 8001e48:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8001e4a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
{
 8001e4e:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8001e50:	7a26      	ldrb	r6, [r4, #8]
 8001e52:	b116      	cbz	r6, 8001e5a <MSC_BOT_DataOut+0x12>
 8001e54:	2e01      	cmp	r6, #1
 8001e56:	d056      	beq.n	8001f06 <MSC_BOT_DataOut+0xbe>
 8001e58:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8001e5a:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8001e5e:	2101      	movs	r1, #1
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8001e60:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8001e64:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 8001e68:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8001e6c:	f001 f9c2 	bl	80031f4 <USBD_LL_GetRxDataSize>
 8001e70:	281f      	cmp	r0, #31
 8001e72:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
 8001e76:	d10b      	bne.n	8001e90 <MSC_BOT_DataOut+0x48>
 8001e78:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
 8001e7c:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <MSC_BOT_DataOut+0xd0>)
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d106      	bne.n	8001e90 <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8001e82:	2901      	cmp	r1, #1
 8001e84:	d804      	bhi.n	8001e90 <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1) || 
 8001e86:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d90b      	bls.n	8001ea8 <MSC_BOT_DataOut+0x60>
    SCSI_SenseCode(pdev,
 8001e90:	2320      	movs	r3, #32
 8001e92:	2205      	movs	r2, #5
 8001e94:	4628      	mov	r0, r5
 8001e96:	f000 fa99 	bl	80023cc <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8001e9e:	4628      	mov	r0, r5
}
 8001ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 8001ea4:	f7ff bf48 	b.w	8001d38 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 8001ea8:	f204 421b 	addw	r2, r4, #1051	; 0x41b
 8001eac:	4628      	mov	r0, r5
 8001eae:	f000 f85f 	bl	8001f70 <SCSI_ProcessCmd>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	7a23      	ldrb	r3, [r4, #8]
 8001eb6:	da07      	bge.n	8001ec8 <MSC_BOT_DataOut+0x80>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d1f0      	bne.n	8001e9e <MSC_BOT_DataOut+0x56>
       MSC_BOT_SendCSW (pdev,
 8001ebc:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 8001ebe:	4628      	mov	r0, r5
}
 8001ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW (pdev,
 8001ec4:	f7ff bf88 	b.w	8001dd8 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d923      	bls.n	8001f16 <MSC_BOT_DataOut+0xce>
      if (hmsc->bot_data_length > 0)
 8001ece:	8961      	ldrh	r1, [r4, #10]
 8001ed0:	2900      	cmp	r1, #0
 8001ed2:	d0f4      	beq.n	8001ebe <MSC_BOT_DataOut+0x76>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001ed4:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8001ed8:	4628      	mov	r0, r5
  len = MIN (hmsc->cbw.dDataLength, len);
 8001eda:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8001ede:	f882 6438 	strb.w	r6, [r2, #1080]	; 0x438
  len = MIN (hmsc->cbw.dDataLength, len);
 8001ee2:	4299      	cmp	r1, r3
 8001ee4:	bf28      	it	cs
 8001ee6:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 8001ee8:	f8d2 3434 	ldr.w	r3, [r2, #1076]	; 0x434
 8001eec:	1a5b      	subs	r3, r3, r1
 8001eee:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	7213      	strb	r3, [r2, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8001ef6:	b28b      	uxth	r3, r1
 8001ef8:	f104 020c 	add.w	r2, r4, #12
 8001efc:	2181      	movs	r1, #129	; 0x81
}
 8001efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8001f02:	f001 b95b 	b.w	80031bc <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 8001f06:	f204 421b 	addw	r2, r4, #1051	; 0x41b
 8001f0a:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
 8001f0e:	f000 f82f 	bl	8001f70 <SCSI_ProcessCmd>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	dbd2      	blt.n	8001ebc <MSC_BOT_DataOut+0x74>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	43425355 	.word	0x43425355

08001f1c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8001f1c:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001f1e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8001f22:	7a63      	ldrb	r3, [r4, #9]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d105      	bne.n	8001f34 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8001f28:	2181      	movs	r1, #129	; 0x81
 8001f2a:	f001 f90d 	bl	8003148 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8001f2e:	2300      	movs	r3, #0
 8001f30:	7263      	strb	r3, [r4, #9]
 8001f32:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8001f34:	060a      	lsls	r2, r1, #24
 8001f36:	d506      	bpl.n	8001f46 <MSC_BOT_CplClrFeature+0x2a>
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d004      	beq.n	8001f46 <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 8001f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8001f40:	2101      	movs	r1, #1
 8001f42:	f7ff bf49 	b.w	8001dd8 <MSC_BOT_SendCSW>
 8001f46:	bd10      	pop	{r4, pc}

08001f48 <SCSI_SenseCode.constprop.8>:
* @param  sKey: Sense Key
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 8001f48:	b510      	push	{r4, lr}
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001f4a:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8001f4e:	0212      	lsls	r2, r2, #8
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8001f50:	f890 345d 	ldrb.w	r3, [r0, #1117]	; 0x45d
 8001f54:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense_tail++;
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8001f5c:	2b04      	cmp	r3, #4
  {
    hmsc->scsi_sense_tail = 0;
 8001f5e:	bf08      	it	eq
 8001f60:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8001f62:	f884 143c 	strb.w	r1, [r4, #1084]	; 0x43c
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8001f66:	f8c4 2440 	str.w	r2, [r4, #1088]	; 0x440
    hmsc->scsi_sense_tail = 0;
 8001f6a:	f880 345d 	strb.w	r3, [r0, #1117]	; 0x45d
 8001f6e:	bd10      	pop	{r4, pc}

08001f70 <SCSI_ProcessCmd>:
{
 8001f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (params[0])
 8001f74:	7813      	ldrb	r3, [r2, #0]
{
 8001f76:	4605      	mov	r5, r0
  switch (params[0])
 8001f78:	2b1e      	cmp	r3, #30
{
 8001f7a:	460c      	mov	r4, r1
 8001f7c:	4617      	mov	r7, r2
  switch (params[0])
 8001f7e:	d00f      	beq.n	8001fa0 <SCSI_ProcessCmd+0x30>
 8001f80:	d813      	bhi.n	8001faa <SCSI_ProcessCmd+0x3a>
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	f000 80ad 	beq.w	80020e2 <SCSI_ProcessCmd+0x172>
 8001f88:	d805      	bhi.n	8001f96 <SCSI_ProcessCmd+0x26>
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d05d      	beq.n	800204a <SCSI_ProcessCmd+0xda>
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d077      	beq.n	8002082 <SCSI_ProcessCmd+0x112>
    SCSI_SenseCode(pdev, 
 8001f92:	2220      	movs	r2, #32
 8001f94:	e13c      	b.n	8002210 <SCSI_ProcessCmd+0x2a0>
  switch (params[0])
 8001f96:	2b1a      	cmp	r3, #26
 8001f98:	f000 80c0 	beq.w	800211c <SCSI_ProcessCmd+0x1ac>
 8001f9c:	2b1b      	cmp	r3, #27
 8001f9e:	d1f8      	bne.n	8001f92 <SCSI_ProcessCmd+0x22>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 8001fa6:	815c      	strh	r4, [r3, #10]
 8001fa8:	e067      	b.n	800207a <SCSI_ProcessCmd+0x10a>
  switch (params[0])
 8001faa:	2b28      	cmp	r3, #40	; 0x28
 8001fac:	f000 8103 	beq.w	80021b6 <SCSI_ProcessCmd+0x246>
 8001fb0:	d826      	bhi.n	8002000 <SCSI_ProcessCmd+0x90>
 8001fb2:	2b23      	cmp	r3, #35	; 0x23
 8001fb4:	f000 80d0 	beq.w	8002158 <SCSI_ProcessCmd+0x1e8>
 8001fb8:	2b25      	cmp	r3, #37	; 0x25
 8001fba:	d1ea      	bne.n	8001f92 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001fbc:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8001fc0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001fc4:	f206 425e 	addw	r2, r6, #1118	; 0x45e
 8001fc8:	4620      	mov	r0, r4
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f506 618c 	add.w	r1, r6, #1120	; 0x460
 8001fd0:	4798      	blx	r3
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	f040 80d4 	bne.w	8002182 <SCSI_ProcessCmd+0x212>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8001fda:	f8d6 3460 	ldr.w	r3, [r6, #1120]	; 0x460
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8001fde:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	0e1a      	lsrs	r2, r3, #24
 8001fe4:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8001fe6:	0c1a      	lsrs	r2, r3, #16
 8001fe8:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8001fea:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8001fec:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8001fee:	f8b6 345e 	ldrh.w	r3, [r6, #1118]	; 0x45e
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8001ff2:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8001ff4:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8001ff6:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8001ff8:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8001ffa:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	e0d8      	b.n	80021b2 <SCSI_ProcessCmd+0x242>
  switch (params[0])
 8002000:	2b2f      	cmp	r3, #47	; 0x2f
 8002002:	f000 8195 	beq.w	8002330 <SCSI_ProcessCmd+0x3c0>
 8002006:	2b5a      	cmp	r3, #90	; 0x5a
 8002008:	f000 8097 	beq.w	800213a <SCSI_ProcessCmd+0x1ca>
 800200c:	2b2a      	cmp	r3, #42	; 0x2a
 800200e:	d1c0      	bne.n	8001f92 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8002010:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8002014:	7a33      	ldrb	r3, [r6, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 814c 	bne.w	80022b4 <SCSI_ProcessCmd+0x344>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 800201c:	f996 3418 	ldrsb.w	r3, [r6, #1048]	; 0x418
 8002020:	2b00      	cmp	r3, #0
 8002022:	dbb6      	blt.n	8001f92 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8002024:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002028:	4608      	mov	r0, r1
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4798      	blx	r3
 800202e:	2800      	cmp	r0, #0
 8002030:	f040 80a7 	bne.w	8002182 <SCSI_ProcessCmd+0x212>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8002034:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002038:	4620      	mov	r0, r4
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4798      	blx	r3
 800203e:	4604      	mov	r4, r0
 8002040:	2800      	cmp	r0, #0
 8002042:	f000 8102 	beq.w	800224a <SCSI_ProcessCmd+0x2da>
      SCSI_SenseCode(pdev,
 8002046:	2227      	movs	r2, #39	; 0x27
 8002048:	e09c      	b.n	8002184 <SCSI_ProcessCmd+0x214>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800204a:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 800204e:	f8d6 3414 	ldr.w	r3, [r6, #1044]	; 0x414
 8002052:	2b00      	cmp	r3, #0
 8002054:	d19d      	bne.n	8001f92 <SCSI_ProcessCmd+0x22>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8002056:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800205a:	4608      	mov	r0, r1
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	4798      	blx	r3
 8002060:	4604      	mov	r4, r0
 8002062:	b148      	cbz	r0, 8002078 <SCSI_ProcessCmd+0x108>
    SCSI_SenseCode(pdev,
 8002064:	223a      	movs	r2, #58	; 0x3a
 8002066:	2102      	movs	r1, #2
 8002068:	4628      	mov	r0, r5
 800206a:	f7ff ff6d 	bl	8001f48 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800206e:	2305      	movs	r3, #5
 8002070:	7233      	strb	r3, [r6, #8]
    return -1;
 8002072:	f04f 34ff 	mov.w	r4, #4294967295
 8002076:	e000      	b.n	800207a <SCSI_ProcessCmd+0x10a>
  hmsc->bot_data_length = 0;
 8002078:	8170      	strh	r0, [r6, #10]
}
 800207a:	4620      	mov	r0, r4
 800207c:	b003      	add	sp, #12
 800207e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002082:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8002086:	2000      	movs	r0, #0
 8002088:	f103 020c 	add.w	r2, r3, #12
 800208c:	f103 011e 	add.w	r1, r3, #30
 8002090:	f802 0b01 	strb.w	r0, [r2], #1
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8002094:	428a      	cmp	r2, r1
 8002096:	d1fb      	bne.n	8002090 <SCSI_ProcessCmd+0x120>
  hmsc->bot_data[0]	= 0x70;		
 8002098:	2270      	movs	r2, #112	; 0x70
 800209a:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 800209c:	220c      	movs	r2, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800209e:	f893 145d 	ldrb.w	r1, [r3, #1117]	; 0x45d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 80020a2:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80020a4:	f893 245c 	ldrb.w	r2, [r3, #1116]	; 0x45c
 80020a8:	4291      	cmp	r1, r2
 80020aa:	d012      	beq.n	80020d2 <SCSI_ProcessCmd+0x162>
 80020ac:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 80020b0:	f891 443c 	ldrb.w	r4, [r1, #1084]	; 0x43c
    hmsc->scsi_sense_head++;
 80020b4:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 80020b6:	739c      	strb	r4, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 80020b8:	f891 4441 	ldrb.w	r4, [r1, #1089]	; 0x441
    hmsc->scsi_sense_head++;
 80020bc:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 80020be:	761c      	strb	r4, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 80020c0:	f891 1440 	ldrb.w	r1, [r1, #1088]	; 0x440
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80020c4:	2a04      	cmp	r2, #4
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 80020c6:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
 80020c8:	bf14      	ite	ne
 80020ca:	f883 245c 	strbne.w	r2, [r3, #1116]	; 0x45c
      hmsc->scsi_sense_head = 0;
 80020ce:	f883 045c 	strbeq.w	r0, [r3, #1116]	; 0x45c
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 80020d2:	2212      	movs	r2, #18
 80020d4:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80020d6:	793a      	ldrb	r2, [r7, #4]
 80020d8:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 80020da:	bf98      	it	ls
 80020dc:	815a      	strhls	r2, [r3, #10]
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 80020de:	2400      	movs	r4, #0
 80020e0:	e7cb      	b.n	800207a <SCSI_ProcessCmd+0x10a>
  if (params[1] & 0x01)/*Evpd is set*/
 80020e2:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80020e4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  if (params[1] & 0x01)/*Evpd is set*/
 80020e8:	07db      	lsls	r3, r3, #31
 80020ea:	d414      	bmi.n	8002116 <SCSI_ProcessCmd+0x1a6>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80020ec:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80020f0:	69d9      	ldr	r1, [r3, #28]
 80020f2:	2324      	movs	r3, #36	; 0x24
 80020f4:	fb03 1404 	mla	r4, r3, r4, r1
    len = pPage[4] + 5;
 80020f8:	7923      	ldrb	r3, [r4, #4]
 80020fa:	7939      	ldrb	r1, [r7, #4]
 80020fc:	3305      	adds	r3, #5
 80020fe:	428b      	cmp	r3, r1
 8002100:	bf28      	it	cs
 8002102:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 8002104:	8153      	strh	r3, [r2, #10]
  while (len) 
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0e9      	beq.n	80020de <SCSI_ProcessCmd+0x16e>
    len--;
 800210a:	3b01      	subs	r3, #1
 800210c:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 800210e:	5ce0      	ldrb	r0, [r4, r3]
 8002110:	18d1      	adds	r1, r2, r3
 8002112:	7308      	strb	r0, [r1, #12]
 8002114:	e7f7      	b.n	8002106 <SCSI_ProcessCmd+0x196>
    len = LENGTH_INQUIRY_PAGE00;
 8002116:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8002118:	4ca9      	ldr	r4, [pc, #676]	; (80023c0 <SCSI_ProcessCmd+0x450>)
 800211a:	e7f3      	b.n	8002104 <SCSI_ProcessCmd+0x194>
  hmsc->bot_data_length = len;
 800211c:	2208      	movs	r2, #8
 800211e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002122:	49a8      	ldr	r1, [pc, #672]	; (80023c4 <SCSI_ProcessCmd+0x454>)
 8002124:	815a      	strh	r2, [r3, #10]
 8002126:	f103 0213 	add.w	r2, r3, #19
 800212a:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800212c:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8002130:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8002134:	4293      	cmp	r3, r2
 8002136:	d1f9      	bne.n	800212c <SCSI_ProcessCmd+0x1bc>
 8002138:	e7d1      	b.n	80020de <SCSI_ProcessCmd+0x16e>
  hmsc->bot_data_length = len;
 800213a:	2208      	movs	r2, #8
 800213c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002140:	49a1      	ldr	r1, [pc, #644]	; (80023c8 <SCSI_ProcessCmd+0x458>)
 8002142:	815a      	strh	r2, [r3, #10]
 8002144:	f103 0213 	add.w	r2, r3, #19
 8002148:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800214a:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 800214e:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8002152:	429a      	cmp	r2, r3
 8002154:	d1f9      	bne.n	800214a <SCSI_ProcessCmd+0x1da>
 8002156:	e7c2      	b.n	80020de <SCSI_ProcessCmd+0x16e>
    hmsc->bot_data[i] = 0;
 8002158:	2100      	movs	r1, #0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800215a:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 800215e:	f106 030c 	add.w	r3, r6, #12
 8002162:	f106 0218 	add.w	r2, r6, #24
    hmsc->bot_data[i] = 0;
 8002166:	f803 1b01 	strb.w	r1, [r3], #1
  for(i=0 ; i < 12 ; i++) 
 800216a:	429a      	cmp	r2, r3
 800216c:	d1fb      	bne.n	8002166 <SCSI_ProcessCmd+0x1f6>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 800216e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002172:	4620      	mov	r0, r4
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f10d 0202 	add.w	r2, sp, #2
 800217a:	a901      	add	r1, sp, #4
 800217c:	4798      	blx	r3
 800217e:	4604      	mov	r4, r0
 8002180:	b118      	cbz	r0, 800218a <SCSI_ProcessCmd+0x21a>
    SCSI_SenseCode(pdev,
 8002182:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 8002184:	2102      	movs	r1, #2
    SCSI_SenseCode(pdev, 
 8002186:	4628      	mov	r0, r5
 8002188:	e0da      	b.n	8002340 <SCSI_ProcessCmd+0x3d0>
    hmsc->bot_data[3] = 0x08;
 800218a:	2308      	movs	r3, #8
 800218c:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 800218e:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8002190:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8002192:	3b01      	subs	r3, #1
 8002194:	0e1a      	lsrs	r2, r3, #24
 8002196:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8002198:	0c1a      	lsrs	r2, r3, #16
 800219a:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 800219c:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800219e:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02;
 80021a0:	2302      	movs	r3, #2
 80021a2:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80021a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 80021a8:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80021aa:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80021ac:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data_length = 12;
 80021ae:	230c      	movs	r3, #12
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80021b0:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 8;
 80021b2:	8173      	strh	r3, [r6, #10]
 80021b4:	e761      	b.n	800207a <SCSI_ProcessCmd+0x10a>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80021b6:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 80021ba:	7a33      	ldrb	r3, [r6, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 80dc 	bne.w	800237a <SCSI_ProcessCmd+0x40a>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 80021c2:	f996 3418 	ldrsb.w	r3, [r6, #1048]	; 0x418
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f6bf aee3 	bge.w	8001f92 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80021cc:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80021d0:	4608      	mov	r0, r1
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4798      	blx	r3
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d1d3      	bne.n	8002182 <SCSI_ProcessCmd+0x212>
      (params[3] << 16) | \
 80021da:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80021dc:	78ba      	ldrb	r2, [r7, #2]
      (params[3] << 16) | \
 80021de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80021e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          params[5];
 80021e4:	797a      	ldrb	r2, [r7, #5]
        (params[4] <<  8) | \
 80021e6:	4313      	orrs	r3, r2
 80021e8:	793a      	ldrb	r2, [r7, #4]
 80021ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80021ee:	f8c6 3464 	str.w	r3, [r6, #1124]	; 0x464
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80021f2:	79fa      	ldrb	r2, [r7, #7]
      params[8];  
 80021f4:	7a39      	ldrb	r1, [r7, #8]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80021f6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80021fa:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 80021fe:	1858      	adds	r0, r3, r1
 8002200:	f8d2 2460 	ldr.w	r2, [r2, #1120]	; 0x460
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8002204:	f8c6 1468 	str.w	r1, [r6, #1128]	; 0x468
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002208:	4290      	cmp	r0, r2
 800220a:	f240 80a7 	bls.w	800235c <SCSI_ProcessCmd+0x3ec>
    SCSI_SenseCode(pdev,
 800220e:	2221      	movs	r2, #33	; 0x21
    SCSI_SenseCode(pdev, 
 8002210:	2105      	movs	r1, #5
 8002212:	e7b8      	b.n	8002186 <SCSI_ProcessCmd+0x216>
  USBD_LL_Transmit (pdev, 
 8002214:	b2bb      	uxth	r3, r7
 8002216:	4642      	mov	r2, r8
 8002218:	2181      	movs	r1, #129	; 0x81
 800221a:	4628      	mov	r0, r5
 800221c:	f000 ffce 	bl	80031bc <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 8002220:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
  hmsc->scsi_blk_len    -= len;  
 8002224:	f8d6 4468 	ldr.w	r4, [r6, #1128]	; 0x468
  hmsc->scsi_blk_addr   += len; 
 8002228:	443b      	add	r3, r7
 800222a:	f8c6 3464 	str.w	r3, [r6, #1124]	; 0x464
  hmsc->csw.dDataResidue -= len;
 800222e:	f8d6 3434 	ldr.w	r3, [r6, #1076]	; 0x434
  hmsc->scsi_blk_len    -= len;  
 8002232:	1be4      	subs	r4, r4, r7
  hmsc->csw.dDataResidue -= len;
 8002234:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len    -= len;  
 8002236:	f8c6 4468 	str.w	r4, [r6, #1128]	; 0x468
  hmsc->csw.dDataResidue -= len;
 800223a:	f8c6 7434 	str.w	r7, [r6, #1076]	; 0x434
  if (hmsc->scsi_blk_len == 0)
 800223e:	2c00      	cmp	r4, #0
 8002240:	f47f af4d 	bne.w	80020de <SCSI_ProcessCmd+0x16e>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8002244:	2303      	movs	r3, #3
 8002246:	7233      	strb	r3, [r6, #8]
 8002248:	e717      	b.n	800207a <SCSI_ProcessCmd+0x10a>
      (params[3] << 16) | \
 800224a:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800224c:	78bb      	ldrb	r3, [r7, #2]
      (params[3] << 16) | \
 800224e:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8002250:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
          params[5];
 8002254:	797b      	ldrb	r3, [r7, #5]
        (params[4] <<  8) | \
 8002256:	431a      	orrs	r2, r3
 8002258:	793b      	ldrb	r3, [r7, #4]
 800225a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800225e:	f8c6 2464 	str.w	r2, [r6, #1124]	; 0x464
      params[8];  
 8002262:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8002264:	79f9      	ldrb	r1, [r7, #7]
 8002266:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800226a:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 800226e:	1850      	adds	r0, r2, r1
 8002270:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8002274:	f8c6 1468 	str.w	r1, [r6, #1128]	; 0x468
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002278:	4298      	cmp	r0, r3
 800227a:	d8c8      	bhi.n	800220e <SCSI_ProcessCmd+0x29e>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 800227c:	f8b6 345e 	ldrh.w	r3, [r6, #1118]	; 0x45e
 8002280:	435a      	muls	r2, r3
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8002282:	434b      	muls	r3, r1
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8002284:	f8c6 2464 	str.w	r2, [r6, #1124]	; 0x464
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8002288:	f8d6 2414 	ldr.w	r2, [r6, #1044]	; 0x414
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800228c:	f8c6 3468 	str.w	r3, [r6, #1128]	; 0x468
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8002290:	4293      	cmp	r3, r2
 8002292:	f47f ae7e 	bne.w	8001f92 <SCSI_ProcessCmd+0x22>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 800229a:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 800229e:	bf28      	it	cs
 80022a0:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80022a4:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f106 020c 	add.w	r2, r6, #12
 80022ac:	4628      	mov	r0, r5
 80022ae:	f000 ff93 	bl	80031d8 <USBD_LL_PrepareReceive>
 80022b2:	e6e2      	b.n	800207a <SCSI_ProcessCmd+0x10a>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80022b4:	f8d6 7468 	ldr.w	r7, [r6, #1128]	; 0x468
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80022b8:	f8b6 245e 	ldrh.w	r2, [r6, #1118]	; 0x45e
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80022bc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80022c0:	bf28      	it	cs
 80022c2:	f44f 6780 	movcs.w	r7, #1024	; 0x400
                              len / hmsc->scsi_blk_size) < 0)
 80022c6:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80022ca:	f8d6 1464 	ldr.w	r1, [r6, #1124]	; 0x464
 80022ce:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
                              hmsc->bot_data, 
 80022d2:	f106 080c 	add.w	r8, r6, #12
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80022d6:	f8d0 9014 	ldr.w	r9, [r0, #20]
 80022da:	fbb1 f2f2 	udiv	r2, r1, r2
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4641      	mov	r1, r8
 80022e2:	4620      	mov	r0, r4
 80022e4:	47c8      	blx	r9
 80022e6:	2800      	cmp	r0, #0
 80022e8:	da01      	bge.n	80022ee <SCSI_ProcessCmd+0x37e>
    SCSI_SenseCode(pdev,
 80022ea:	2203      	movs	r2, #3
 80022ec:	e065      	b.n	80023ba <SCSI_ProcessCmd+0x44a>
  hmsc->scsi_blk_addr  += len; 
 80022ee:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
  hmsc->csw.dDataResidue -= len;
 80022f2:	f8d6 2434 	ldr.w	r2, [r6, #1076]	; 0x434
  hmsc->scsi_blk_addr  += len; 
 80022f6:	443b      	add	r3, r7
 80022f8:	f8c6 3464 	str.w	r3, [r6, #1124]	; 0x464
  hmsc->scsi_blk_len   -= len; 
 80022fc:	f8d6 3468 	ldr.w	r3, [r6, #1128]	; 0x468
 8002300:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 8002302:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len   -= len; 
 8002304:	f8c6 3468 	str.w	r3, [r6, #1128]	; 0x468
  hmsc->csw.dDataResidue -= len;
 8002308:	f8c6 7434 	str.w	r7, [r6, #1076]	; 0x434
  if (hmsc->scsi_blk_len == 0)
 800230c:	b923      	cbnz	r3, 8002318 <SCSI_ProcessCmd+0x3a8>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800230e:	2100      	movs	r1, #0
 8002310:	4628      	mov	r0, r5
 8002312:	f7ff fd61 	bl	8001dd8 <MSC_BOT_SendCSW>
 8002316:	e6e2      	b.n	80020de <SCSI_ProcessCmd+0x16e>
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	bf28      	it	cs
 800231e:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    USBD_LL_PrepareReceive (pdev,
 8002322:	4642      	mov	r2, r8
 8002324:	b29b      	uxth	r3, r3
 8002326:	2101      	movs	r1, #1
 8002328:	4628      	mov	r0, r5
 800232a:	f000 ff55 	bl	80031d8 <USBD_LL_PrepareReceive>
 800232e:	e6d6      	b.n	80020de <SCSI_ProcessCmd+0x16e>
  if ((params[1]& 0x02) == 0x02) 
 8002330:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8002332:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8002336:	f014 0402 	ands.w	r4, r4, #2
 800233a:	d004      	beq.n	8002346 <SCSI_ProcessCmd+0x3d6>
    SCSI_SenseCode (pdev,
 800233c:	2224      	movs	r2, #36	; 0x24
 800233e:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 8002340:	f7ff fe02 	bl	8001f48 <SCSI_SenseCode.constprop.8>
 8002344:	e695      	b.n	8002072 <SCSI_ProcessCmd+0x102>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002346:	f8d3 1464 	ldr.w	r1, [r3, #1124]	; 0x464
 800234a:	f8b3 2468 	ldrh.w	r2, [r3, #1128]	; 0x468
 800234e:	440a      	add	r2, r1
 8002350:	f8d3 1460 	ldr.w	r1, [r3, #1120]	; 0x460
 8002354:	428a      	cmp	r2, r1
 8002356:	f67f ae26 	bls.w	8001fa6 <SCSI_ProcessCmd+0x36>
 800235a:	e758      	b.n	800220e <SCSI_ProcessCmd+0x29e>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800235c:	2202      	movs	r2, #2
 800235e:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8002360:	f8b6 245e 	ldrh.w	r2, [r6, #1118]	; 0x45e
 8002364:	4353      	muls	r3, r2
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8002366:	434a      	muls	r2, r1
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8002368:	f8c6 3464 	str.w	r3, [r6, #1124]	; 0x464
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800236c:	f8d6 3414 	ldr.w	r3, [r6, #1044]	; 0x414
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8002370:	f8c6 2468 	str.w	r2, [r6, #1128]	; 0x468
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8002374:	429a      	cmp	r2, r3
 8002376:	f47f ae0c 	bne.w	8001f92 <SCSI_ProcessCmd+0x22>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 800237a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237e:	8173      	strh	r3, [r6, #10]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8002380:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8002384:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8002388:	f8d6 7468 	ldr.w	r7, [r6, #1128]	; 0x468
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800238c:	f8b6 245e 	ldrh.w	r2, [r6, #1118]	; 0x45e
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8002390:	429f      	cmp	r7, r3
 8002392:	bf28      	it	cs
 8002394:	461f      	movcs	r7, r3
                              len / hmsc->scsi_blk_size) < 0)
 8002396:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800239a:	f8d6 1464 	ldr.w	r1, [r6, #1124]	; 0x464
                              hmsc->bot_data, 
 800239e:	f106 080c 	add.w	r8, r6, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80023a2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80023a6:	fbb1 f2f2 	udiv	r2, r1, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4641      	mov	r1, r8
 80023ae:	4620      	mov	r0, r4
 80023b0:	47c8      	blx	r9
 80023b2:	2800      	cmp	r0, #0
 80023b4:	f6bf af2e 	bge.w	8002214 <SCSI_ProcessCmd+0x2a4>
    SCSI_SenseCode(pdev,
 80023b8:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 80023ba:	2104      	movs	r1, #4
 80023bc:	e6e3      	b.n	8002186 <SCSI_ProcessCmd+0x216>
 80023be:	bf00      	nop
 80023c0:	08003f64 	.word	0x08003f64
 80023c4:	08003f64 	.word	0x08003f64
 80023c8:	08003f5c 	.word	0x08003f5c

080023cc <SCSI_SenseCode>:
{
 80023cc:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80023ce:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80023d2:	021b      	lsls	r3, r3, #8
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80023d4:	f890 145d 	ldrb.w	r1, [r0, #1117]	; 0x45d
 80023d8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 80023dc:	3101      	adds	r1, #1
 80023de:	b2c9      	uxtb	r1, r1
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80023e0:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80023e2:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    hmsc->scsi_sense_tail = 0;
 80023e6:	bf08      	it	eq
 80023e8:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80023ea:	f884 243c 	strb.w	r2, [r4, #1084]	; 0x43c
  hmsc->scsi_sense_tail++;
 80023ee:	bf14      	ite	ne
 80023f0:	f880 145d 	strbne.w	r1, [r0, #1117]	; 0x45d
    hmsc->scsi_sense_tail = 0;
 80023f4:	f880 345d 	strbeq.w	r3, [r0, #1117]	; 0x45d
 80023f8:	bd10      	pop	{r4, pc}

080023fa <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80023fa:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80023fc:	b180      	cbz	r0, 8002420 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80023fe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002402:	b113      	cbz	r3, 800240a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800240a:	b109      	cbz	r1, 8002410 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800240c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002410:	2301      	movs	r3, #1
  pdev->id = id;
 8002412:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002414:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002418:	f000 fe24 	bl	8003064 <USBD_LL_Init>
  
  return USBD_OK; 
 800241c:	2000      	movs	r0, #0
 800241e:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002420:	2002      	movs	r0, #2
}
 8002422:	bd08      	pop	{r3, pc}

08002424 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002424:	b119      	cbz	r1, 800242e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002426:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800242a:	2000      	movs	r0, #0
 800242c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800242e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002430:	4770      	bx	lr

08002432 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002432:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002434:	f000 fe4e 	bl	80030d4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002438:	2000      	movs	r0, #0
 800243a:	bd08      	pop	{r3, pc}

0800243c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800243c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800243e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002442:	b90b      	cbnz	r3, 8002448 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002444:	2002      	movs	r0, #2
 8002446:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4798      	blx	r3
 800244c:	2800      	cmp	r0, #0
 800244e:	d1f9      	bne.n	8002444 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002450:	bd08      	pop	{r3, pc}

08002452 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002452:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002454:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4798      	blx	r3
  return USBD_OK;
}
 800245c:	2000      	movs	r0, #0
 800245e:	bd08      	pop	{r3, pc}

08002460 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002460:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002462:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002466:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002468:	4628      	mov	r0, r5
 800246a:	f000 fa64 	bl	8002936 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800246e:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002470:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002474:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002478:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800247c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002480:	f001 031f 	and.w	r3, r1, #31
 8002484:	2b01      	cmp	r3, #1
 8002486:	d00e      	beq.n	80024a6 <USBD_LL_SetupStage+0x46>
 8002488:	d307      	bcc.n	800249a <USBD_LL_SetupStage+0x3a>
 800248a:	2b02      	cmp	r3, #2
 800248c:	d010      	beq.n	80024b0 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800248e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002492:	4620      	mov	r0, r4
 8002494:	f000 fe58 	bl	8003148 <USBD_LL_StallEP>
    break;
 8002498:	e003      	b.n	80024a2 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800249a:	4629      	mov	r1, r5
 800249c:	4620      	mov	r0, r4
 800249e:	f000 f8d5 	bl	800264c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80024a2:	2000      	movs	r0, #0
 80024a4:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80024a6:	4629      	mov	r1, r5
 80024a8:	4620      	mov	r0, r4
 80024aa:	f000 f9c9 	bl	8002840 <USBD_StdItfReq>
    break;
 80024ae:	e7f8      	b.n	80024a2 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80024b0:	4629      	mov	r1, r5
 80024b2:	4620      	mov	r0, r4
 80024b4:	f000 f9dc 	bl	8002870 <USBD_StdEPReq>
    break;
 80024b8:	e7f3      	b.n	80024a2 <USBD_LL_SetupStage+0x42>

080024ba <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80024ba:	b538      	push	{r3, r4, r5, lr}
 80024bc:	4604      	mov	r4, r0
 80024be:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80024c0:	bb11      	cbnz	r1, 8002508 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80024c2:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d10f      	bne.n	80024ea <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80024ca:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80024ce:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d90b      	bls.n	80024ee <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80024d6:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80024d8:	429a      	cmp	r2, r3
 80024da:	bf28      	it	cs
 80024dc:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80024de:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80024e2:	b292      	uxth	r2, r2
 80024e4:	4629      	mov	r1, r5
 80024e6:	f000 fa76 	bl	80029d6 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80024ea:	2000      	movs	r0, #0
 80024ec:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80024ee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	b123      	cbz	r3, 8002500 <USBD_LL_DataOutStage+0x46>
 80024f6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024fa:	2a03      	cmp	r2, #3
 80024fc:	d100      	bne.n	8002500 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80024fe:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002500:	4620      	mov	r0, r4
 8002502:	f000 fa70 	bl	80029e6 <USBD_CtlSendStatus>
 8002506:	e7f0      	b.n	80024ea <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002508:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0eb      	beq.n	80024ea <USBD_LL_DataOutStage+0x30>
 8002512:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002516:	2a03      	cmp	r2, #3
 8002518:	d1e7      	bne.n	80024ea <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800251a:	4798      	blx	r3
 800251c:	e7e5      	b.n	80024ea <USBD_LL_DataOutStage+0x30>

0800251e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800251e:	b570      	push	{r4, r5, r6, lr}
 8002520:	4613      	mov	r3, r2
 8002522:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002524:	460e      	mov	r6, r1
 8002526:	2900      	cmp	r1, #0
 8002528:	d13d      	bne.n	80025a6 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800252a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800252e:	2a02      	cmp	r2, #2
 8002530:	d10f      	bne.n	8002552 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002532:	69c5      	ldr	r5, [r0, #28]
 8002534:	6a02      	ldr	r2, [r0, #32]
 8002536:	4295      	cmp	r5, r2
 8002538:	d914      	bls.n	8002564 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800253a:	1aaa      	subs	r2, r5, r2
 800253c:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800253e:	4619      	mov	r1, r3
 8002540:	b292      	uxth	r2, r2
 8002542:	f000 fa40 	bl	80029c6 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002546:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002548:	461a      	mov	r2, r3
 800254a:	4619      	mov	r1, r3
 800254c:	4620      	mov	r0, r4
 800254e:	f000 fe43 	bl	80031d8 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002552:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002560:	2000      	movs	r0, #0
 8002562:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002564:	6983      	ldr	r3, [r0, #24]
 8002566:	fbb3 f5f2 	udiv	r5, r3, r2
 800256a:	fb02 3515 	mls	r5, r2, r5, r3
 800256e:	b965      	cbnz	r5, 800258a <USBD_LL_DataInStage+0x6c>
 8002570:	429a      	cmp	r2, r3
 8002572:	d80a      	bhi.n	800258a <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002574:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002578:	4293      	cmp	r3, r2
 800257a:	d206      	bcs.n	800258a <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800257c:	462a      	mov	r2, r5
 800257e:	f000 fa22 	bl	80029c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002582:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002586:	462b      	mov	r3, r5
 8002588:	e7de      	b.n	8002548 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800258a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	b12b      	cbz	r3, 800259e <USBD_LL_DataInStage+0x80>
 8002592:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002596:	2a03      	cmp	r2, #3
 8002598:	d101      	bne.n	800259e <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 800259a:	4620      	mov	r0, r4
 800259c:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800259e:	4620      	mov	r0, r4
 80025a0:	f000 fa2c 	bl	80029fc <USBD_CtlReceiveStatus>
 80025a4:	e7d5      	b.n	8002552 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80025a6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0d7      	beq.n	8002560 <USBD_LL_DataInStage+0x42>
 80025b0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80025b4:	2a03      	cmp	r2, #3
 80025b6:	d1d3      	bne.n	8002560 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80025b8:	4798      	blx	r3
 80025ba:	e7d1      	b.n	8002560 <USBD_LL_DataInStage+0x42>

080025bc <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80025bc:	2200      	movs	r2, #0
{
 80025be:	b538      	push	{r3, r4, r5, lr}
 80025c0:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80025c2:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80025c4:	4611      	mov	r1, r2
 80025c6:	2340      	movs	r3, #64	; 0x40
 80025c8:	f000 fd92 	bl	80030f0 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80025cc:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80025ce:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80025d2:	2200      	movs	r2, #0
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	4620      	mov	r0, r4
 80025d8:	f000 fd8a 	bl	80030f0 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80025dc:	2301      	movs	r3, #1
 80025de:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80025e2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80025e6:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80025e8:	b12b      	cbz	r3, 80025f6 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80025ea:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80025ee:	7921      	ldrb	r1, [r4, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4620      	mov	r0, r4
 80025f4:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80025f6:	2000      	movs	r0, #0
 80025f8:	bd38      	pop	{r3, r4, r5, pc}

080025fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80025fa:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80025fc:	2000      	movs	r0, #0
 80025fe:	4770      	bx	lr

08002600 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002600:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002604:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002608:	2304      	movs	r3, #4
 800260a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800260e:	2000      	movs	r0, #0
 8002610:	4770      	bx	lr

08002612 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002612:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002616:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800261a:	2000      	movs	r0, #0
 800261c:	4770      	bx	lr

0800261e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800261e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002620:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002624:	2a03      	cmp	r2, #3
 8002626:	d104      	bne.n	8002632 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002628:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	b103      	cbz	r3, 8002632 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002630:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002632:	2000      	movs	r0, #0
 8002634:	bd08      	pop	{r3, pc}

08002636 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002636:	b510      	push	{r4, lr}
 8002638:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	f000 fd84 	bl	8003148 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002640:	4620      	mov	r0, r4
}
 8002642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002646:	2100      	movs	r1, #0
 8002648:	f000 bd7e 	b.w	8003148 <USBD_LL_StallEP>

0800264c <USBD_StdDevReq>:
{
 800264c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800264e:	784b      	ldrb	r3, [r1, #1]
{
 8002650:	4604      	mov	r4, r0
 8002652:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002654:	2b09      	cmp	r3, #9
 8002656:	d879      	bhi.n	800274c <USBD_StdDevReq+0x100>
 8002658:	e8df f013 	tbh	[pc, r3, lsl #1]
 800265c:	00e500c9 	.word	0x00e500c9
 8002660:	00d90078 	.word	0x00d90078
 8002664:	006d0078 	.word	0x006d0078
 8002668:	0078000a 	.word	0x0078000a
 800266c:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002670:	884b      	ldrh	r3, [r1, #2]
 8002672:	0a1a      	lsrs	r2, r3, #8
 8002674:	3a01      	subs	r2, #1
 8002676:	2a06      	cmp	r2, #6
 8002678:	d868      	bhi.n	800274c <USBD_StdDevReq+0x100>
 800267a:	e8df f002 	tbb	[pc, r2]
 800267e:	1c04      	.short	0x1c04
 8002680:	49676729 	.word	0x49676729
 8002684:	52          	.byte	0x52
 8002685:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002686:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800268a:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800268c:	f10d 0106 	add.w	r1, sp, #6
 8002690:	7c20      	ldrb	r0, [r4, #16]
 8002692:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002694:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002698:	2a00      	cmp	r2, #0
 800269a:	d067      	beq.n	800276c <USBD_StdDevReq+0x120>
 800269c:	88eb      	ldrh	r3, [r5, #6]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d064      	beq.n	800276c <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80026a2:	429a      	cmp	r2, r3
 80026a4:	bf28      	it	cs
 80026a6:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 80026a8:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 80026aa:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80026ae:	4620      	mov	r0, r4
 80026b0:	f000 f97c 	bl	80029ac <USBD_CtlSendData>
 80026b4:	e05a      	b.n	800276c <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80026b6:	7c02      	ldrb	r2, [r0, #16]
 80026b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026bc:	b932      	cbnz	r2, 80026cc <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80026c0:	f10d 0006 	add.w	r0, sp, #6
 80026c4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80026c6:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80026c8:	7043      	strb	r3, [r0, #1]
 80026ca:	e7e3      	b.n	8002694 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	e7f7      	b.n	80026c0 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d83a      	bhi.n	800274c <USBD_StdDevReq+0x100>
 80026d6:	e8df f003 	tbb	[pc, r3]
 80026da:	0703      	.short	0x0703
 80026dc:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80026e0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	e7d1      	b.n	800268c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80026e8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	e7cd      	b.n	800268c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80026f0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	e7c9      	b.n	800268c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80026f8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	e7c5      	b.n	800268c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002700:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	e7c1      	b.n	800268c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002708:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	e7bd      	b.n	800268c <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002710:	7c03      	ldrb	r3, [r0, #16]
 8002712:	b9db      	cbnz	r3, 800274c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002714:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002718:	f10d 0006 	add.w	r0, sp, #6
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	4798      	blx	r3
 8002720:	e7b8      	b.n	8002694 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002722:	7c03      	ldrb	r3, [r0, #16]
 8002724:	b993      	cbnz	r3, 800274c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002726:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800272a:	f10d 0006 	add.w	r0, sp, #6
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002732:	2307      	movs	r3, #7
 8002734:	e7c8      	b.n	80026c8 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002736:	888b      	ldrh	r3, [r1, #4]
 8002738:	b943      	cbnz	r3, 800274c <USBD_StdDevReq+0x100>
 800273a:	88cb      	ldrh	r3, [r1, #6]
 800273c:	b933      	cbnz	r3, 800274c <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800273e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002742:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002744:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002746:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800274a:	d103      	bne.n	8002754 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 800274c:	4620      	mov	r0, r4
 800274e:	f7ff ff72 	bl	8002636 <USBD_CtlError.constprop.0>
    break;
 8002752:	e00b      	b.n	800276c <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002754:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002758:	4629      	mov	r1, r5
 800275a:	f000 fd21 	bl	80031a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800275e:	4620      	mov	r0, r4
 8002760:	f000 f941 	bl	80029e6 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002764:	b12d      	cbz	r5, 8002772 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002766:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002768:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800276c:	2000      	movs	r0, #0
 800276e:	b003      	add	sp, #12
 8002770:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002772:	2301      	movs	r3, #1
 8002774:	e7f8      	b.n	8002768 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002776:	7889      	ldrb	r1, [r1, #2]
 8002778:	4d30      	ldr	r5, [pc, #192]	; (800283c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800277a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800277c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800277e:	d8e5      	bhi.n	800274c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002780:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002784:	2b02      	cmp	r3, #2
 8002786:	d00c      	beq.n	80027a2 <USBD_StdDevReq+0x156>
 8002788:	2b03      	cmp	r3, #3
 800278a:	d1df      	bne.n	800274c <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 800278c:	b9b1      	cbnz	r1, 80027bc <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800278e:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8002790:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002792:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002796:	f7ff fe5c 	bl	8002452 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800279a:	4620      	mov	r0, r4
 800279c:	f000 f923 	bl	80029e6 <USBD_CtlSendStatus>
 80027a0:	e7e4      	b.n	800276c <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80027a2:	2900      	cmp	r1, #0
 80027a4:	d0f9      	beq.n	800279a <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80027a6:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80027a8:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80027aa:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80027ac:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80027b0:	4620      	mov	r0, r4
 80027b2:	f7ff fe43 	bl	800243c <USBD_SetClassConfig>
 80027b6:	2802      	cmp	r0, #2
 80027b8:	d1ef      	bne.n	800279a <USBD_StdDevReq+0x14e>
 80027ba:	e7c7      	b.n	800274c <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80027bc:	6841      	ldr	r1, [r0, #4]
 80027be:	2901      	cmp	r1, #1
 80027c0:	d0eb      	beq.n	800279a <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80027c2:	b2c9      	uxtb	r1, r1
 80027c4:	f7ff fe45 	bl	8002452 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80027c8:	7829      	ldrb	r1, [r5, #0]
 80027ca:	6061      	str	r1, [r4, #4]
 80027cc:	e7f0      	b.n	80027b0 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80027ce:	88ca      	ldrh	r2, [r1, #6]
 80027d0:	2a01      	cmp	r2, #1
 80027d2:	d1bb      	bne.n	800274c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80027d4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d003      	beq.n	80027e4 <USBD_StdDevReq+0x198>
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d1b5      	bne.n	800274c <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80027e0:	1d01      	adds	r1, r0, #4
 80027e2:	e764      	b.n	80026ae <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80027e4:	4601      	mov	r1, r0
 80027e6:	2300      	movs	r3, #0
 80027e8:	f841 3f08 	str.w	r3, [r1, #8]!
 80027ec:	e75f      	b.n	80026ae <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80027ee:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80027f2:	3b02      	subs	r3, #2
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d8a9      	bhi.n	800274c <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80027f8:	2301      	movs	r3, #1
 80027fa:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80027fc:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002800:	b10b      	cbz	r3, 8002806 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002802:	2303      	movs	r3, #3
 8002804:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002806:	2202      	movs	r2, #2
 8002808:	f104 010c 	add.w	r1, r4, #12
 800280c:	e74f      	b.n	80026ae <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800280e:	884b      	ldrh	r3, [r1, #2]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d1ab      	bne.n	800276c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002814:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002818:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800281c:	4629      	mov	r1, r5
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4620      	mov	r0, r4
 8002822:	4798      	blx	r3
 8002824:	e7b9      	b.n	800279a <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002826:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800282a:	3b02      	subs	r3, #2
 800282c:	2b01      	cmp	r3, #1
 800282e:	d88d      	bhi.n	800274c <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002830:	884b      	ldrh	r3, [r1, #2]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d19a      	bne.n	800276c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002836:	2300      	movs	r3, #0
 8002838:	e7ec      	b.n	8002814 <USBD_StdDevReq+0x1c8>
 800283a:	bf00      	nop
 800283c:	2000013c 	.word	0x2000013c

08002840 <USBD_StdItfReq>:
{
 8002840:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002842:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002846:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002848:	2b03      	cmp	r3, #3
{
 800284a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800284c:	d10d      	bne.n	800286a <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800284e:	790b      	ldrb	r3, [r1, #4]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d80a      	bhi.n	800286a <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002854:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800285c:	88eb      	ldrh	r3, [r5, #6]
 800285e:	b913      	cbnz	r3, 8002866 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002860:	4620      	mov	r0, r4
 8002862:	f000 f8c0 	bl	80029e6 <USBD_CtlSendStatus>
}
 8002866:	2000      	movs	r0, #0
 8002868:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800286a:	f7ff fee4 	bl	8002636 <USBD_CtlError.constprop.0>
    break;
 800286e:	e7fa      	b.n	8002866 <USBD_StdItfReq+0x26>

08002870 <USBD_StdEPReq>:
{
 8002870:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002872:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002874:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002876:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800287a:	2a20      	cmp	r2, #32
{
 800287c:	4604      	mov	r4, r0
 800287e:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002880:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002882:	d105      	bne.n	8002890 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002884:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	4798      	blx	r3
}
 800288c:	2000      	movs	r0, #0
 800288e:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002890:	784a      	ldrb	r2, [r1, #1]
 8002892:	2a01      	cmp	r2, #1
 8002894:	d01c      	beq.n	80028d0 <USBD_StdEPReq+0x60>
 8002896:	d32a      	bcc.n	80028ee <USBD_StdEPReq+0x7e>
 8002898:	2a03      	cmp	r2, #3
 800289a:	d1f7      	bne.n	800288c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800289c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80028a0:	2a02      	cmp	r2, #2
 80028a2:	d040      	beq.n	8002926 <USBD_StdEPReq+0xb6>
 80028a4:	2a03      	cmp	r2, #3
 80028a6:	d002      	beq.n	80028ae <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80028a8:	f7ff fec5 	bl	8002636 <USBD_CtlError.constprop.0>
      break;
 80028ac:	e7ee      	b.n	800288c <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80028ae:	884a      	ldrh	r2, [r1, #2]
 80028b0:	b922      	cbnz	r2, 80028bc <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80028b2:	065e      	lsls	r6, r3, #25
 80028b4:	d002      	beq.n	80028bc <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80028b6:	4619      	mov	r1, r3
 80028b8:	f000 fc46 	bl	8003148 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80028bc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80028c0:	4629      	mov	r1, r5
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4620      	mov	r0, r4
 80028c6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80028c8:	4620      	mov	r0, r4
 80028ca:	f000 f88c 	bl	80029e6 <USBD_CtlSendStatus>
 80028ce:	e7dd      	b.n	800288c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80028d0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80028d4:	2a02      	cmp	r2, #2
 80028d6:	d026      	beq.n	8002926 <USBD_StdEPReq+0xb6>
 80028d8:	2a03      	cmp	r2, #3
 80028da:	d1e5      	bne.n	80028a8 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80028dc:	884a      	ldrh	r2, [r1, #2]
 80028de:	2a00      	cmp	r2, #0
 80028e0:	d1d4      	bne.n	800288c <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80028e2:	0659      	lsls	r1, r3, #25
 80028e4:	d0f0      	beq.n	80028c8 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80028e6:	4619      	mov	r1, r3
 80028e8:	f000 fc3c 	bl	8003164 <USBD_LL_ClearStallEP>
 80028ec:	e7e6      	b.n	80028bc <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80028ee:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80028f2:	2a02      	cmp	r2, #2
 80028f4:	d017      	beq.n	8002926 <USBD_StdEPReq+0xb6>
 80028f6:	2a03      	cmp	r2, #3
 80028f8:	d1d6      	bne.n	80028a8 <USBD_StdEPReq+0x38>
 80028fa:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80028fe:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002902:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002906:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002908:	bf14      	ite	ne
 800290a:	3514      	addne	r5, #20
 800290c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002910:	f000 fc36 	bl	8003180 <USBD_LL_IsStallEP>
 8002914:	b168      	cbz	r0, 8002932 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002916:	2301      	movs	r3, #1
 8002918:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800291a:	2202      	movs	r2, #2
 800291c:	4629      	mov	r1, r5
 800291e:	4620      	mov	r0, r4
 8002920:	f000 f844 	bl	80029ac <USBD_CtlSendData>
      break;
 8002924:	e7b2      	b.n	800288c <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002926:	065a      	lsls	r2, r3, #25
 8002928:	d0b0      	beq.n	800288c <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800292a:	4619      	mov	r1, r3
 800292c:	f000 fc0c 	bl	8003148 <USBD_LL_StallEP>
 8002930:	e7ac      	b.n	800288c <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002932:	6028      	str	r0, [r5, #0]
 8002934:	e7f1      	b.n	800291a <USBD_StdEPReq+0xaa>

08002936 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002936:	780b      	ldrb	r3, [r1, #0]
 8002938:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800293a:	784b      	ldrb	r3, [r1, #1]
 800293c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800293e:	78ca      	ldrb	r2, [r1, #3]
 8002940:	788b      	ldrb	r3, [r1, #2]
 8002942:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002946:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002948:	794a      	ldrb	r2, [r1, #5]
 800294a:	790b      	ldrb	r3, [r1, #4]
 800294c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002950:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002952:	79ca      	ldrb	r2, [r1, #7]
 8002954:	798b      	ldrb	r3, [r1, #6]
 8002956:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800295a:	80c3      	strh	r3, [r0, #6]
 800295c:	4770      	bx	lr

0800295e <USBD_CtlError>:
{
 800295e:	b510      	push	{r4, lr}
 8002960:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	f000 fbf0 	bl	8003148 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002968:	4620      	mov	r0, r4
}
 800296a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800296e:	2100      	movs	r1, #0
 8002970:	f000 bbea 	b.w	8003148 <USBD_LL_StallEP>

08002974 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002974:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002976:	b188      	cbz	r0, 800299c <USBD_GetString+0x28>
 8002978:	4605      	mov	r5, r0
 800297a:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800297c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2c00      	cmp	r4, #0
 8002984:	d1f9      	bne.n	800297a <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	3302      	adds	r3, #2
 800298a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800298c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800298e:	2303      	movs	r3, #3
 8002990:	704b      	strb	r3, [r1, #1]
 8002992:	2302      	movs	r3, #2
 8002994:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002996:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800299a:	b905      	cbnz	r5, 800299e <USBD_GetString+0x2a>
 800299c:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	54cd      	strb	r5, [r1, r3]
 80029a2:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80029a4:	3302      	adds	r3, #2
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	548c      	strb	r4, [r1, r2]
 80029aa:	e7f4      	b.n	8002996 <USBD_GetString+0x22>

080029ac <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80029ac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80029ae:	2202      	movs	r2, #2
{
 80029b0:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80029b2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80029b6:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80029b8:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80029ba:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80029bc:	2100      	movs	r1, #0
 80029be:	f000 fbfd 	bl	80031bc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80029c2:	2000      	movs	r0, #0
 80029c4:	bd10      	pop	{r4, pc}

080029c6 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80029c6:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80029c8:	4613      	mov	r3, r2
 80029ca:	460a      	mov	r2, r1
 80029cc:	2100      	movs	r1, #0
 80029ce:	f000 fbf5 	bl	80031bc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80029d2:	2000      	movs	r0, #0
 80029d4:	bd08      	pop	{r3, pc}

080029d6 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80029d6:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80029d8:	4613      	mov	r3, r2
 80029da:	460a      	mov	r2, r1
 80029dc:	2100      	movs	r1, #0
 80029de:	f000 fbfb 	bl	80031d8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80029e2:	2000      	movs	r0, #0
 80029e4:	bd08      	pop	{r3, pc}

080029e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80029e6:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80029e8:	2304      	movs	r3, #4
 80029ea:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80029ee:	2300      	movs	r3, #0
 80029f0:	461a      	mov	r2, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	f000 fbe2 	bl	80031bc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80029f8:	2000      	movs	r0, #0
 80029fa:	bd08      	pop	{r3, pc}

080029fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80029fc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80029fe:	2305      	movs	r3, #5
 8002a00:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002a04:	2300      	movs	r3, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f000 fbe5 	bl	80031d8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002a0e:	2000      	movs	r0, #0
 8002a10:	bd08      	pop	{r3, pc}
	...

08002a14 <openFile>:
char fileList[256][12+1];

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

FRESULT openFile(char *filename) {
 8002a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a18:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8002a1c:	4606      	mov	r6, r0
    DIR dj;
    FILINFO fno;
    FRESULT fr;

    fr = f_opendir(&dj, "");
 8002a1e:	4927      	ldr	r1, [pc, #156]	; (8002abc <openFile+0xa8>)
 8002a20:	a807      	add	r0, sp, #28
 8002a22:	f001 f96e 	bl	8003d02 <f_opendir>
    if(fr == FR_OK){
 8002a26:	4604      	mov	r4, r0
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d13c      	bne.n	8002aa6 <openFile+0x92>
		fr = f_readdir(&dj, &fno);
 8002a2c:	a901      	add	r1, sp, #4
 8002a2e:	a807      	add	r0, sp, #28
 8002a30:	f001 f9a2 	bl	8003d78 <f_readdir>
 8002a34:	4605      	mov	r5, r0
		uint8_t i = 0;
		while (fr == FR_OK && fno.fname[0] && i<255) {
			if(strcmp(fno.fname, "AUTORUN.BIN")!=0){
 8002a36:	4f22      	ldr	r7, [pc, #136]	; (8002ac0 <openFile+0xac>)
				strcpy(fileList[i], fno.fname);
 8002a38:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002ac8 <openFile+0xb4>
		while (fr == FR_OK && fno.fname[0] && i<255) {
 8002a3c:	b925      	cbnz	r5, 8002a48 <openFile+0x34>
 8002a3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002a42:	b10b      	cbz	r3, 8002a48 <openFile+0x34>
 8002a44:	2cff      	cmp	r4, #255	; 0xff
 8002a46:	d119      	bne.n	8002a7c <openFile+0x68>
				i++;
			}
			fr = f_readdir(&dj, &fno);
		}
		f_closedir(&dj);
 8002a48:	a807      	add	r0, sp, #28
 8002a4a:	f001 f98c 	bl	8003d66 <f_closedir>
    	}
    	fr = f_findnext(&dj, &fno);
    }
    f_closedir(&dj);
*/
    if(filename != NULL) {
 8002a4e:	b12e      	cbz	r6, 8002a5c <openFile+0x48>
    	fr = f_open(&appFile, filename, FA_READ);
 8002a50:	2201      	movs	r2, #1
 8002a52:	4631      	mov	r1, r6
 8002a54:	481b      	ldr	r0, [pc, #108]	; (8002ac4 <openFile+0xb0>)
 8002a56:	f001 f807 	bl	8003a68 <f_open>
 8002a5a:	4605      	mov	r5, r0
    }

    if(fr != FR_OK){
 8002a5c:	bb2d      	cbnz	r5, 8002aaa <openFile+0x96>
    	}
    }

    if (fr == FR_OK) {
    	uint32_t lktbl[256];
		lktbl[0] = 256;
 8002a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
		appFile.cltbl = lktbl;
 8002a62:	4818      	ldr	r0, [pc, #96]	; (8002ac4 <openFile+0xb0>)
		lktbl[0] = 256;
 8002a64:	ab12      	add	r3, sp, #72	; 0x48
		f_lseek(&appFile, CREATE_LINKMAP);
 8002a66:	f04f 31ff 	mov.w	r1, #4294967295
		lktbl[0] = 256;
 8002a6a:	9212      	str	r2, [sp, #72]	; 0x48
		appFile.cltbl = lktbl;
 8002a6c:	6203      	str	r3, [r0, #32]
		f_lseek(&appFile, CREATE_LINKMAP);
 8002a6e:	f001 f88c 	bl	8003b8a <f_lseek>
 8002a72:	2000      	movs	r0, #0
	}

    return fr;
}
 8002a74:	f50d 6d89 	add.w	sp, sp, #1096	; 0x448
 8002a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(strcmp(fno.fname, "AUTORUN.BIN")!=0){
 8002a7c:	4639      	mov	r1, r7
 8002a7e:	f10d 000d 	add.w	r0, sp, #13
 8002a82:	f7fd fb63 	bl	800014c <strcmp>
 8002a86:	b140      	cbz	r0, 8002a9a <openFile+0x86>
				strcpy(fileList[i], fno.fname);
 8002a88:	200d      	movs	r0, #13
 8002a8a:	f10d 010d 	add.w	r1, sp, #13
 8002a8e:	fb00 8004 	mla	r0, r0, r4, r8
 8002a92:	f001 fa42 	bl	8003f1a <strcpy>
				i++;
 8002a96:	3401      	adds	r4, #1
 8002a98:	b2e4      	uxtb	r4, r4
			fr = f_readdir(&dj, &fno);
 8002a9a:	a901      	add	r1, sp, #4
 8002a9c:	a807      	add	r0, sp, #28
 8002a9e:	f001 f96b 	bl	8003d78 <f_readdir>
 8002aa2:	4605      	mov	r5, r0
 8002aa4:	e7ca      	b.n	8002a3c <openFile+0x28>
    if(filename != NULL) {
 8002aa6:	2e00      	cmp	r6, #0
 8002aa8:	d1d2      	bne.n	8002a50 <openFile+0x3c>
    		fr = f_open(&appFile, fileList[0], FA_READ);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4906      	ldr	r1, [pc, #24]	; (8002ac8 <openFile+0xb4>)
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <openFile+0xb0>)
 8002ab0:	f000 ffda 	bl	8003a68 <f_open>
    if (fr == FR_OK) {
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d1dd      	bne.n	8002a74 <openFile+0x60>
 8002ab8:	e7d1      	b.n	8002a5e <openFile+0x4a>
 8002aba:	bf00      	nop
 8002abc:	08003f6c 	.word	0x08003f6c
 8002ac0:	08003f79 	.word	0x08003f79
 8002ac4:	200005e0 	.word	0x200005e0
 8002ac8:	20000604 	.word	0x20000604

08002acc <fastGpioInitOutputPP>:

void fastGpioInitOutputPP(GPIO_TypeDef *GPIOx, uint8_t pinNum) {
	#define  GPIO_CR_CNF_GP_OUTPUT_PP   0x00000000U
	uint32_t position = (pinNum < 8) ? (pinNum << 2U) : ((pinNum - 8U) << 2U);
 8002acc:	2907      	cmp	r1, #7
	__IO uint32_t *configregister = (pinNum < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 8002ace:	bf92      	itee	ls
 8002ad0:	4602      	movls	r2, r0
 8002ad2:	6843      	ldrhi	r3, [r0, #4]
 8002ad4:	1d02      	addhi	r2, r0, #4
    MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002ad6:	f04f 000f 	mov.w	r0, #15
	uint32_t position = (pinNum < 8) ? (pinNum << 2U) : ((pinNum - 8U) << 2U);
 8002ada:	bf8d      	iteet	hi
 8002adc:	3908      	subhi	r1, #8
 8002ade:	0089      	lslls	r1, r1, #2
	__IO uint32_t *configregister = (pinNum < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 8002ae0:	6813      	ldrls	r3, [r2, #0]
	uint32_t position = (pinNum < 8) ? (pinNum << 2U) : ((pinNum - 8U) << 2U);
 8002ae2:	0089      	lslhi	r1, r1, #2
    MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002ae4:	4088      	lsls	r0, r1
 8002ae6:	ea23 0300 	bic.w	r3, r3, r0
 8002aea:	2002      	movs	r0, #2
 8002aec:	fa00 f101 	lsl.w	r1, r0, r1
 8002af0:	4319      	orrs	r1, r3
 8002af2:	6011      	str	r1, [r2, #0]
 8002af4:	4770      	bx	lr

08002af6 <fastGpioInitInputPU>:
void fastGpioInitInputPU(GPIO_TypeDef *GPIOx, uint8_t pinNum) {
	#define  GPIO_CR_MODE_INPUT         0x00000000U //!< 00: Input mode (reset state)
	#define  GPIO_CR_CNF_INPUT_PU_PD    0x00000008U //!< 10: Input with pull-up / pull-down
	uint32_t position = (pinNum < 8) ? (pinNum << 2U) : ((pinNum - 8U) << 2U);
	__IO uint32_t *configregister = (pinNum < 8) ? &GPIOx->CRL : &GPIOx->CRH;
	GPIOx->BSRR = 0x01U << pinNum;
 8002af6:	2301      	movs	r3, #1
	uint32_t position = (pinNum < 8) ? (pinNum << 2U) : ((pinNum - 8U) << 2U);
 8002af8:	2907      	cmp	r1, #7
 8002afa:	bf88      	it	hi
 8002afc:	f1a1 0208 	subhi.w	r2, r1, #8
void fastGpioInitInputPU(GPIO_TypeDef *GPIOx, uint8_t pinNum) {
 8002b00:	b510      	push	{r4, lr}
	uint32_t position = (pinNum < 8) ? (pinNum << 2U) : ((pinNum - 8U) << 2U);
 8002b02:	bf9c      	itt	ls
 8002b04:	008a      	lslls	r2, r1, #2
	__IO uint32_t *configregister = (pinNum < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 8002b06:	4604      	movls	r4, r0
	GPIOx->BSRR = 0x01U << pinNum;
 8002b08:	fa03 f101 	lsl.w	r1, r3, r1
 8002b0c:	6101      	str	r1, [r0, #16]
    MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002b0e:	f04f 010f 	mov.w	r1, #15
	__IO uint32_t *configregister = (pinNum < 8) ? &GPIOx->CRL : &GPIOx->CRH;
 8002b12:	bf84      	itt	hi
 8002b14:	1d04      	addhi	r4, r0, #4
	uint32_t position = (pinNum < 8) ? (pinNum << 2U) : ((pinNum - 8U) << 2U);
 8002b16:	0092      	lslhi	r2, r2, #2
    MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	4091      	lsls	r1, r2
 8002b1c:	ea23 0301 	bic.w	r3, r3, r1
 8002b20:	2108      	movs	r1, #8
 8002b22:	fa01 f202 	lsl.w	r2, r1, r2
 8002b26:	4313      	orrs	r3, r2
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	bd10      	pop	{r4, pc}

08002b2c <fastGpioInitEvtFal>:
    		((GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD) << position));
}

void fastGpioInitEvtFal(GPIO_TypeDef *GPIOx, uint32_t pinNum) {
 8002b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_AFIO_CLK_ENABLE();
	uint32_t temp = AFIO->EXTICR[pinNum >> 2U];
	CLEAR_BIT(temp, (0x0FU) << (4U * (pinNum & 0x03U)));
 8002b2e:	250f      	movs	r5, #15
    __HAL_RCC_AFIO_CLK_ENABLE();
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <fastGpioInitEvtFal+0x8c>)
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	619a      	str	r2, [r3, #24]
 8002b3a:	699b      	ldr	r3, [r3, #24]
	CLEAR_BIT(temp, (0x0FU) << (4U * (pinNum & 0x03U)));
 8002b3c:	f001 0203 	and.w	r2, r1, #3
    __HAL_RCC_AFIO_CLK_ENABLE();
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	9b01      	ldr	r3, [sp, #4]
 8002b48:	f021 0303 	bic.w	r3, r1, #3
 8002b4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b50:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	uint32_t temp = AFIO->EXTICR[pinNum >> 2U];
 8002b54:	689c      	ldr	r4, [r3, #8]
	CLEAR_BIT(temp, (0x0FU) << (4U * (pinNum & 0x03U)));
 8002b56:	0092      	lsls	r2, r2, #2
 8002b58:	4095      	lsls	r5, r2
 8002b5a:	ea24 0405 	bic.w	r4, r4, r5
	SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (pinNum & 0x03U)));
 8002b5e:	4d17      	ldr	r5, [pc, #92]	; (8002bbc <fastGpioInitEvtFal+0x90>)
 8002b60:	42a8      	cmp	r0, r5
 8002b62:	d023      	beq.n	8002bac <fastGpioInitEvtFal+0x80>
 8002b64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b68:	42a8      	cmp	r0, r5
 8002b6a:	d021      	beq.n	8002bb0 <fastGpioInitEvtFal+0x84>
 8002b6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b70:	42a8      	cmp	r0, r5
 8002b72:	d01f      	beq.n	8002bb4 <fastGpioInitEvtFal+0x88>
 8002b74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b78:	42a8      	cmp	r0, r5
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2003      	moveq	r0, #3
 8002b7e:	2004      	movne	r0, #4
 8002b80:	4090      	lsls	r0, r2
	AFIO->EXTICR[pinNum >> 2U] = temp;

	CLEAR_BIT(EXTI->IMR, 0x01U << pinNum); //GPIO_MODE_IT
 8002b82:	2201      	movs	r2, #1
 8002b84:	fa02 f101 	lsl.w	r1, r2, r1
 8002b88:	43ca      	mvns	r2, r1
	SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (pinNum & 0x03U)));
 8002b8a:	4320      	orrs	r0, r4
	AFIO->EXTICR[pinNum >> 2U] = temp;
 8002b8c:	6098      	str	r0, [r3, #8]
	CLEAR_BIT(EXTI->IMR, 0x01U << pinNum); //GPIO_MODE_IT
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <fastGpioInitEvtFal+0x94>)
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	4010      	ands	r0, r2
 8002b94:	6018      	str	r0, [r3, #0]
	SET_BIT(EXTI->EMR, 0x01U << pinNum); //GPIO_MODE_EVT
 8002b96:	6858      	ldr	r0, [r3, #4]
 8002b98:	4308      	orrs	r0, r1
 8002b9a:	6058      	str	r0, [r3, #4]
	CLEAR_BIT(EXTI->RTSR, 0x01U << pinNum); //RISING_EDGE
 8002b9c:	6898      	ldr	r0, [r3, #8]
 8002b9e:	4002      	ands	r2, r0
 8002ba0:	609a      	str	r2, [r3, #8]
	SET_BIT(EXTI->FTSR, 0x01U << pinNum); //FALLING_EDGE
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	4311      	orrs	r1, r2
 8002ba6:	60d9      	str	r1, [r3, #12]
}
 8002ba8:	b003      	add	sp, #12
 8002baa:	bd30      	pop	{r4, r5, pc}
	SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (pinNum & 0x03U)));
 8002bac:	2000      	movs	r0, #0
 8002bae:	e7e7      	b.n	8002b80 <fastGpioInitEvtFal+0x54>
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	e7e5      	b.n	8002b80 <fastGpioInitEvtFal+0x54>
 8002bb4:	2002      	movs	r0, #2
 8002bb6:	e7e3      	b.n	8002b80 <fastGpioInitEvtFal+0x54>
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40010800 	.word	0x40010800
 8002bc0:	40010400 	.word	0x40010400

08002bc4 <receiveData>:

uint32_t receiveData(uint8_t bitCount) {
	uint32_t data = 0;
	for(uint8_t i=0; i<bitCount; i++) {
 8002bc4:	2100      	movs	r1, #0
	uint32_t data = 0;
 8002bc6:	460b      	mov	r3, r1
uint32_t receiveData(uint8_t bitCount) {
 8002bc8:	b510      	push	{r4, lr}
		while((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 8002bca:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <receiveData+0x38>)
	for(uint8_t i=0; i<bitCount; i++) {
 8002bcc:	b2cc      	uxtb	r4, r1
 8002bce:	42a0      	cmp	r0, r4
 8002bd0:	d801      	bhi.n	8002bd6 <receiveData+0x12>
		}
		while((PORT_CLK->IDR & PIN_CLK) == GPIO_PIN_RESET &&
				(PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
	}
	return data;
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	bd10      	pop	{r4, pc}
		while((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 8002bd6:	6894      	ldr	r4, [r2, #8]
 8002bd8:	0624      	lsls	r4, r4, #24
 8002bda:	d502      	bpl.n	8002be2 <receiveData+0x1e>
				(PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
 8002bdc:	6894      	ldr	r4, [r2, #8]
		while((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 8002bde:	05a4      	lsls	r4, r4, #22
 8002be0:	d5f9      	bpl.n	8002bd6 <receiveData+0x12>
		if((PORT_DATA->IDR & PIN_DATA) != GPIO_PIN_RESET){
 8002be2:	6894      	ldr	r4, [r2, #8]
		data <<= 1;
 8002be4:	005b      	lsls	r3, r3, #1
		if((PORT_DATA->IDR & PIN_DATA) != GPIO_PIN_RESET){
 8002be6:	05e4      	lsls	r4, r4, #23
			data += 1;
 8002be8:	bf48      	it	mi
 8002bea:	3301      	addmi	r3, #1
		while((PORT_CLK->IDR & PIN_CLK) == GPIO_PIN_RESET &&
 8002bec:	6894      	ldr	r4, [r2, #8]
 8002bee:	0624      	lsls	r4, r4, #24
 8002bf0:	d402      	bmi.n	8002bf8 <receiveData+0x34>
				(PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
 8002bf2:	6894      	ldr	r4, [r2, #8]
		while((PORT_CLK->IDR & PIN_CLK) == GPIO_PIN_RESET &&
 8002bf4:	05a4      	lsls	r4, r4, #22
 8002bf6:	d5f9      	bpl.n	8002bec <receiveData+0x28>
 8002bf8:	3101      	adds	r1, #1
 8002bfa:	e7e7      	b.n	8002bcc <receiveData+0x8>
 8002bfc:	40010c00 	.word	0x40010c00

08002c00 <sendByte>:

void sendByte(uint32_t data) {
	for(uint8_t i=0; i<8; i++) {
		while((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <sendByte+0x3c>)
void sendByte(uint32_t data) {
 8002c02:	b570      	push	{r4, r5, r6, lr}
 8002c04:	2308      	movs	r3, #8
 8002c06:	4611      	mov	r1, r2
				 (PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
		if(data & 0x80){
			PORT_DATA->BSRR = PIN_DATA;
		} else {
			PORT_DATA->BSRR = PIN_DATA << 16;
 8002c08:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
			PORT_DATA->BSRR = PIN_DATA;
 8002c0c:	f44f 7580 	mov.w	r5, #256	; 0x100
		while((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 8002c10:	6896      	ldr	r6, [r2, #8]
 8002c12:	0636      	lsls	r6, r6, #24
 8002c14:	d502      	bpl.n	8002c1c <sendByte+0x1c>
				 (PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
 8002c16:	6896      	ldr	r6, [r2, #8]
		while((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 8002c18:	05b6      	lsls	r6, r6, #22
 8002c1a:	d5f9      	bpl.n	8002c10 <sendByte+0x10>
		if(data & 0x80){
 8002c1c:	0606      	lsls	r6, r0, #24
			PORT_DATA->BSRR = PIN_DATA;
 8002c1e:	bf4c      	ite	mi
 8002c20:	610d      	strmi	r5, [r1, #16]
			PORT_DATA->BSRR = PIN_DATA << 16;
 8002c22:	610c      	strpl	r4, [r1, #16]
		}
		data <<= 1;
 8002c24:	0040      	lsls	r0, r0, #1
		while((PORT_CLK->IDR & PIN_CLK) == GPIO_PIN_RESET &&
 8002c26:	6896      	ldr	r6, [r2, #8]
 8002c28:	0636      	lsls	r6, r6, #24
 8002c2a:	d402      	bmi.n	8002c32 <sendByte+0x32>
				(PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
 8002c2c:	6896      	ldr	r6, [r2, #8]
		while((PORT_CLK->IDR & PIN_CLK) == GPIO_PIN_RESET &&
 8002c2e:	05b6      	lsls	r6, r6, #22
 8002c30:	d5f9      	bpl.n	8002c26 <sendByte+0x26>
 8002c32:	3b01      	subs	r3, #1
	for(uint8_t i=0; i<8; i++) {
 8002c34:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8002c38:	d1ea      	bne.n	8002c10 <sendByte+0x10>
	}
}
 8002c3a:	bd70      	pop	{r4, r5, r6, pc}
 8002c3c:	40010c00 	.word	0x40010c00

08002c40 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8002c40:	b508      	push	{r3, lr}
	while(1){
		HAL_Delay(100);
		PORT_LED->ODR ^= PIN_LED;
 8002c42:	4c04      	ldr	r4, [pc, #16]	; (8002c54 <Error_Handler+0x14>)
		HAL_Delay(100);
 8002c44:	2064      	movs	r0, #100	; 0x64
 8002c46:	f7fd fadf 	bl	8000208 <HAL_Delay>
		PORT_LED->ODR ^= PIN_LED;
 8002c4a:	68e3      	ldr	r3, [r4, #12]
 8002c4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c50:	60e3      	str	r3, [r4, #12]
 8002c52:	e7f7      	b.n	8002c44 <Error_Handler+0x4>
 8002c54:	40011000 	.word	0x40011000

08002c58 <parseCommand>:
	switch(command) {
 8002c58:	28d0      	cmp	r0, #208	; 0xd0
void parseCommand(uint8_t command) {
 8002c5a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002c5e:	4604      	mov	r4, r0
	switch(command) {
 8002c60:	d014      	beq.n	8002c8c <parseCommand+0x34>
 8002c62:	d80d      	bhi.n	8002c80 <parseCommand+0x28>
 8002c64:	28a0      	cmp	r0, #160	; 0xa0
 8002c66:	d035      	beq.n	8002cd4 <parseCommand+0x7c>
 8002c68:	28a8      	cmp	r0, #168	; 0xa8
 8002c6a:	d025      	beq.n	8002cb8 <parseCommand+0x60>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d176      	bne.n	8002d5e <parseCommand+0x106>
			fastGpioInitOutputPP(PORT_DATA, PIN_DATA_NUM);
 8002c70:	483c      	ldr	r0, [pc, #240]	; (8002d64 <parseCommand+0x10c>)
 8002c72:	2108      	movs	r1, #8
 8002c74:	f7ff ff2a 	bl	8002acc <fastGpioInitOutputPP>
			sendByte(0x00);
 8002c78:	4620      	mov	r0, r4
			sendByte(0xFF);
 8002c7a:	f7ff ffc1 	bl	8002c00 <sendByte>
 8002c7e:	e016      	b.n	8002cae <parseCommand+0x56>
	switch(command) {
 8002c80:	28f0      	cmp	r0, #240	; 0xf0
 8002c82:	d035      	beq.n	8002cf0 <parseCommand+0x98>
 8002c84:	28f1      	cmp	r0, #241	; 0xf1
 8002c86:	d050      	beq.n	8002d2a <parseCommand+0xd2>
 8002c88:	28d8      	cmp	r0, #216	; 0xd8
 8002c8a:	d168      	bne.n	8002d5e <parseCommand+0x106>
			fastGpioInitOutputPP(PORT_DATA, PIN_DATA_NUM);
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	4835      	ldr	r0, [pc, #212]	; (8002d64 <parseCommand+0x10c>)
 8002c90:	f7ff ff1c 	bl	8002acc <fastGpioInitOutputPP>
			PORT_LED->BSRR = PIN_LED << 16;
 8002c94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c98:	4c33      	ldr	r4, [pc, #204]	; (8002d68 <parseCommand+0x110>)
			while((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET) {
 8002c9a:	4e32      	ldr	r6, [pc, #200]	; (8002d64 <parseCommand+0x10c>)
				if(f_read_byte(&appFile, &readBuffer)!=FR_OK){
 8002c9c:	4f33      	ldr	r7, [pc, #204]	; (8002d6c <parseCommand+0x114>)
			PORT_LED->BSRR = PIN_LED << 16;
 8002c9e:	6122      	str	r2, [r4, #16]
			while((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET) {
 8002ca0:	68b5      	ldr	r5, [r6, #8]
 8002ca2:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 8002ca6:	d017      	beq.n	8002cd8 <parseCommand+0x80>
			PORT_LED->BSRR = PIN_LED;
 8002ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cac:	6123      	str	r3, [r4, #16]
			fastGpioInitInputPU(PORT_DATA, PIN_DATA_NUM);
 8002cae:	2108      	movs	r1, #8
 8002cb0:	482c      	ldr	r0, [pc, #176]	; (8002d64 <parseCommand+0x10c>)
 8002cb2:	f7ff ff20 	bl	8002af6 <fastGpioInitInputPU>
		break;
 8002cb6:	e006      	b.n	8002cc6 <parseCommand+0x6e>
			uint32_t currentAddress = receiveData(24);
 8002cb8:	2018      	movs	r0, #24
			uint32_t currentAddress = receiveData(16);
 8002cba:	f7ff ff83 	bl	8002bc4 <receiveData>
			f_lseek(&appFile, currentAddress);
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	482a      	ldr	r0, [pc, #168]	; (8002d6c <parseCommand+0x114>)
 8002cc2:	f000 ff62 	bl	8003b8a <f_lseek>
	while((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
 8002cc6:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <parseCommand+0x10c>)
 8002cc8:	6893      	ldr	r3, [r2, #8]
 8002cca:	059b      	lsls	r3, r3, #22
 8002ccc:	d5fc      	bpl.n	8002cc8 <parseCommand+0x70>
}
 8002cce:	b004      	add	sp, #16
 8002cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uint32_t currentAddress = receiveData(16);
 8002cd4:	2010      	movs	r0, #16
 8002cd6:	e7f0      	b.n	8002cba <parseCommand+0x62>
				if(f_read_byte(&appFile, &readBuffer)!=FR_OK){
 8002cd8:	4669      	mov	r1, sp
 8002cda:	4638      	mov	r0, r7
 8002cdc:	f000 ff05 	bl	8003aea <f_read_byte>
 8002ce0:	b108      	cbz	r0, 8002ce6 <parseCommand+0x8e>
					readBuffer = 0;
 8002ce2:	f88d 5000 	strb.w	r5, [sp]
				sendByte(readBuffer);
 8002ce6:	f89d 0000 	ldrb.w	r0, [sp]
 8002cea:	f7ff ff89 	bl	8002c00 <sendByte>
 8002cee:	e7d7      	b.n	8002ca0 <parseCommand+0x48>
			fastGpioInitOutputPP(PORT_DATA, PIN_DATA_NUM);
 8002cf0:	2108      	movs	r1, #8
 8002cf2:	481c      	ldr	r0, [pc, #112]	; (8002d64 <parseCommand+0x10c>)
 8002cf4:	f7ff feea 	bl	8002acc <fastGpioInitOutputPP>
			while(fileList[i][0]){
 8002cf8:	2600      	movs	r6, #0
 8002cfa:	f04f 080d 	mov.w	r8, #13
 8002cfe:	4f1c      	ldr	r7, [pc, #112]	; (8002d70 <parseCommand+0x118>)
 8002d00:	b2f3      	uxtb	r3, r6
 8002d02:	fb08 f303 	mul.w	r3, r8, r3
 8002d06:	18fc      	adds	r4, r7, r3
 8002d08:	5cfb      	ldrb	r3, [r7, r3]
 8002d0a:	b163      	cbz	r3, 8002d26 <parseCommand+0xce>
 8002d0c:	2500      	movs	r5, #0
 8002d0e:	e001      	b.n	8002d14 <parseCommand+0xbc>
					sendByte(fileList[i][j]);
 8002d10:	f7ff ff76 	bl	8002c00 <sendByte>
				for(uint8_t j = 0; fileList[i][j]; j++){
 8002d14:	b2eb      	uxtb	r3, r5
 8002d16:	5ce0      	ldrb	r0, [r4, r3]
 8002d18:	3501      	adds	r5, #1
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d1f8      	bne.n	8002d10 <parseCommand+0xb8>
				sendByte(0x00);
 8002d1e:	f7ff ff6f 	bl	8002c00 <sendByte>
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7ec      	b.n	8002d00 <parseCommand+0xa8>
			sendByte(0xFF);
 8002d26:	20ff      	movs	r0, #255	; 0xff
 8002d28:	e7a7      	b.n	8002c7a <parseCommand+0x22>
				char filename[12+1] = {0,};
 8002d2a:	220d      	movs	r2, #13
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4668      	mov	r0, sp
 8002d30:	f001 f8eb 	bl	8003f0a <memset>
				filename[i] = receiveData(8);
 8002d34:	2008      	movs	r0, #8
 8002d36:	f7ff ff45 	bl	8002bc4 <receiveData>
 8002d3a:	466c      	mov	r4, sp
 8002d3c:	f88d 0000 	strb.w	r0, [sp]
 8002d40:	ad03      	add	r5, sp, #12
				while(filename[i] != 0x00 && i<12){
 8002d42:	7823      	ldrb	r3, [r4, #0]
 8002d44:	b10b      	cbz	r3, 8002d4a <parseCommand+0xf2>
 8002d46:	42ac      	cmp	r4, r5
 8002d48:	d103      	bne.n	8002d52 <parseCommand+0xfa>
				openFile(filename);
 8002d4a:	4668      	mov	r0, sp
 8002d4c:	f7ff fe62 	bl	8002a14 <openFile>
			break;
 8002d50:	e7b9      	b.n	8002cc6 <parseCommand+0x6e>
					filename[++i] = receiveData(8);
 8002d52:	2008      	movs	r0, #8
 8002d54:	f7ff ff36 	bl	8002bc4 <receiveData>
 8002d58:	f804 0f01 	strb.w	r0, [r4, #1]!
 8002d5c:	e7f1      	b.n	8002d42 <parseCommand+0xea>
			Error_Handler();
 8002d5e:	f7ff ff6f 	bl	8002c40 <Error_Handler>
 8002d62:	bf00      	nop
 8002d64:	40010c00 	.word	0x40010c00
 8002d68:	40011000 	.word	0x40011000
 8002d6c:	200005e0 	.word	0x200005e0
 8002d70:	20000604 	.word	0x20000604

08002d74 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d74:	2228      	movs	r2, #40	; 0x28
void SystemClock_Config(void) {
 8002d76:	b570      	push	{r4, r5, r6, lr}
 8002d78:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	eb0d 0002 	add.w	r0, sp, r2
 8002d80:	f001 f8c3 	bl	8003f0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d84:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d86:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d88:	2100      	movs	r1, #0
 8002d8a:	eb0d 0002 	add.w	r0, sp, r2
 8002d8e:	f001 f8bc 	bl	8003f0a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d92:	462a      	mov	r2, r5
 8002d94:	2100      	movs	r1, #0
 8002d96:	a801      	add	r0, sp, #4
 8002d98:	f001 f8b7 	bl	8003f0a <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002da0:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002da2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002da4:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002da6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6; //RCC_PLL_MUL9;
 8002da8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002dac:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dae:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002db0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002db2:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6; //RCC_PLL_MUL9;
 8002db4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002db6:	f7fd ffdb 	bl	8000d70 <HAL_RCC_OscConfig>
 8002dba:	b108      	cbz	r0, 8002dc0 <SystemClock_Config+0x4c>
    Error_Handler();
 8002dbc:	f7ff ff40 	bl	8002c40 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc0:	230f      	movs	r3, #15
 8002dc2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4; //2
 8002dc4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc8:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002dca:	4621      	mov	r1, r4
 8002dcc:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dce:	9606      	str	r6, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4; //2
 8002dd0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4; //1
 8002dd2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002dd4:	f7fe f994 	bl	8001100 <HAL_RCC_ClockConfig>
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d1ef      	bne.n	8002dbc <SystemClock_Config+0x48>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL; //RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002ddc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002de0:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002de2:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL; //RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002de4:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002de6:	f7fe fa3d 	bl	8001264 <HAL_RCCEx_PeriphCLKConfig>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d1e6      	bne.n	8002dbc <SystemClock_Config+0x48>
}
 8002dee:	b014      	add	sp, #80	; 0x50
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002df4 <main>:
int main(void) {
 8002df4:	b500      	push	{lr}
 8002df6:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
	HAL_Init();
 8002dfa:	f7fd f9e1 	bl	80001c0 <HAL_Init>
	SystemClock_Config();
 8002dfe:	f7ff ffb9 	bl	8002d74 <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <main+0xa0>)
  PORT_LED->BSRR = PIN_LED;
 8002e04:	4c24      	ldr	r4, [pc, #144]	; (8002e98 <main+0xa4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	699a      	ldr	r2, [r3, #24]
  fastGpioInitInputPU(PORT_DATA, PIN_DATA_NUM);
 8002e08:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	f042 0208 	orr.w	r2, r2, #8
 8002e0e:	619a      	str	r2, [r3, #24]
 8002e10:	699a      	ldr	r2, [r3, #24]
  fastGpioInitInputPU(PORT_DATA, PIN_DATA_NUM);
 8002e12:	4822      	ldr	r0, [pc, #136]	; (8002e9c <main+0xa8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e14:	f002 0208 	and.w	r2, r2, #8
 8002e18:	9200      	str	r2, [sp, #0]
 8002e1a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	f042 0210 	orr.w	r2, r2, #16
 8002e22:	619a      	str	r2, [r3, #24]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	9b01      	ldr	r3, [sp, #4]
  PORT_LED->BSRR = PIN_LED;
 8002e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e32:	6123      	str	r3, [r4, #16]
  fastGpioInitInputPU(PORT_DATA, PIN_DATA_NUM);
 8002e34:	f7ff fe5f 	bl	8002af6 <fastGpioInitInputPU>
  fastGpioInitInputPU(PORT_SELECT, PIN_SELECT_NUM);
 8002e38:	2109      	movs	r1, #9
 8002e3a:	4818      	ldr	r0, [pc, #96]	; (8002e9c <main+0xa8>)
 8002e3c:	f7ff fe5b 	bl	8002af6 <fastGpioInitInputPU>
  fastGpioInitOutputPP(PORT_LED, PIN_LED_NUM);
 8002e40:	210d      	movs	r1, #13
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff fe42 	bl	8002acc <fastGpioInitOutputPP>
  fastGpioInitInputPU(PORT_CLK, PIN_CLK_NUM);
 8002e48:	2107      	movs	r1, #7
 8002e4a:	4814      	ldr	r0, [pc, #80]	; (8002e9c <main+0xa8>)
 8002e4c:	f7ff fe53 	bl	8002af6 <fastGpioInitInputPU>
  fastGpioInitEvtFal(PORT_CLK, PIN_CLK_NUM);
 8002e50:	2107      	movs	r1, #7
 8002e52:	4812      	ldr	r0, [pc, #72]	; (8002e9c <main+0xa8>)
 8002e54:	f7ff fe6a 	bl	8002b2c <fastGpioInitEvtFal>
	MX_USB_DEVICE_Init();
 8002e58:	f000 f87e 	bl	8002f58 <MX_USB_DEVICE_Init>
	if(f_mount(&FATFS_Obj, "0", 1) == FR_OK) {
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4910      	ldr	r1, [pc, #64]	; (8002ea0 <main+0xac>)
 8002e60:	a802      	add	r0, sp, #8
 8002e62:	f000 fddd 	bl	8003a20 <f_mount>
 8002e66:	b910      	cbnz	r0, 8002e6e <main+0x7a>
		openFile("autorun.bin");
 8002e68:	480e      	ldr	r0, [pc, #56]	; (8002ea4 <main+0xb0>)
 8002e6a:	f7ff fdd3 	bl	8002a14 <openFile>
		if((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET &&
 8002e6e:	4c0b      	ldr	r4, [pc, #44]	; (8002e9c <main+0xa8>)
		HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFE);
 8002e70:	2102      	movs	r1, #2
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fd ff6c 	bl	8000d50 <HAL_PWR_EnterSLEEPMode>
		if((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET &&
 8002e78:	68a3      	ldr	r3, [r4, #8]
 8002e7a:	059a      	lsls	r2, r3, #22
 8002e7c:	d4f8      	bmi.n	8002e70 <main+0x7c>
			  (PORT_CLK->IDR & PIN_CLK) == GPIO_PIN_RESET){
 8002e7e:	68a3      	ldr	r3, [r4, #8]
		if((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET &&
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	d4f5      	bmi.n	8002e70 <main+0x7c>
			parseCommand(receiveData(8));
 8002e84:	2008      	movs	r0, #8
 8002e86:	f7ff fe9d 	bl	8002bc4 <receiveData>
 8002e8a:	b2c0      	uxtb	r0, r0
 8002e8c:	f7ff fee4 	bl	8002c58 <parseCommand>
 8002e90:	e7ee      	b.n	8002e70 <main+0x7c>
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40011000 	.word	0x40011000
 8002e9c:	40010c00 	.word	0x40010c00
 8002ea0:	08003f6b 	.word	0x08003f6b
 8002ea4:	08003f6d 	.word	0x08003f6d

08002ea8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_MspInit+0x3c>)
{
 8002eaa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	619a      	str	r2, [r3, #24]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	f002 0201 	and.w	r2, r2, #1
 8002eba:	9200      	str	r2, [sp, #0]
 8002ebc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ec4:	61da      	str	r2, [r3, #28]
 8002ec6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ed2:	6853      	ldr	r3, [r2, #4]
 8002ed4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002edc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ede:	b002      	add	sp, #8
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010000 	.word	0x40010000

08002eec <NMI_Handler>:
 8002eec:	4770      	bx	lr

08002eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eee:	e7fe      	b.n	8002eee <HardFault_Handler>

08002ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef0:	e7fe      	b.n	8002ef0 <MemManage_Handler>

08002ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef2:	e7fe      	b.n	8002ef2 <BusFault_Handler>

08002ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ef4:	e7fe      	b.n	8002ef4 <UsageFault_Handler>

08002ef6 <SVC_Handler>:
 8002ef6:	4770      	bx	lr

08002ef8 <DebugMon_Handler>:
 8002ef8:	4770      	bx	lr

08002efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002efa:	4770      	bx	lr

08002efc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002efc:	f7fd b972 	b.w	80001e4 <HAL_IncTick>

08002f00 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f00:	4801      	ldr	r0, [pc, #4]	; (8002f08 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002f02:	f7fd bc2f 	b.w	8000764 <HAL_PCD_IRQHandler>
 8002f06:	bf00      	nop
 8002f08:	20001528 	.word	0x20001528

08002f0c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <SystemInit+0x40>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <SystemInit+0x44>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f28:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f30:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f38:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f3e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <SystemInit+0x48>)
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	f8ff0000 	.word	0xf8ff0000
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002f58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	490e      	ldr	r1, [pc, #56]	; (8002f98 <MX_USB_DEVICE_Init+0x40>)
 8002f5e:	480f      	ldr	r0, [pc, #60]	; (8002f9c <MX_USB_DEVICE_Init+0x44>)
 8002f60:	f7ff fa4b 	bl	80023fa <USBD_Init>
 8002f64:	b108      	cbz	r0, 8002f6a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002f66:	f7ff fe6b 	bl	8002c40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8002f6a:	490d      	ldr	r1, [pc, #52]	; (8002fa0 <MX_USB_DEVICE_Init+0x48>)
 8002f6c:	480b      	ldr	r0, [pc, #44]	; (8002f9c <MX_USB_DEVICE_Init+0x44>)
 8002f6e:	f7ff fa59 	bl	8002424 <USBD_RegisterClass>
 8002f72:	b108      	cbz	r0, 8002f78 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002f74:	f7ff fe64 	bl	8002c40 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8002f78:	490a      	ldr	r1, [pc, #40]	; (8002fa4 <MX_USB_DEVICE_Init+0x4c>)
 8002f7a:	4808      	ldr	r0, [pc, #32]	; (8002f9c <MX_USB_DEVICE_Init+0x44>)
 8002f7c:	f7fe fed7 	bl	8001d2e <USBD_MSC_RegisterStorage>
 8002f80:	b108      	cbz	r0, 8002f86 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8002f82:	f7ff fe5d 	bl	8002c40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_USB_DEVICE_Init+0x44>)
 8002f88:	f7ff fa53 	bl	8002432 <USBD_Start>
 8002f8c:	b118      	cbz	r0, 8002f96 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002f92:	f7ff be55 	b.w	8002c40 <Error_Handler>
 8002f96:	bd08      	pop	{r3, pc}
 8002f98:	200000b0 	.word	0x200000b0
 8002f9c:	20001304 	.word	0x20001304
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	20000100 	.word	0x20000100

08002fa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002fa8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <HAL_PCD_MspInit+0x38>)
 8002fac:	6802      	ldr	r2, [r0, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d112      	bne.n	8002fd8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002fb2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002fb6:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002fb8:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002fba:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002fbe:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002fc0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002fc2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002fc4:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002fce:	f7fd f93f 	bl	8000250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002fd2:	2014      	movs	r0, #20
 8002fd4:	f7fd f970 	bl	80002b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002fd8:	b003      	add	sp, #12
 8002fda:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fde:	bf00      	nop
 8002fe0:	40005c00 	.word	0x40005c00

08002fe4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002fe4:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002fe8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002fec:	f7ff ba38 	b.w	8002460 <USBD_LL_SetupStage>

08002ff0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002ff0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002ff4:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002ff8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002ffc:	f7ff ba5d 	b.w	80024ba <USBD_LL_DataOutStage>

08003000 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003000:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003006:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800300a:	f7ff ba88 	b.w	800251e <USBD_LL_DataInStage>

0800300e <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800300e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003012:	f7ff bb04 	b.w	800261e <USBD_LL_SOF>

08003016 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003016:	6883      	ldr	r3, [r0, #8]
{ 
 8003018:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800301a:	2b02      	cmp	r3, #2
{ 
 800301c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800301e:	d001      	beq.n	8003024 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003020:	f7ff fe0e 	bl	8002c40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003024:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8003028:	2101      	movs	r1, #1
 800302a:	f7ff fae6 	bl	80025fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800302e:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8003032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003036:	f7ff bac1 	b.w	80025bc <USBD_LL_Reset>
	...

0800303c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800303c:	b510      	push	{r4, lr}
 800303e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003040:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003044:	f7ff fadc 	bl	8002600 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003048:	69a3      	ldr	r3, [r4, #24]
 800304a:	b123      	cbz	r3, 8003056 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800304c:	4a02      	ldr	r2, [pc, #8]	; (8003058 <HAL_PCD_SuspendCallback+0x1c>)
 800304e:	6913      	ldr	r3, [r2, #16]
 8003050:	f043 0306 	orr.w	r3, r3, #6
 8003054:	6113      	str	r3, [r2, #16]
 8003056:	bd10      	pop	{r4, pc}
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800305c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003060:	f7ff bad7 	b.w	8002612 <USBD_LL_Resume>

08003064 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003064:	2302      	movs	r3, #2
 8003066:	2208      	movs	r2, #8
{
 8003068:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800306a:	4918      	ldr	r1, [pc, #96]	; (80030cc <USBD_LL_Init+0x68>)
{
 800306c:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800306e:	4818      	ldr	r0, [pc, #96]	; (80030d0 <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003070:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003074:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003076:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800307a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800307e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003080:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003082:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003084:	f7fd fa60 	bl	8000548 <HAL_PCD_Init>
 8003088:	b108      	cbz	r0, 800308e <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 800308a:	f7ff fdd9 	bl	8002c40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800308e:	2200      	movs	r2, #0
 8003090:	2318      	movs	r3, #24
 8003092:	4611      	mov	r1, r2
 8003094:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003098:	f7fd fe42 	bl	8000d20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800309c:	2358      	movs	r3, #88	; 0x58
 800309e:	2200      	movs	r2, #0
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80030a6:	f7fd fe3b 	bl	8000d20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 80030aa:	2398      	movs	r3, #152	; 0x98
 80030ac:	2200      	movs	r2, #0
 80030ae:	2181      	movs	r1, #129	; 0x81
 80030b0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80030b4:	f7fd fe34 	bl	8000d20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 80030b8:	23d8      	movs	r3, #216	; 0xd8
 80030ba:	2200      	movs	r2, #0
 80030bc:	2101      	movs	r1, #1
 80030be:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80030c2:	f7fd fe2d 	bl	8000d20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
}
 80030c6:	2000      	movs	r0, #0
 80030c8:	bd10      	pop	{r4, pc}
 80030ca:	bf00      	nop
 80030cc:	40005c00 	.word	0x40005c00
 80030d0:	20001528 	.word	0x20001528

080030d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80030d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80030d6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80030da:	f7fd fa9e 	bl	800061a <HAL_PCD_Start>
 80030de:	2803      	cmp	r0, #3
 80030e0:	bf9a      	itte	ls
 80030e2:	4b02      	ldrls	r3, [pc, #8]	; (80030ec <USBD_LL_Start+0x18>)
 80030e4:	5c18      	ldrbls	r0, [r3, r0]
 80030e6:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80030e8:	bd08      	pop	{r3, pc}
 80030ea:	bf00      	nop
 80030ec:	08003f95 	.word	0x08003f95

080030f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80030f0:	b510      	push	{r4, lr}
 80030f2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80030f4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80030f8:	4613      	mov	r3, r2
 80030fa:	4622      	mov	r2, r4
 80030fc:	f7fd fab8 	bl	8000670 <HAL_PCD_EP_Open>
 8003100:	2803      	cmp	r0, #3
 8003102:	bf9a      	itte	ls
 8003104:	4b01      	ldrls	r3, [pc, #4]	; (800310c <USBD_LL_OpenEP+0x1c>)
 8003106:	5c18      	ldrbls	r0, [r3, r0]
 8003108:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800310a:	bd10      	pop	{r4, pc}
 800310c:	08003f95 	.word	0x08003f95

08003110 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003110:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003112:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003116:	f7fd face 	bl	80006b6 <HAL_PCD_EP_Close>
 800311a:	2803      	cmp	r0, #3
 800311c:	bf9a      	itte	ls
 800311e:	4b02      	ldrls	r3, [pc, #8]	; (8003128 <USBD_LL_CloseEP+0x18>)
 8003120:	5c18      	ldrbls	r0, [r3, r0]
 8003122:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8003124:	bd08      	pop	{r3, pc}
 8003126:	bf00      	nop
 8003128:	08003f95 	.word	0x08003f95

0800312c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800312c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800312e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003132:	f7fd fddb 	bl	8000cec <HAL_PCD_EP_Flush>
 8003136:	2803      	cmp	r0, #3
 8003138:	bf9a      	itte	ls
 800313a:	4b02      	ldrls	r3, [pc, #8]	; (8003144 <USBD_LL_FlushEP+0x18>)
 800313c:	5c18      	ldrbls	r0, [r3, r0]
 800313e:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8003140:	bd08      	pop	{r3, pc}
 8003142:	bf00      	nop
 8003144:	08003f95 	.word	0x08003f95

08003148 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003148:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800314a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800314e:	f7fd fd81 	bl	8000c54 <HAL_PCD_EP_SetStall>
 8003152:	2803      	cmp	r0, #3
 8003154:	bf9a      	itte	ls
 8003156:	4b02      	ldrls	r3, [pc, #8]	; (8003160 <USBD_LL_StallEP+0x18>)
 8003158:	5c18      	ldrbls	r0, [r3, r0]
 800315a:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 800315c:	bd08      	pop	{r3, pc}
 800315e:	bf00      	nop
 8003160:	08003f95 	.word	0x08003f95

08003164 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003164:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003166:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800316a:	f7fd fd9c 	bl	8000ca6 <HAL_PCD_EP_ClrStall>
 800316e:	2803      	cmp	r0, #3
 8003170:	bf9a      	itte	ls
 8003172:	4b02      	ldrls	r3, [pc, #8]	; (800317c <USBD_LL_ClearStallEP+0x18>)
 8003174:	5c18      	ldrbls	r0, [r3, r0]
 8003176:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8003178:	bd08      	pop	{r3, pc}
 800317a:	bf00      	nop
 800317c:	08003f95 	.word	0x08003f95

08003180 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003180:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003182:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003186:	bf45      	ittet	mi
 8003188:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 800318c:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003190:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003194:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003198:	bf58      	it	pl
 800319a:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 800319e:	4770      	bx	lr

080031a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80031a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80031a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80031a6:	f7fd fa4f 	bl	8000648 <HAL_PCD_SetAddress>
 80031aa:	2803      	cmp	r0, #3
 80031ac:	bf9a      	itte	ls
 80031ae:	4b02      	ldrls	r3, [pc, #8]	; (80031b8 <USBD_LL_SetUSBAddress+0x18>)
 80031b0:	5c18      	ldrbls	r0, [r3, r0]
 80031b2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80031b4:	bd08      	pop	{r3, pc}
 80031b6:	bf00      	nop
 80031b8:	08003f95 	.word	0x08003f95

080031bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80031bc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80031be:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80031c2:	f7fd fab8 	bl	8000736 <HAL_PCD_EP_Transmit>
 80031c6:	2803      	cmp	r0, #3
 80031c8:	bf9a      	itte	ls
 80031ca:	4b02      	ldrls	r3, [pc, #8]	; (80031d4 <USBD_LL_Transmit+0x18>)
 80031cc:	5c18      	ldrbls	r0, [r3, r0]
 80031ce:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 80031d0:	bd08      	pop	{r3, pc}
 80031d2:	bf00      	nop
 80031d4:	08003f95 	.word	0x08003f95

080031d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80031d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80031da:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80031de:	f7fd fa8b 	bl	80006f8 <HAL_PCD_EP_Receive>
 80031e2:	2803      	cmp	r0, #3
 80031e4:	bf9a      	itte	ls
 80031e6:	4b02      	ldrls	r3, [pc, #8]	; (80031f0 <USBD_LL_PrepareReceive+0x18>)
 80031e8:	5c18      	ldrbls	r0, [r3, r0]
 80031ea:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 80031ec:	bd08      	pop	{r3, pc}
 80031ee:	bf00      	nop
 80031f0:	08003f95 	.word	0x08003f95

080031f4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80031f4:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80031f6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80031fa:	f7fd fa95 	bl	8000728 <HAL_PCD_EP_GetRxCount>
}
 80031fe:	bd08      	pop	{r3, pc}

08003200 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003200:	4800      	ldr	r0, [pc, #0]	; (8003204 <USBD_static_malloc+0x4>)
 8003202:	4770      	bx	lr
 8003204:	20000140 	.word	0x20000140

08003208 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003208:	4770      	bx	lr

0800320a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800320a:	4770      	bx	lr

0800320c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800320c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800320e:	4801      	ldr	r0, [pc, #4]	; (8003214 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003210:	800b      	strh	r3, [r1, #0]
}
 8003212:	4770      	bx	lr
 8003214:	200000cc 	.word	0x200000cc

08003218 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003218:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800321a:	4801      	ldr	r0, [pc, #4]	; (8003220 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800321c:	800b      	strh	r3, [r1, #0]
}
 800321e:	4770      	bx	lr
 8003220:	200000e0 	.word	0x200000e0

08003224 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003224:	2300      	movs	r3, #0
{
 8003226:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003228:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800322a:	b2dc      	uxtb	r4, r3
 800322c:	42a2      	cmp	r2, r4
 800322e:	d800      	bhi.n	8003232 <IntToUnicode+0xe>
  }
}
 8003230:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8003232:	0f04      	lsrs	r4, r0, #28
 8003234:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8003236:	bf94      	ite	ls
 8003238:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800323a:	3437      	addhi	r4, #55	; 0x37
 800323c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003240:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8003244:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8003246:	7065      	strb	r5, [r4, #1]
 8003248:	3301      	adds	r3, #1
 800324a:	e7ee      	b.n	800322a <IntToUnicode+0x6>

0800324c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800324c:	231a      	movs	r3, #26
{
 800324e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003250:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <USBD_FS_SerialStrDescriptor+0x2c>)
 8003254:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003256:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003258:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800325a:	18c0      	adds	r0, r0, r3
 800325c:	d00a      	beq.n	8003274 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003260:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003262:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003264:	4906      	ldr	r1, [pc, #24]	; (8003280 <USBD_FS_SerialStrDescriptor+0x34>)
 8003266:	f7ff ffdd 	bl	8003224 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800326a:	2204      	movs	r2, #4
 800326c:	4905      	ldr	r1, [pc, #20]	; (8003284 <USBD_FS_SerialStrDescriptor+0x38>)
 800326e:	4620      	mov	r0, r4
 8003270:	f7ff ffd8 	bl	8003224 <IntToUnicode>
}
 8003274:	4804      	ldr	r0, [pc, #16]	; (8003288 <USBD_FS_SerialStrDescriptor+0x3c>)
 8003276:	bd10      	pop	{r4, pc}
 8003278:	1ffff7e8 	.word	0x1ffff7e8
 800327c:	1ffff7ec 	.word	0x1ffff7ec
 8003280:	200000e6 	.word	0x200000e6
 8003284:	200000f6 	.word	0x200000f6
 8003288:	200000e4 	.word	0x200000e4

0800328c <USBD_FS_ManufacturerStrDescriptor>:
{
 800328c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800328e:	4c04      	ldr	r4, [pc, #16]	; (80032a0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003290:	460a      	mov	r2, r1
 8003292:	4804      	ldr	r0, [pc, #16]	; (80032a4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003294:	4621      	mov	r1, r4
 8003296:	f7ff fb6d 	bl	8002974 <USBD_GetString>
}
 800329a:	4620      	mov	r0, r4
 800329c:	bd10      	pop	{r4, pc}
 800329e:	bf00      	nop
 80032a0:	20001988 	.word	0x20001988
 80032a4:	08003fb2 	.word	0x08003fb2

080032a8 <USBD_FS_ProductStrDescriptor>:
{
 80032a8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80032aa:	4c04      	ldr	r4, [pc, #16]	; (80032bc <USBD_FS_ProductStrDescriptor+0x14>)
 80032ac:	460a      	mov	r2, r1
 80032ae:	4804      	ldr	r0, [pc, #16]	; (80032c0 <USBD_FS_ProductStrDescriptor+0x18>)
 80032b0:	4621      	mov	r1, r4
 80032b2:	f7ff fb5f 	bl	8002974 <USBD_GetString>
}
 80032b6:	4620      	mov	r0, r4
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	bf00      	nop
 80032bc:	20001988 	.word	0x20001988
 80032c0:	08003fb7 	.word	0x08003fb7

080032c4 <USBD_FS_ConfigStrDescriptor>:
{
 80032c4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80032c6:	4c04      	ldr	r4, [pc, #16]	; (80032d8 <USBD_FS_ConfigStrDescriptor+0x14>)
 80032c8:	460a      	mov	r2, r1
 80032ca:	4804      	ldr	r0, [pc, #16]	; (80032dc <USBD_FS_ConfigStrDescriptor+0x18>)
 80032cc:	4621      	mov	r1, r4
 80032ce:	f7ff fb51 	bl	8002974 <USBD_GetString>
}
 80032d2:	4620      	mov	r0, r4
 80032d4:	bd10      	pop	{r4, pc}
 80032d6:	bf00      	nop
 80032d8:	20001988 	.word	0x20001988
 80032dc:	08003f99 	.word	0x08003f99

080032e0 <USBD_FS_InterfaceStrDescriptor>:
{
 80032e0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80032e2:	4c04      	ldr	r4, [pc, #16]	; (80032f4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80032e4:	460a      	mov	r2, r1
 80032e6:	4804      	ldr	r0, [pc, #16]	; (80032f8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80032e8:	4621      	mov	r1, r4
 80032ea:	f7ff fb43 	bl	8002974 <USBD_GetString>
}
 80032ee:	4620      	mov	r0, r4
 80032f0:	bd10      	pop	{r4, pc}
 80032f2:	bf00      	nop
 80032f4:	20001988 	.word	0x20001988
 80032f8:	08003fa4 	.word	0x08003fa4

080032fc <STORAGE_Init_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
  /* USER CODE BEGIN 2 */
	if (lun == 0) {
 80032fc:	2800      	cmp	r0, #0
		return (USBD_OK);
	}
	return USBD_FAIL;
  /* USER CODE END 2 */
}
 80032fe:	bf14      	ite	ne
 8003300:	2002      	movne	r0, #2
 8003302:	2000      	moveq	r0, #0
 8003304:	4770      	bx	lr

08003306 <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8003306:	236f      	movs	r3, #111	; 0x6f
 8003308:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 800330a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  return (USBD_OK);
  /* USER CODE END 3 */
}
 800330e:	2000      	movs	r0, #0
  *block_size = STORAGE_BLK_SIZ;
 8003310:	8013      	strh	r3, [r2, #0]
}
 8003312:	4770      	bx	lr

08003314 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003314:	2000      	movs	r0, #0
 8003316:	4770      	bx	lr

08003318 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 8003318:	2000      	movs	r0, #0
 800331a:	4770      	bx	lr

0800331c <STORAGE_Write_FS>:
{
 800331c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331e:	460f      	mov	r7, r1
 8003320:	b087      	sub	sp, #28
 8003322:	4615      	mov	r5, r2
 8003324:	461e      	mov	r6, r3
	if(lun == 0) {
 8003326:	4604      	mov	r4, r0
 8003328:	b9f8      	cbnz	r0, 800336a <STORAGE_Write_FS+0x4e>
		HAL_FLASH_Unlock();
 800332a:	f7fd f80f 	bl	800034c <HAL_FLASH_Unlock>
		f.PageAddress = FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE ;
 800332e:	f505 3200 	add.w	r2, r5, #131072	; 0x20000
 8003332:	3211      	adds	r2, #17
		uint32_t PageError = 0;
 8003334:	a906      	add	r1, sp, #24
		f.PageAddress = FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE ;
 8003336:	0295      	lsls	r5, r2, #10
		uint32_t PageError = 0;
 8003338:	f841 4d14 	str.w	r4, [r1, #-20]!
		HAL_FLASHEx_Erase(&f, &PageError);
 800333c:	a802      	add	r0, sp, #8
		f.NbPages = blk_len;
 800333e:	9605      	str	r6, [sp, #20]
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 8003340:	9402      	str	r4, [sp, #8]
		f.PageAddress = FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE ;
 8003342:	9504      	str	r5, [sp, #16]
		HAL_FLASHEx_Erase(&f, &PageError);
 8003344:	f7fd f8b2 	bl	80004ac <HAL_FLASHEx_Erase>
		for(uint16_t i=0;i<blk_len*FLASH_PAGE_SIZE;i+=4) {
 8003348:	02b6      	lsls	r6, r6, #10
 800334a:	42b4      	cmp	r4, r6
 800334c:	d304      	bcc.n	8003358 <STORAGE_Write_FS+0x3c>
		HAL_FLASH_Lock();
 800334e:	f7fd f80f 	bl	8000370 <HAL_FLASH_Lock>
 8003352:	2000      	movs	r0, #0
}
 8003354:	b007      	add	sp, #28
 8003356:	bdf0      	pop	{r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i, *(volatile uint32_t *)(&buf[i]));
 8003358:	593a      	ldr	r2, [r7, r4]
 800335a:	1929      	adds	r1, r5, r4
 800335c:	2300      	movs	r3, #0
 800335e:	2002      	movs	r0, #2
		for(uint16_t i=0;i<blk_len*FLASH_PAGE_SIZE;i+=4) {
 8003360:	3404      	adds	r4, #4
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i, *(volatile uint32_t *)(&buf[i]));
 8003362:	f7fd f839 	bl	80003d8 <HAL_FLASH_Program>
		for(uint16_t i=0;i<blk_len*FLASH_PAGE_SIZE;i+=4) {
 8003366:	b2a4      	uxth	r4, r4
 8003368:	e7ef      	b.n	800334a <STORAGE_Write_FS+0x2e>
	return USBD_FAIL;
 800336a:	2002      	movs	r0, #2
 800336c:	e7f2      	b.n	8003354 <STORAGE_Write_FS+0x38>

0800336e <STORAGE_Read_FS>:
{
 800336e:	b538      	push	{r3, r4, r5, lr}
 8003370:	460d      	mov	r5, r1
	if(lun == 0) {
 8003372:	4604      	mov	r4, r0
 8003374:	b948      	cbnz	r0, 800338a <STORAGE_Read_FS+0x1c>
		memcpy(buf, (uint8_t *)(FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE), blk_len*FLASH_PAGE_SIZE);
 8003376:	f502 3100 	add.w	r1, r2, #131072	; 0x20000
 800337a:	3111      	adds	r1, #17
 800337c:	029a      	lsls	r2, r3, #10
 800337e:	0289      	lsls	r1, r1, #10
 8003380:	4628      	mov	r0, r5
 8003382:	f000 fdb7 	bl	8003ef4 <memcpy>
 8003386:	4620      	mov	r0, r4
 8003388:	bd38      	pop	{r3, r4, r5, pc}
	return USBD_FAIL;
 800338a:	2002      	movs	r0, #2
}
 800338c:	bd38      	pop	{r3, r4, r5, pc}

0800338e <STORAGE_IsReady_FS>:
 800338e:	2000      	movs	r0, #0
 8003390:	4770      	bx	lr

08003392 <disk_status>:
 8003392:	2000      	movs	r0, #0
 8003394:	4770      	bx	lr

08003396 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	return RES_OK;
}
 8003396:	2000      	movs	r0, #0
 8003398:	4770      	bx	lr

0800339a <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800339a:	b508      	push	{r3, lr}
 800339c:	4608      	mov	r0, r1
	memcpy(buff,(const void *)(FLASH_MSD_START_ADDR + sector*FLASH_PAGE_SIZE),count*FLASH_PAGE_SIZE);
 800339e:	f502 3100 	add.w	r1, r2, #131072	; 0x20000
 80033a2:	3111      	adds	r1, #17
 80033a4:	029a      	lsls	r2, r3, #10
 80033a6:	0289      	lsls	r1, r1, #10
 80033a8:	f000 fda4 	bl	8003ef4 <memcpy>
	return RES_OK;
}
 80033ac:	2000      	movs	r0, #0
 80033ae:	bd08      	pop	{r3, pc}

080033b0 <ld_dword>:
static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80033b0:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80033b2:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80033b4:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80033b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80033ba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80033be:	4770      	bx	lr

080033c0 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 80033c0:	b530      	push	{r4, r5, lr}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80033c2:	4604      	mov	r4, r0
	int r = 0;

	do {
		r = *d++ - *s++;
 80033c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80033c8:	f811 5b01 	ldrb.w	r5, [r1], #1
 80033cc:	1b5b      	subs	r3, r3, r5
 80033ce:	1b15      	subs	r5, r2, r4
	} while (--cnt && r == 0);
 80033d0:	42e8      	cmn	r0, r5
 80033d2:	d001      	beq.n	80033d8 <mem_cmp+0x18>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f5      	beq.n	80033c4 <mem_cmp+0x4>

	return r;
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd30      	pop	{r4, r5, pc}

080033dc <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80033dc:	68c3      	ldr	r3, [r0, #12]
	clst -= 2;		/* Cluster number is origin from 2 */
 80033de:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80033e0:	3b02      	subs	r3, #2
 80033e2:	4299      	cmp	r1, r3
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 80033e4:	bf3d      	ittte	cc
 80033e6:	8943      	ldrhcc	r3, [r0, #10]
 80033e8:	6a00      	ldrcc	r0, [r0, #32]
 80033ea:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80033ee:	2000      	movcs	r0, #0
}
 80033f0:	4770      	bx	lr

080033f2 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80033f2:	6802      	ldr	r2, [r0, #0]
 80033f4:	0a89      	lsrs	r1, r1, #10
 80033f6:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80033f8:	6a03      	ldr	r3, [r0, #32]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80033fa:	fbb1 f1f2 	udiv	r1, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80033fe:	3304      	adds	r3, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003400:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003402:	b130      	cbz	r0, 8003412 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8003404:	4281      	cmp	r1, r0
 8003406:	d302      	bcc.n	800340e <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003408:	1a09      	subs	r1, r1, r0
 800340a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800340c:	e7f8      	b.n	8003400 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800340e:	6858      	ldr	r0, [r3, #4]
 8003410:	4408      	add	r0, r1
}
 8003412:	4770      	bx	lr

08003414 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8003414:	6802      	ldr	r2, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
 8003416:	b14a      	cbz	r2, 800342c <get_ldnumber+0x18>
 8003418:	4613      	mov	r3, r2
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800341a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800341e:	2920      	cmp	r1, #32
 8003420:	d90b      	bls.n	800343a <get_ldnumber+0x26>
 8003422:	293a      	cmp	r1, #58	; 0x3a
 8003424:	d1f9      	bne.n	800341a <get_ldnumber+0x6>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8003426:	1c91      	adds	r1, r2, #2
 8003428:	428b      	cmp	r3, r1
 800342a:	d002      	beq.n	8003432 <get_ldnumber+0x1e>
	if (!tp) return vol;	/* Invalid path name? */
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
 8003430:	4770      	bx	lr
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	2a30      	cmp	r2, #48	; 0x30
 8003436:	d1f9      	bne.n	800342c <get_ldnumber+0x18>
			*path = tt;		/* Snip the drive prefix off */
 8003438:	6003      	str	r3, [r0, #0]
	return vol;		/* Return the default drive */
 800343a:	2000      	movs	r0, #0
 800343c:	4770      	bx	lr

0800343e <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800343e:	b538      	push	{r3, r4, r5, lr}
 8003440:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003442:	4604      	mov	r4, r0
 8003444:	b918      	cbnz	r0, 800344e <validate+0x10>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
 8003446:	2009      	movs	r0, #9
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003448:	2300      	movs	r3, #0
 800344a:	602b      	str	r3, [r5, #0]
	return res;
}
 800344c:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800344e:	6803      	ldr	r3, [r0, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f8      	beq.n	8003446 <validate+0x8>
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	2a00      	cmp	r2, #0
 8003458:	d0f5      	beq.n	8003446 <validate+0x8>
 800345a:	8881      	ldrh	r1, [r0, #4]
 800345c:	88da      	ldrh	r2, [r3, #6]
 800345e:	4291      	cmp	r1, r2
 8003460:	d1f1      	bne.n	8003446 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003462:	7858      	ldrb	r0, [r3, #1]
 8003464:	f7ff ff95 	bl	8003392 <disk_status>
 8003468:	f010 0001 	ands.w	r0, r0, #1
 800346c:	d1eb      	bne.n	8003446 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	e7eb      	b.n	800344a <validate+0xc>

08003472 <ld_clust.isra.2>:
	rv = rv << 8 | ptr[0];
 8003472:	7eca      	ldrb	r2, [r1, #27]
 8003474:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8003476:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8003478:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800347c:	bf01      	itttt	eq
 800347e:	7d48      	ldrbeq	r0, [r1, #21]
 8003480:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003482:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8003486:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800348a:	4618      	mov	r0, r3
 800348c:	4770      	bx	lr

0800348e <move_window>:
{
 800348e:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003490:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003492:	4605      	mov	r5, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003494:	428b      	cmp	r3, r1
{
 8003496:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003498:	d00e      	beq.n	80034b8 <move_window+0x2a>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800349a:	460a      	mov	r2, r1
 800349c:	2301      	movs	r3, #1
 800349e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80034a2:	7840      	ldrb	r0, [r0, #1]
 80034a4:	f7ff ff79 	bl	800339a <disk_read>
 80034a8:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80034aa:	bf16      	itet	ne
 80034ac:	f04f 34ff 	movne.w	r4, #4294967295
 80034b0:	2000      	moveq	r0, #0
 80034b2:	2001      	movne	r0, #1
			fs->winsect = sector;
 80034b4:	626c      	str	r4, [r5, #36]	; 0x24
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80034b8:	2000      	movs	r0, #0
}
 80034ba:	bd38      	pop	{r3, r4, r5, pc}

080034bc <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80034bc:	2300      	movs	r3, #0
{
 80034be:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80034c0:	70c3      	strb	r3, [r0, #3]
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	6243      	str	r3, [r0, #36]	; 0x24
{
 80034c8:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80034ca:	f7ff ffe0 	bl	800348e <move_window>
 80034ce:	bb18      	cbnz	r0, 8003518 <check_fs+0x5c>
	rv = rv << 8 | ptr[0];
 80034d0:	f894 2227 	ldrb.w	r2, [r4, #551]	; 0x227
 80034d4:	f894 3226 	ldrb.w	r3, [r4, #550]	; 0x226
 80034d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80034dc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d11b      	bne.n	800351c <check_fs+0x60>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80034e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80034e8:	2beb      	cmp	r3, #235	; 0xeb
 80034ea:	d003      	beq.n	80034f4 <check_fs+0x38>
 80034ec:	3318      	adds	r3, #24
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d815      	bhi.n	8003520 <check_fs+0x64>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 80034f4:	2203      	movs	r2, #3
 80034f6:	490b      	ldr	r1, [pc, #44]	; (8003524 <check_fs+0x68>)
 80034f8:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 80034fc:	f7ff ff60 	bl	80033c0 <mem_cmp>
 8003500:	b178      	cbz	r0, 8003522 <check_fs+0x66>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8003502:	2205      	movs	r2, #5
 8003504:	4908      	ldr	r1, [pc, #32]	; (8003528 <check_fs+0x6c>)
 8003506:	f104 007a 	add.w	r0, r4, #122	; 0x7a
 800350a:	f7ff ff59 	bl	80033c0 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800350e:	2800      	cmp	r0, #0
 8003510:	bf14      	ite	ne
 8003512:	2002      	movne	r0, #2
 8003514:	2000      	moveq	r0, #0
 8003516:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003518:	2004      	movs	r0, #4
 800351a:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 800351c:	2003      	movs	r0, #3
 800351e:	bd10      	pop	{r4, pc}
	return 2;	/* Valid BS but not FAT */
 8003520:	2002      	movs	r0, #2
}
 8003522:	bd10      	pop	{r4, pc}
 8003524:	08004060 	.word	0x08004060
 8003528:	08004064 	.word	0x08004064

0800352c <find_volume.isra.5>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 800352c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	600b      	str	r3, [r1, #0]
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 8003534:	460e      	mov	r6, r1
	vol = get_ldnumber(path);
 8003536:	f7ff ff6d 	bl	8003414 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800353a:	1e05      	subs	r5, r0, #0
 800353c:	f2c0 80bd 	blt.w	80036ba <find_volume.isra.5+0x18e>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8003540:	4b75      	ldr	r3, [pc, #468]	; (8003718 <find_volume.isra.5+0x1ec>)
 8003542:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8003546:	2c00      	cmp	r4, #0
 8003548:	f000 80b9 	beq.w	80036be <find_volume.isra.5+0x192>
	*rfs = fs;							/* Return pointer to the filesystem object */
 800354c:	6034      	str	r4, [r6, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800354e:	7823      	ldrb	r3, [r4, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f040 8098 	bne.w	8003686 <find_volume.isra.5+0x15a>
	fs->fs_type = 0;					/* Clear the filesystem object */
 8003556:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003558:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the filesystem object */
 800355a:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800355c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 800355e:	f7ff ff1a 	bl	8003396 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003562:	f010 0501 	ands.w	r5, r0, #1
 8003566:	f040 80ac 	bne.w	80036c2 <find_volume.isra.5+0x196>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800356a:	4629      	mov	r1, r5
 800356c:	4620      	mov	r0, r4
 800356e:	f7ff ffa5 	bl	80034bc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003572:	2802      	cmp	r0, #2
 8003574:	f040 809a 	bne.w	80036ac <find_volume.isra.5+0x180>
 8003578:	f504 71f7 	add.w	r1, r4, #494	; 0x1ee
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800357c:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8003580:	b110      	cbz	r0, 8003588 <find_volume.isra.5+0x5c>
 8003582:	4608      	mov	r0, r1
 8003584:	f7ff ff14 	bl	80033b0 <ld_dword>
 8003588:	f84d 0025 	str.w	r0, [sp, r5, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800358c:	3501      	adds	r5, #1
 800358e:	2d04      	cmp	r5, #4
 8003590:	f101 0110 	add.w	r1, r1, #16
 8003594:	d1f2      	bne.n	800357c <find_volume.isra.5+0x50>
 8003596:	2600      	movs	r6, #0
			bsect = br[i];
 8003598:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800359c:	2d00      	cmp	r5, #0
 800359e:	d07c      	beq.n	800369a <find_volume.isra.5+0x16e>
 80035a0:	4629      	mov	r1, r5
 80035a2:	4620      	mov	r0, r4
 80035a4:	f7ff ff8a 	bl	80034bc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80035a8:	2801      	cmp	r0, #1
 80035aa:	d877      	bhi.n	800369c <find_volume.isra.5+0x170>
	rv = rv << 8 | ptr[0];
 80035ac:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80035b0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80035b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035bc:	d17b      	bne.n	80036b6 <find_volume.isra.5+0x18a>
	rv = rv << 8 | ptr[0];
 80035be:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80035c2:	f894 603e 	ldrb.w	r6, [r4, #62]	; 0x3e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80035c6:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 80035ca:	d104      	bne.n	80035d6 <find_volume.isra.5+0xaa>
 80035cc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80035d0:	f7ff feee 	bl	80033b0 <ld_dword>
 80035d4:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80035d6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
		fs->fsize = fasize;
 80035da:	6126      	str	r6, [r4, #16]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80035dc:	1e4b      	subs	r3, r1, #1
 80035de:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80035e0:	70a1      	strb	r1, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80035e2:	d868      	bhi.n	80036b6 <find_volume.isra.5+0x18a>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80035e4:	f894 8035 	ldrb.w	r8, [r4, #53]	; 0x35
 80035e8:	fa1f f388 	uxth.w	r3, r8
 80035ec:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d061      	beq.n	80036b6 <find_volume.isra.5+0x18a>
 80035f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80035f6:	ea13 0f08 	tst.w	r3, r8
 80035fa:	d15c      	bne.n	80036b6 <find_volume.isra.5+0x18a>
	rv = rv << 8 | ptr[0];
 80035fc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8003600:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
 8003604:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003608:	06fb      	lsls	r3, r7, #27
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800360a:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800360c:	d153      	bne.n	80036b6 <find_volume.isra.5+0x18a>
	rv = rv << 8 | ptr[0];
 800360e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003612:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003616:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 800361a:	d103      	bne.n	8003624 <find_volume.isra.5+0xf8>
 800361c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8003620:	f7ff fec6 	bl	80033b0 <ld_dword>
	rv = rv << 8 | ptr[0];
 8003624:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 8003628:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800362c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8003630:	d041      	beq.n	80036b6 <find_volume.isra.5+0x18a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003632:	fb06 fe01 	mul.w	lr, r6, r1
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003636:	eb03 1257 	add.w	r2, r3, r7, lsr #5
 800363a:	4472      	add	r2, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800363c:	4282      	cmp	r2, r0
 800363e:	d83a      	bhi.n	80036b6 <find_volume.isra.5+0x18a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003640:	1a80      	subs	r0, r0, r2
 8003642:	fbb0 f0f8 	udiv	r0, r0, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003646:	4935      	ldr	r1, [pc, #212]	; (800371c <find_volume.isra.5+0x1f0>)
 8003648:	f100 3cff 	add.w	ip, r0, #4294967295
 800364c:	458c      	cmp	ip, r1
 800364e:	d832      	bhi.n	80036b6 <find_volume.isra.5+0x18a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003650:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8003654:	4288      	cmp	r0, r1
 8003656:	442b      	add	r3, r5
 8003658:	f100 0102 	add.w	r1, r0, #2
 800365c:	442a      	add	r2, r5
 800365e:	d832      	bhi.n	80036c6 <find_volume.isra.5+0x19a>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003660:	f640 7cf5 	movw	ip, #4085	; 0xff5
 8003664:	4560      	cmp	r0, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003666:	60e1      	str	r1, [r4, #12]
		fs->volbase = bsect;							/* Volume start sector */
 8003668:	6165      	str	r5, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800366a:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800366c:	6222      	str	r2, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800366e:	d84c      	bhi.n	800370a <find_volume.isra.5+0x1de>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003670:	b30f      	cbz	r7, 80036b6 <find_volume.isra.5+0x18a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003672:	4473      	add	r3, lr
 8003674:	61e3      	str	r3, [r4, #28]
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003676:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800367a:	f001 0101 	and.w	r1, r1, #1
 800367e:	eb01 0153 	add.w	r1, r1, r3, lsr #1
 8003682:	2301      	movs	r3, #1
 8003684:	e033      	b.n	80036ee <find_volume.isra.5+0x1c2>
		stat = disk_status(fs->pdrv);
 8003686:	7860      	ldrb	r0, [r4, #1]
 8003688:	f7ff fe83 	bl	8003392 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800368c:	f010 0001 	ands.w	r0, r0, #1
 8003690:	f47f af61 	bne.w	8003556 <find_volume.isra.5+0x2a>
}
 8003694:	b004      	add	sp, #16
 8003696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800369a:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800369c:	3601      	adds	r6, #1
 800369e:	2e04      	cmp	r6, #4
 80036a0:	f47f af7a 	bne.w	8003598 <find_volume.isra.5+0x6c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80036a4:	2804      	cmp	r0, #4
 80036a6:	d106      	bne.n	80036b6 <find_volume.isra.5+0x18a>
 80036a8:	2001      	movs	r0, #1
 80036aa:	e7f3      	b.n	8003694 <find_volume.isra.5+0x168>
 80036ac:	2804      	cmp	r0, #4
 80036ae:	d0fb      	beq.n	80036a8 <find_volume.isra.5+0x17c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80036b0:	2801      	cmp	r0, #1
 80036b2:	f67f af7b 	bls.w	80035ac <find_volume.isra.5+0x80>
 80036b6:	200d      	movs	r0, #13
 80036b8:	e7ec      	b.n	8003694 <find_volume.isra.5+0x168>
	if (vol < 0) return FR_INVALID_DRIVE;
 80036ba:	200b      	movs	r0, #11
 80036bc:	e7ea      	b.n	8003694 <find_volume.isra.5+0x168>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80036be:	200c      	movs	r0, #12
 80036c0:	e7e8      	b.n	8003694 <find_volume.isra.5+0x168>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80036c2:	2003      	movs	r0, #3
 80036c4:	e7e6      	b.n	8003694 <find_volume.isra.5+0x168>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80036c6:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 80036c8:	6222      	str	r2, [r4, #32]
	rv = rv << 8 | ptr[0];
 80036ca:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80036ce:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80036d2:	60e1      	str	r1, [r4, #12]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80036d4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
		fs->volbase = bsect;							/* Volume start sector */
 80036d8:	6165      	str	r5, [r4, #20]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80036da:	d1ec      	bne.n	80036b6 <find_volume.isra.5+0x18a>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80036dc:	2f00      	cmp	r7, #0
 80036de:	d1ea      	bne.n	80036b6 <find_volume.isra.5+0x18a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80036e0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80036e4:	f7ff fe64 	bl	80033b0 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80036e8:	2303      	movs	r3, #3
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80036ea:	61e0      	str	r0, [r4, #28]
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80036ec:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80036ee:	f201 31ff 	addw	r1, r1, #1023	; 0x3ff
 80036f2:	ebb6 2f91 	cmp.w	r6, r1, lsr #10
 80036f6:	d3de      	bcc.n	80036b6 <find_volume.isra.5+0x18a>
	fs->id = ++Fsid;		/* Volume mount ID */
 80036f8:	4a09      	ldr	r2, [pc, #36]	; (8003720 <find_volume.isra.5+0x1f4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80036fa:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80036fc:	8813      	ldrh	r3, [r2, #0]
	return FR_OK;
 80036fe:	2000      	movs	r0, #0
	fs->id = ++Fsid;		/* Volume mount ID */
 8003700:	3301      	adds	r3, #1
 8003702:	b29b      	uxth	r3, r3
 8003704:	8013      	strh	r3, [r2, #0]
 8003706:	80e3      	strh	r3, [r4, #6]
 8003708:	e7c4      	b.n	8003694 <find_volume.isra.5+0x168>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800370a:	2f00      	cmp	r7, #0
 800370c:	d0d3      	beq.n	80036b6 <find_volume.isra.5+0x18a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800370e:	4473      	add	r3, lr
 8003710:	61e3      	str	r3, [r4, #28]
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003712:	0049      	lsls	r1, r1, #1
 8003714:	2302      	movs	r3, #2
 8003716:	e7ea      	b.n	80036ee <find_volume.isra.5+0x1c2>
 8003718:	200005b0 	.word	0x200005b0
 800371c:	0ffffff4 	.word	0x0ffffff4
 8003720:	200005b4 	.word	0x200005b4

08003724 <get_fat.isra.6>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003724:	2901      	cmp	r1, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8003726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003728:	4604      	mov	r4, r0
 800372a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800372c:	d953      	bls.n	80037d6 <get_fat.isra.6+0xb2>
 800372e:	68c3      	ldr	r3, [r0, #12]
 8003730:	4299      	cmp	r1, r3
 8003732:	d250      	bcs.n	80037d6 <get_fat.isra.6+0xb2>
		switch (fs->fs_type) {
 8003734:	7803      	ldrb	r3, [r0, #0]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d029      	beq.n	800378e <get_fat.isra.6+0x6a>
 800373a:	2b03      	cmp	r3, #3
 800373c:	d039      	beq.n	80037b2 <get_fat.isra.6+0x8e>
 800373e:	2b01      	cmp	r3, #1
 8003740:	d149      	bne.n	80037d6 <get_fat.isra.6+0xb2>
			bc = (UINT)clst; bc += bc / 2;
 8003742:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003746:	6981      	ldr	r1, [r0, #24]
 8003748:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 800374c:	f7ff fe9f 	bl	800348e <move_window>
 8003750:	b110      	cbz	r0, 8003758 <get_fat.isra.6+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003752:	f04f 30ff 	mov.w	r0, #4294967295
 8003756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003758:	69a1      	ldr	r1, [r4, #24]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800375a:	1c6f      	adds	r7, r5, #1
 800375c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003760:	4425      	add	r5, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003762:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8003766:	4620      	mov	r0, r4
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8003768:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800376c:	f7ff fe8f 	bl	800348e <move_window>
 8003770:	2800      	cmp	r0, #0
 8003772:	d1ee      	bne.n	8003752 <get_fat.isra.6+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8003774:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003778:	443c      	add	r4, r7
 800377a:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800377e:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8003780:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8003784:	bf4c      	ite	mi
 8003786:	0900      	lsrmi	r0, r0, #4
 8003788:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800378c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800378e:	6981      	ldr	r1, [r0, #24]
 8003790:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8003794:	f7ff fe7b 	bl	800348e <move_window>
 8003798:	2800      	cmp	r0, #0
 800379a:	d1da      	bne.n	8003752 <get_fat.isra.6+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800379c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80037a0:	3428      	adds	r4, #40	; 0x28
 80037a2:	ea03 0346 	and.w	r3, r3, r6, lsl #1
 80037a6:	18e2      	adds	r2, r4, r3
	rv = rv << 8 | ptr[0];
 80037a8:	7852      	ldrb	r2, [r2, #1]
 80037aa:	5ce0      	ldrb	r0, [r4, r3]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80037ac:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80037b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80037b2:	6981      	ldr	r1, [r0, #24]
 80037b4:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80037b8:	f7ff fe69 	bl	800348e <move_window>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d1c8      	bne.n	8003752 <get_fat.isra.6+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80037c0:	00b3      	lsls	r3, r6, #2
 80037c2:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80037c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80037ca:	4418      	add	r0, r3
 80037cc:	f7ff fdf0 	bl	80033b0 <ld_dword>
 80037d0:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80037d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 80037d6:	2001      	movs	r0, #1
}
 80037d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037da <dir_next.isra.7>:
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 80037da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80037dc:	6906      	ldr	r6, [r0, #16]
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 80037de:	4604      	mov	r4, r0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80037e0:	3620      	adds	r6, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80037e2:	f5b6 1f00 	cmp.w	r6, #2097152	; 0x200000
 80037e6:	bf24      	itt	cs
 80037e8:	2300      	movcs	r3, #0
 80037ea:	6183      	strcs	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80037ec:	6983      	ldr	r3, [r0, #24]
	FATFS *fs = dp->obj.fs;
 80037ee:	6805      	ldr	r5, [r0, #0]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80037f0:	b163      	cbz	r3, 800380c <dir_next.isra.7+0x32>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80037f2:	f3c6 0709 	ubfx	r7, r6, #0, #10
 80037f6:	bb07      	cbnz	r7, 800383a <dir_next.isra.7+0x60>
		if (dp->clust == 0) {	/* Static table */
 80037f8:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
 80037fa:	3301      	adds	r3, #1
 80037fc:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
 80037fe:	b939      	cbnz	r1, 8003810 <dir_next.isra.7+0x36>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003800:	892b      	ldrh	r3, [r5, #8]
 8003802:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8003806:	d818      	bhi.n	800383a <dir_next.isra.7+0x60>
				dp->sect = 0; return FR_NO_FILE;
 8003808:	2300      	movs	r3, #0
 800380a:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800380c:	2004      	movs	r0, #4
 800380e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003810:	896b      	ldrh	r3, [r5, #10]
 8003812:	3b01      	subs	r3, #1
 8003814:	ea13 2396 	ands.w	r3, r3, r6, lsr #10
 8003818:	d10f      	bne.n	800383a <dir_next.isra.7+0x60>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800381a:	4628      	mov	r0, r5
 800381c:	f7ff ff82 	bl	8003724 <get_fat.isra.6>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003820:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8003822:	4601      	mov	r1, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003824:	d90f      	bls.n	8003846 <dir_next.isra.7+0x6c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003826:	1c43      	adds	r3, r0, #1
 8003828:	d00f      	beq.n	800384a <dir_next.isra.7+0x70>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800382a:	68eb      	ldr	r3, [r5, #12]
 800382c:	4298      	cmp	r0, r3
 800382e:	d2eb      	bcs.n	8003808 <dir_next.isra.7+0x2e>
				dp->clust = clst;		/* Initialize data for new cluster */
 8003830:	6160      	str	r0, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 8003832:	4628      	mov	r0, r5
 8003834:	f7ff fdd2 	bl	80033dc <clst2sect>
 8003838:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800383a:	3528      	adds	r5, #40	; 0x28
 800383c:	443d      	add	r5, r7
	dp->dptr = ofs;						/* Current entry */
 800383e:	6126      	str	r6, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003840:	61e5      	str	r5, [r4, #28]
	return FR_OK;
 8003842:	2000      	movs	r0, #0
 8003844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003846:	2002      	movs	r0, #2
 8003848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800384a:	2001      	movs	r0, #1
}
 800384c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800384e <dir_sdi.constprop.9>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800384e:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8003850:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003852:	6882      	ldr	r2, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003854:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003856:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8003858:	6103      	str	r3, [r0, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800385a:	b992      	cbnz	r2, 8003882 <dir_sdi.constprop.9+0x34>
 800385c:	7823      	ldrb	r3, [r4, #0]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <dir_sdi.constprop.9+0x18>
		clst = fs->dirbase;
 8003862:	69e3      	ldr	r3, [r4, #28]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8003864:	b973      	cbnz	r3, 8003884 <dir_sdi.constprop.9+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8003866:	8923      	ldrh	r3, [r4, #8]
 8003868:	b90b      	cbnz	r3, 800386e <dir_sdi.constprop.9+0x20>
 800386a:	2002      	movs	r0, #2
 800386c:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 800386e:	69e3      	ldr	r3, [r4, #28]
 8003870:	61ab      	str	r3, [r5, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 8003872:	69ab      	ldr	r3, [r5, #24]
	dp->clust = clst;					/* Current cluster# */
 8003874:	616a      	str	r2, [r5, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f7      	beq.n	800386a <dir_sdi.constprop.9+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800387a:	3428      	adds	r4, #40	; 0x28
 800387c:	61ec      	str	r4, [r5, #28]
	return FR_OK;
 800387e:	2000      	movs	r0, #0
 8003880:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003882:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003884:	8961      	ldrh	r1, [r4, #10]
 8003886:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8003888:	b961      	cbnz	r1, 80038a4 <dir_sdi.constprop.9+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800388a:	4611      	mov	r1, r2
 800388c:	6828      	ldr	r0, [r5, #0]
 800388e:	f7ff ff49 	bl	8003724 <get_fat.isra.6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003892:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003894:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003896:	d00b      	beq.n	80038b0 <dir_sdi.constprop.9+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003898:	2801      	cmp	r0, #1
 800389a:	d9e6      	bls.n	800386a <dir_sdi.constprop.9+0x1c>
 800389c:	68e3      	ldr	r3, [r4, #12]
 800389e:	4298      	cmp	r0, r3
 80038a0:	d3f3      	bcc.n	800388a <dir_sdi.constprop.9+0x3c>
 80038a2:	e7e2      	b.n	800386a <dir_sdi.constprop.9+0x1c>
		dp->sect = clst2sect(fs, clst);
 80038a4:	4619      	mov	r1, r3
 80038a6:	4620      	mov	r0, r4
 80038a8:	f7ff fd98 	bl	80033dc <clst2sect>
 80038ac:	61a8      	str	r0, [r5, #24]
 80038ae:	e7e0      	b.n	8003872 <dir_sdi.constprop.9+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80038b0:	2001      	movs	r0, #1
}
 80038b2:	bd38      	pop	{r3, r4, r5, pc}

080038b4 <follow_path>:
{
 80038b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80038ba:	f8d0 8000 	ldr.w	r8, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80038be:	780b      	ldrb	r3, [r1, #0]
 80038c0:	460e      	mov	r6, r1
 80038c2:	2b2f      	cmp	r3, #47	; 0x2f
 80038c4:	f101 0101 	add.w	r1, r1, #1
 80038c8:	d0f9      	beq.n	80038be <follow_path+0xa>
 80038ca:	2b5c      	cmp	r3, #92	; 0x5c
 80038cc:	d0f7      	beq.n	80038be <follow_path+0xa>
		dp->obj.sclust = 0;					/* Start from root directory */
 80038ce:	2300      	movs	r3, #0
 80038d0:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80038d2:	7833      	ldrb	r3, [r6, #0]
 80038d4:	2b1f      	cmp	r3, #31
 80038d6:	d94f      	bls.n	8003978 <follow_path+0xc4>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 80038d8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8003a18 <follow_path+0x164>
	p = *path; sfn = dp->fn;
 80038dc:	f104 0720 	add.w	r7, r4, #32
	BYTE *d = (BYTE*)dst;
 80038e0:	463b      	mov	r3, r7
		*d++ = (BYTE)val;
 80038e2:	2120      	movs	r1, #32
 80038e4:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 80038e8:	f803 1b01 	strb.w	r1, [r3], #1
	} while (--cnt);
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d1fb      	bne.n	80038e8 <follow_path+0x34>
 80038f0:	2200      	movs	r2, #0
 80038f2:	2008      	movs	r0, #8
 80038f4:	4611      	mov	r1, r2
 80038f6:	1e75      	subs	r5, r6, #1
		c = (BYTE)p[si++];				/* Get a byte */
 80038f8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80038fc:	3101      	adds	r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d909      	bls.n	8003916 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003902:	2b2f      	cmp	r3, #47	; 0x2f
 8003904:	d140      	bne.n	8003988 <follow_path+0xd4>
 8003906:	1870      	adds	r0, r6, r1
 8003908:	1b81      	subs	r1, r0, r6
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800390a:	f810 5b01 	ldrb.w	r5, [r0], #1
 800390e:	2d2f      	cmp	r5, #47	; 0x2f
 8003910:	d0fa      	beq.n	8003908 <follow_path+0x54>
 8003912:	2d5c      	cmp	r5, #92	; 0x5c
 8003914:	d0f8      	beq.n	8003908 <follow_path+0x54>
	*path = p + si;						/* Return pointer to the next segment */
 8003916:	440e      	add	r6, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003918:	2a00      	cmp	r2, #0
 800391a:	d04b      	beq.n	80039b4 <follow_path+0x100>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800391c:	f894 2020 	ldrb.w	r2, [r4, #32]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003920:	4620      	mov	r0, r4
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003922:	2ae5      	cmp	r2, #229	; 0xe5
 8003924:	bf04      	itt	eq
 8003926:	2205      	moveq	r2, #5
 8003928:	f884 2020 	strbeq.w	r2, [r4, #32]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800392c:	2b21      	cmp	r3, #33	; 0x21
 800392e:	bf34      	ite	cc
 8003930:	2304      	movcc	r3, #4
 8003932:	2300      	movcs	r3, #0
 8003934:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	FATFS *fs = dp->obj.fs;
 8003938:	f8d4 a000 	ldr.w	sl, [r4]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800393c:	f7ff ff87 	bl	800384e <dir_sdi.constprop.9>
	if (res != FR_OK) return res;
 8003940:	4605      	mov	r5, r0
 8003942:	2800      	cmp	r0, #0
 8003944:	d139      	bne.n	80039ba <follow_path+0x106>
		res = move_window(fs, dp->sect);
 8003946:	69a1      	ldr	r1, [r4, #24]
 8003948:	4650      	mov	r0, sl
 800394a:	f7ff fda0 	bl	800348e <move_window>
		if (res != FR_OK) break;
 800394e:	4605      	mov	r5, r0
 8003950:	bb98      	cbnz	r0, 80039ba <follow_path+0x106>
		c = dp->dir[DIR_Name];
 8003952:	69e0      	ldr	r0, [r4, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003954:	7803      	ldrb	r3, [r0, #0]
 8003956:	b37b      	cbz	r3, 80039b8 <follow_path+0x104>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003958:	7ac3      	ldrb	r3, [r0, #11]
 800395a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395e:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003960:	7ac3      	ldrb	r3, [r0, #11]
 8003962:	0719      	lsls	r1, r3, #28
 8003964:	d404      	bmi.n	8003970 <follow_path+0xbc>
 8003966:	220b      	movs	r2, #11
 8003968:	4639      	mov	r1, r7
 800396a:	f7ff fd29 	bl	80033c0 <mem_cmp>
 800396e:	b320      	cbz	r0, 80039ba <follow_path+0x106>
		res = dir_next(dp, 0);	/* Next entry */
 8003970:	4620      	mov	r0, r4
 8003972:	f7ff ff32 	bl	80037da <dir_next.isra.7>
 8003976:	e7e3      	b.n	8003940 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800397e:	4620      	mov	r0, r4
}
 8003980:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		res = dir_sdi(dp, 0);
 8003984:	f7ff bf63 	b.w	800384e <dir_sdi.constprop.9>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003988:	2b5c      	cmp	r3, #92	; 0x5c
 800398a:	d0bc      	beq.n	8003906 <follow_path+0x52>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800398c:	2b2e      	cmp	r3, #46	; 0x2e
 800398e:	d033      	beq.n	80039f8 <follow_path+0x144>
 8003990:	4290      	cmp	r0, r2
 8003992:	d90f      	bls.n	80039b4 <follow_path+0x100>
		if (c >= 0x80) {				/* Is SBC extended character? */
 8003994:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8003998:	bf1c      	itt	ne
 800399a:	f003 037f 	andne.w	r3, r3, #127	; 0x7f
 800399e:	f819 3003 	ldrbne.w	r3, [r9, r3]
 80039a2:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003a1c <follow_path+0x168>
	while (*str && *str != chr) str++;
 80039a6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80039aa:	f1be 0f00 	cmp.w	lr, #0
 80039ae:	d028      	beq.n	8003a02 <follow_path+0x14e>
 80039b0:	4573      	cmp	r3, lr
 80039b2:	d1f8      	bne.n	80039a6 <follow_path+0xf2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80039b4:	2506      	movs	r5, #6
	return res;
 80039b6:	e009      	b.n	80039cc <follow_path+0x118>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80039b8:	2504      	movs	r5, #4
			ns = dp->fn[NSFLAG];
 80039ba:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 80039be:	b145      	cbz	r5, 80039d2 <follow_path+0x11e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80039c0:	2d04      	cmp	r5, #4
 80039c2:	d103      	bne.n	80039cc <follow_path+0x118>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80039c4:	f013 0f04 	tst.w	r3, #4
 80039c8:	bf08      	it	eq
 80039ca:	2505      	moveq	r5, #5
}
 80039cc:	4628      	mov	r0, r5
 80039ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80039d2:	075a      	lsls	r2, r3, #29
 80039d4:	d4fa      	bmi.n	80039cc <follow_path+0x118>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80039d6:	79a3      	ldrb	r3, [r4, #6]
 80039d8:	06db      	lsls	r3, r3, #27
 80039da:	d50b      	bpl.n	80039f4 <follow_path+0x140>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80039dc:	6923      	ldr	r3, [r4, #16]
 80039de:	f108 0128 	add.w	r1, r8, #40	; 0x28
 80039e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e6:	f898 0000 	ldrb.w	r0, [r8]
 80039ea:	4419      	add	r1, r3
 80039ec:	f7ff fd41 	bl	8003472 <ld_clust.isra.2>
 80039f0:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80039f2:	e773      	b.n	80038dc <follow_path+0x28>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80039f4:	2505      	movs	r5, #5
 80039f6:	e7e9      	b.n	80039cc <follow_path+0x118>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80039f8:	280b      	cmp	r0, #11
 80039fa:	d0db      	beq.n	80039b4 <follow_path+0x100>
			i = 8; ni = 11;				/* Enter file extension field */
 80039fc:	2208      	movs	r2, #8
 80039fe:	200b      	movs	r0, #11
 8003a00:	e77a      	b.n	80038f8 <follow_path+0x44>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003a02:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 8003a06:	f1be 0f19 	cmp.w	lr, #25
 8003a0a:	d801      	bhi.n	8003a10 <follow_path+0x15c>
 8003a0c:	3b20      	subs	r3, #32
 8003a0e:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8003a10:	54bb      	strb	r3, [r7, r2]
 8003a12:	3201      	adds	r2, #1
 8003a14:	e770      	b.n	80038f8 <follow_path+0x44>
 8003a16:	bf00      	nop
 8003a18:	08003fe0 	.word	0x08003fe0
 8003a1c:	08004069 	.word	0x08004069

08003a20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a22:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003a24:	a804      	add	r0, sp, #16
 8003a26:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8003a2a:	9100      	str	r1, [sp, #0]
 8003a2c:	4614      	mov	r4, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003a2e:	f7ff fcf1 	bl	8003414 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a32:	2800      	cmp	r0, #0
 8003a34:	db12      	blt.n	8003a5c <f_mount+0x3c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <f_mount+0x44>)
 8003a38:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

	if (cfs) {
 8003a3c:	b10a      	cbz	r2, 8003a42 <f_mount+0x22>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003a3e:	2100      	movs	r1, #0
 8003a40:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {
 8003a42:	9a01      	ldr	r2, [sp, #4]
 8003a44:	b10a      	cbz	r2, 8003a4a <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
 8003a46:	2100      	movs	r1, #0
 8003a48:	7011      	strb	r1, [r2, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003a4a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8003a4e:	b13c      	cbz	r4, 8003a60 <f_mount+0x40>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003a50:	a901      	add	r1, sp, #4
 8003a52:	4668      	mov	r0, sp
 8003a54:	f7ff fd6a 	bl	800352c <find_volume.isra.5>
	LEAVE_FF(fs, res);
}
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a5c:	200b      	movs	r0, #11
 8003a5e:	e7fb      	b.n	8003a58 <f_mount+0x38>
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8003a60:	4620      	mov	r0, r4
 8003a62:	e7f9      	b.n	8003a58 <f_mount+0x38>
 8003a64:	200005b0 	.word	0x200005b0

08003a68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	b08e      	sub	sp, #56	; 0x38
 8003a6e:	9101      	str	r1, [sp, #4]
 8003a70:	4616      	mov	r6, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003a72:	4605      	mov	r5, r0
 8003a74:	b370      	cbz	r0, 8003ad4 <f_open+0x6c>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
	res = find_volume(&path, &fs, mode);
 8003a76:	a902      	add	r1, sp, #8
 8003a78:	a801      	add	r0, sp, #4
 8003a7a:	f7ff fd57 	bl	800352c <find_volume.isra.5>
	if (res == FR_OK) {
 8003a7e:	4604      	mov	r4, r0
 8003a80:	bb70      	cbnz	r0, 8003ae0 <f_open+0x78>
		dj.obj.fs = fs;
 8003a82:	9b02      	ldr	r3, [sp, #8]
 8003a84:	a80e      	add	r0, sp, #56	; 0x38
 8003a86:	f840 3d2c 	str.w	r3, [r0, #-44]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003a8a:	9901      	ldr	r1, [sp, #4]
 8003a8c:	f7ff ff12 	bl	80038b4 <follow_path>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
#endif
		}
#else		/* R/O configuration */
		if (res == FR_OK) {
 8003a90:	4604      	mov	r4, r0
 8003a92:	bb28      	cbnz	r0, 8003ae0 <f_open+0x78>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
 8003a94:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	db20      	blt.n	8003ade <f_open+0x76>
				res = FR_INVALID_NAME;
			} else {
				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
 8003a9c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003aa0:	06db      	lsls	r3, r3, #27
 8003aa2:	d420      	bmi.n	8003ae6 <f_open+0x7e>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003aa4:	9f02      	ldr	r7, [sp, #8]
 8003aa6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8003aaa:	7838      	ldrb	r0, [r7, #0]
 8003aac:	4641      	mov	r1, r8
 8003aae:	f7ff fce0 	bl	8003472 <ld_clust.isra.2>
 8003ab2:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003ab4:	f108 001c 	add.w	r0, r8, #28
 8003ab8:	f7ff fc7a 	bl	80033b0 <ld_dword>
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
			fp->obj.id = fs->id;
 8003abc:	88fb      	ldrh	r3, [r7, #6]
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8003abe:	f006 0601 	and.w	r6, r6, #1
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003ac2:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003ac4:	622c      	str	r4, [r5, #32]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003ac6:	602f      	str	r7, [r5, #0]
			fp->obj.id = fs->id;
 8003ac8:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8003aca:	742e      	strb	r6, [r5, #16]
			fp->err = 0;			/* Clear error flag */
 8003acc:	746c      	strb	r4, [r5, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8003ace:	61ec      	str	r4, [r5, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003ad0:	616c      	str	r4, [r5, #20]
 8003ad2:	e000      	b.n	8003ad6 <f_open+0x6e>
	if (!fp) return FR_INVALID_OBJECT;
 8003ad4:	2409      	movs	r4, #9
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	b00e      	add	sp, #56	; 0x38
 8003ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 8003ade:	2406      	movs	r4, #6
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	e7f7      	b.n	8003ad6 <f_open+0x6e>
					res = FR_NO_FILE;
 8003ae6:	2404      	movs	r4, #4
 8003ae8:	e7fa      	b.n	8003ae0 <f_open+0x78>

08003aea <f_read_byte>:

FRESULT f_read_byte (
	FIL* fp, 		/* Pointer to the file object */
	uint8_t* buff		/* Pointer to data buffer */
)
{
 8003aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//res = validate(&fp->obj, &fs);
	//if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
	//if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);

	if (fp->obj.objsize - fp->fptr<=0) {
 8003aec:	68c2      	ldr	r2, [r0, #12]
 8003aee:	6943      	ldr	r3, [r0, #20]
{
 8003af0:	4604      	mov	r4, r0
	if (fp->obj.objsize - fp->fptr<=0) {
 8003af2:	429a      	cmp	r2, r3
{
 8003af4:	460d      	mov	r5, r1
	if (fp->obj.objsize - fp->fptr<=0) {
 8003af6:	d043      	beq.n	8003b80 <f_read_byte+0x96>
		LEAVE_FF(fs, FR_DISK_ERR);
	}

	if ((fp->fptr % SS(fs)) == 0) {
 8003af8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	d130      	bne.n	8003b62 <f_read_byte+0x78>
	FATFS *fs = fp->obj.fs;
 8003b00:	6807      	ldr	r7, [r0, #0]
		UINT csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));
 8003b02:	0a98      	lsrs	r0, r3, #10
 8003b04:	897a      	ldrh	r2, [r7, #10]
 8003b06:	1e56      	subs	r6, r2, #1
		//count_tic1 = DWT_CYCCNT1;
		//DWT_CYCCNT1 = 0;
		if (csect == 0) {
 8003b08:	4006      	ands	r6, r0
 8003b0a:	d11d      	bne.n	8003b48 <f_read_byte+0x5e>
			DWORD clst;
			if (fp->fptr == 0) {
 8003b0c:	b92b      	cbnz	r3, 8003b1a <f_read_byte+0x30>
				clst = fp->obj.sclust;
 8003b0e:	68a0      	ldr	r0, [r4, #8]
	#endif
				{
					clst = get_fat(&fp->obj, fp->clust);
				}
			}
			if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003b10:	2801      	cmp	r0, #1
 8003b12:	d814      	bhi.n	8003b3e <f_read_byte+0x54>
 8003b14:	2002      	movs	r0, #2
			if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003b16:	7460      	strb	r0, [r4, #17]
 8003b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (fp->cltbl) {
 8003b1a:	6a23      	ldr	r3, [r4, #32]
 8003b1c:	b153      	cbz	r3, 8003b34 <f_read_byte+0x4a>
					clst = (DWORD)(fp->fptr / SS(fs) / fs->csize);
 8003b1e:	fbb0 f0f2 	udiv	r0, r0, r2
					DWORD *tbl = fp->cltbl + 1;
 8003b22:	3304      	adds	r3, #4
						ncl = *tbl++;
 8003b24:	681a      	ldr	r2, [r3, #0]
						if (ncl == 0 || clst < ncl) break;
 8003b26:	2a00      	cmp	r2, #0
 8003b28:	d0f4      	beq.n	8003b14 <f_read_byte+0x2a>
 8003b2a:	4290      	cmp	r0, r2
 8003b2c:	d32a      	bcc.n	8003b84 <f_read_byte+0x9a>
						clst -= ncl; tbl++;
 8003b2e:	1a80      	subs	r0, r0, r2
 8003b30:	3308      	adds	r3, #8
						ncl = *tbl++;
 8003b32:	e7f7      	b.n	8003b24 <f_read_byte+0x3a>
					clst = get_fat(&fp->obj, fp->clust);
 8003b34:	69a1      	ldr	r1, [r4, #24]
 8003b36:	4638      	mov	r0, r7
 8003b38:	f7ff fdf4 	bl	8003724 <get_fat.isra.6>
 8003b3c:	e7e8      	b.n	8003b10 <f_read_byte+0x26>
			if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003b3e:	1c43      	adds	r3, r0, #1
 8003b40:	d101      	bne.n	8003b46 <f_read_byte+0x5c>
 8003b42:	2001      	movs	r0, #1
 8003b44:	e7e7      	b.n	8003b16 <f_read_byte+0x2c>
			fp->clust = clst;
 8003b46:	61a0      	str	r0, [r4, #24]
		}

		//fp->sect = clst2sect(fs, fp->clust)+csect;

		if(fp->clust >= fs->n_fatent) return 0;
 8003b48:	69a2      	ldr	r2, [r4, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d215      	bcs.n	8003b7c <f_read_byte+0x92>
		fp->sect = fs->database + fs->csize * (fp->clust - 2) + csect;
 8003b50:	897b      	ldrh	r3, [r7, #10]
 8003b52:	6a39      	ldr	r1, [r7, #32]
 8003b54:	3a02      	subs	r2, #2
 8003b56:	fb02 1303 	mla	r3, r2, r3, r1
 8003b5a:	4433      	add	r3, r6

		if (fp->sect == csect) ABORT(fs, FR_INT_ERR);
 8003b5c:	429e      	cmp	r6, r3
		fp->sect = fs->database + fs->csize * (fp->clust - 2) + csect;
 8003b5e:	61e3      	str	r3, [r4, #28]
		if (fp->sect == csect) ABORT(fs, FR_INT_ERR);
 8003b60:	d0d8      	beq.n	8003b14 <f_read_byte+0x2a>

	}

	*buff = *(uint8_t*)(FLASH_MSD_START_ADDR + fp->sect*FLASH_PAGE_SIZE+fp->fptr % SS(fs));
 8003b62:	69e3      	ldr	r3, [r4, #28]
 8003b64:	6962      	ldr	r2, [r4, #20]
 8003b66:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003b6a:	3311      	adds	r3, #17
 8003b6c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b70:	029b      	lsls	r3, r3, #10
 8003b72:	5c9b      	ldrb	r3, [r3, r2]
 8003b74:	702b      	strb	r3, [r5, #0]

	fp->fptr++;
 8003b76:	6963      	ldr	r3, [r4, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	6163      	str	r3, [r4, #20]
		if(fp->clust >= fs->n_fatent) return 0;
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LEAVE_FF(fs, FR_DISK_ERR);
 8003b80:	2001      	movs	r0, #1
 8003b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						clst += *tbl;
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4418      	add	r0, r3
 8003b88:	e7c2      	b.n	8003b10 <f_read_byte+0x26>

08003b8a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8003b8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8e:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003b90:	a901      	add	r1, sp, #4
{
 8003b92:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003b94:	f7ff fc53 	bl	800343e <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003b98:	4606      	mov	r6, r0
 8003b9a:	b9e0      	cbnz	r0, 8003bd6 <f_lseek+0x4c>
 8003b9c:	7c66      	ldrb	r6, [r4, #17]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003b9e:	b9d6      	cbnz	r6, 8003bd6 <f_lseek+0x4c>

#if FF_USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8003ba0:	6a23      	ldr	r3, [r4, #32]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d05c      	beq.n	8003c60 <f_lseek+0xd6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8003ba6:	1c69      	adds	r1, r5, #1
 8003ba8:	d138      	bne.n	8003c1c <f_lseek+0x92>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->obj.sclust;		/* Origin of the chain */
 8003baa:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003bae:	1d1f      	adds	r7, r3, #4
 8003bb0:	f8d3 b000 	ldr.w	fp, [r3]
 8003bb4:	2502      	movs	r5, #2
			if (cl != 0) {
 8003bb6:	f1b8 0f00 	cmp.w	r8, #0
 8003bba:	d028      	beq.n	8003c0e <f_lseek+0x84>
 8003bbc:	46c1      	mov	r9, r8
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003bbe:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	6820      	ldr	r0, [r4, #0]
 8003bc6:	f7ff fdad 	bl	8003724 <get_fat.isra.6>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003bca:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8003bcc:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003bd0:	d807      	bhi.n	8003be2 <f_lseek+0x58>
 8003bd2:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003bd4:	7466      	strb	r6, [r4, #17]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	b003      	add	sp, #12
 8003bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bde:	4680      	mov	r8, r0
 8003be0:	e7ec      	b.n	8003bbc <f_lseek+0x32>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003be2:	1c42      	adds	r2, r0, #1
 8003be4:	d101      	bne.n	8003bea <f_lseek+0x60>
 8003be6:	2601      	movs	r6, #1
 8003be8:	e7f4      	b.n	8003bd4 <f_lseek+0x4a>
					} while (cl == pcl + 1);
 8003bea:	f109 0301 	add.w	r3, r9, #1
 8003bee:	4298      	cmp	r0, r3
 8003bf0:	4681      	mov	r9, r0
 8003bf2:	d0e6      	beq.n	8003bc2 <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003bf4:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8003bf6:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8003bf8:	bf21      	itttt	cs
 8003bfa:	463b      	movcs	r3, r7
 8003bfc:	f843 ab08 	strcs.w	sl, [r3], #8
 8003c00:	f8c7 8004 	strcs.w	r8, [r7, #4]
 8003c04:	461f      	movcs	r7, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8003c06:	9b01      	ldr	r3, [sp, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	4298      	cmp	r0, r3
 8003c0c:	d3e7      	bcc.n	8003bde <f_lseek+0x54>
			*fp->cltbl = ulen;	/* Number of items used */
 8003c0e:	6a23      	ldr	r3, [r4, #32]
			if (ulen <= tlen) {
 8003c10:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8003c12:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 8003c14:	d873      	bhi.n	8003cfe <f_lseek+0x174>
				*tbl = 0;		/* Terminate table */
 8003c16:	2300      	movs	r3, #0
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	e7dc      	b.n	8003bd6 <f_lseek+0x4c>
 8003c1c:	68e0      	ldr	r0, [r4, #12]
 8003c1e:	4285      	cmp	r5, r0
 8003c20:	bf28      	it	cs
 8003c22:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 8003c24:	6165      	str	r5, [r4, #20]
			if (ofs > 0) {
 8003c26:	2d00      	cmp	r5, #0
 8003c28:	d0d5      	beq.n	8003bd6 <f_lseek+0x4c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8003c2a:	1e6f      	subs	r7, r5, #1
 8003c2c:	4639      	mov	r1, r7
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff fbdf 	bl	80033f2 <clmt_clust>
				dsc = clst2sect(fs, fp->clust);
 8003c34:	9a01      	ldr	r2, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 8003c36:	4601      	mov	r1, r0
 8003c38:	61a0      	str	r0, [r4, #24]
				dsc = clst2sect(fs, fp->clust);
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f7ff fbce 	bl	80033dc <clst2sect>
				if (dsc == 0) ABORT(fs, FR_INT_ERR);
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d0c6      	beq.n	8003bd2 <f_lseek+0x48>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003c44:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003c48:	2d00      	cmp	r5, #0
 8003c4a:	d0c4      	beq.n	8003bd6 <f_lseek+0x4c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8003c4c:	8951      	ldrh	r1, [r2, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003c4e:	69e3      	ldr	r3, [r4, #28]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8003c50:	3901      	subs	r1, #1
 8003c52:	ea01 2197 	and.w	r1, r1, r7, lsr #10
 8003c56:	4408      	add	r0, r1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003c58:	4298      	cmp	r0, r3
 8003c5a:	d0bc      	beq.n	8003bd6 <f_lseek+0x4c>
					fp->sect = dsc;
 8003c5c:	61e0      	str	r0, [r4, #28]
 8003c5e:	e7ba      	b.n	8003bd6 <f_lseek+0x4c>
 8003c60:	68e0      	ldr	r0, [r4, #12]
		ifptr = fp->fptr;
 8003c62:	6963      	ldr	r3, [r4, #20]
 8003c64:	4285      	cmp	r5, r0
 8003c66:	bf28      	it	cs
 8003c68:	4605      	movcs	r5, r0
		fp->fptr = nsect = 0;
 8003c6a:	6166      	str	r6, [r4, #20]
		if (ofs > 0) {
 8003c6c:	2d00      	cmp	r5, #0
 8003c6e:	d0b2      	beq.n	8003bd6 <f_lseek+0x4c>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8003c70:	9a01      	ldr	r2, [sp, #4]
 8003c72:	8957      	ldrh	r7, [r2, #10]
 8003c74:	02bf      	lsls	r7, r7, #10
			if (ifptr > 0 &&
 8003c76:	b343      	cbz	r3, 8003cca <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	1e6a      	subs	r2, r5, #1
 8003c7c:	fbb2 f2f7 	udiv	r2, r2, r7
 8003c80:	fbb3 f1f7 	udiv	r1, r3, r7
			if (ifptr > 0 &&
 8003c84:	428a      	cmp	r2, r1
 8003c86:	d320      	bcc.n	8003cca <f_lseek+0x140>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003c88:	427a      	negs	r2, r7
				clst = fp->clust;
 8003c8a:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	6163      	str	r3, [r4, #20]
			if (clst != 0) {
 8003c90:	b181      	cbz	r1, 8003cb4 <f_lseek+0x12a>
				ofs -= fp->fptr;
 8003c92:	1aed      	subs	r5, r5, r3
				while (ofs > bcs) {						/* Cluster following loop */
 8003c94:	42bd      	cmp	r5, r7
 8003c96:	6963      	ldr	r3, [r4, #20]
 8003c98:	d81c      	bhi.n	8003cd4 <f_lseek+0x14a>
				fp->fptr += ofs;
 8003c9a:	442b      	add	r3, r5
 8003c9c:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8003c9e:	f3c5 0309 	ubfx	r3, r5, #0, #10
 8003ca2:	b13b      	cbz	r3, 8003cb4 <f_lseek+0x12a>
					nsect = clst2sect(fs, clst);	/* Current sector */
 8003ca4:	9801      	ldr	r0, [sp, #4]
 8003ca6:	f7ff fb99 	bl	80033dc <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d091      	beq.n	8003bd2 <f_lseek+0x48>
					nsect += (DWORD)(ofs / SS(fs));
 8003cae:	eb00 2595 	add.w	r5, r0, r5, lsr #10
 8003cb2:	e000      	b.n	8003cb6 <f_lseek+0x12c>
		fp->fptr = nsect = 0;
 8003cb4:	2500      	movs	r5, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8003cb6:	6963      	ldr	r3, [r4, #20]
 8003cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d08a      	beq.n	8003bd6 <f_lseek+0x4c>
 8003cc0:	69e3      	ldr	r3, [r4, #28]
 8003cc2:	429d      	cmp	r5, r3
 8003cc4:	d087      	beq.n	8003bd6 <f_lseek+0x4c>
			fp->sect = nsect;
 8003cc6:	61e5      	str	r5, [r4, #28]
 8003cc8:	e785      	b.n	8003bd6 <f_lseek+0x4c>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003cca:	68a1      	ldr	r1, [r4, #8]
				fp->clust = clst;
 8003ccc:	61a1      	str	r1, [r4, #24]
			if (clst != 0) {
 8003cce:	2900      	cmp	r1, #0
 8003cd0:	d081      	beq.n	8003bd6 <f_lseek+0x4c>
 8003cd2:	e7df      	b.n	8003c94 <f_lseek+0x10a>
					ofs -= bcs; fp->fptr += bcs;
 8003cd4:	443b      	add	r3, r7
 8003cd6:	6163      	str	r3, [r4, #20]
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8003cd8:	6820      	ldr	r0, [r4, #0]
 8003cda:	f7ff fd23 	bl	8003724 <get_fat.isra.6>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003cde:	1c43      	adds	r3, r0, #1
					ofs -= bcs; fp->fptr += bcs;
 8003ce0:	eba5 0507 	sub.w	r5, r5, r7
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8003ce4:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003ce6:	f43f af7e 	beq.w	8003be6 <f_lseek+0x5c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003cea:	2801      	cmp	r0, #1
 8003cec:	f67f af71 	bls.w	8003bd2 <f_lseek+0x48>
 8003cf0:	9b01      	ldr	r3, [sp, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4298      	cmp	r0, r3
 8003cf6:	f4bf af6c 	bcs.w	8003bd2 <f_lseek+0x48>
					fp->clust = clst;
 8003cfa:	61a0      	str	r0, [r4, #24]
 8003cfc:	e7ca      	b.n	8003c94 <f_lseek+0x10a>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8003cfe:	2611      	movs	r6, #17
 8003d00:	e769      	b.n	8003bd6 <f_lseek+0x4c>

08003d02 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003d02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8003d04:	4604      	mov	r4, r0
{
 8003d06:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8003d08:	b340      	cbz	r0, 8003d5c <f_opendir+0x5a>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8003d0a:	a903      	add	r1, sp, #12
 8003d0c:	a801      	add	r0, sp, #4
 8003d0e:	f7ff fc0d 	bl	800352c <find_volume.isra.5>
	if (res == FR_OK) {
 8003d12:	b970      	cbnz	r0, 8003d32 <f_opendir+0x30>
		dp->obj.fs = fs;
 8003d14:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003d16:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
 8003d18:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f7ff fdca 	bl	80038b4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8003d20:	b9f0      	cbnz	r0, 8003d60 <f_opendir+0x5e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8003d22:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0c      	blt.n	8003d44 <f_opendir+0x42>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8003d2a:	79a3      	ldrb	r3, [r4, #6]
 8003d2c:	06db      	lsls	r3, r3, #27
 8003d2e:	d403      	bmi.n	8003d38 <f_opendir+0x36>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8003d30:	2005      	movs	r0, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8003d32:	2300      	movs	r3, #0
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	e00f      	b.n	8003d58 <f_opendir+0x56>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	69e1      	ldr	r1, [r4, #28]
 8003d3c:	7818      	ldrb	r0, [r3, #0]
 8003d3e:	f7ff fb98 	bl	8003472 <ld_clust.isra.2>
 8003d42:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
 8003d44:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003d46:	4620      	mov	r0, r4
				dp->obj.id = fs->id;
 8003d48:	88db      	ldrh	r3, [r3, #6]
 8003d4a:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003d4c:	f7ff fd7f 	bl	800384e <dir_sdi.constprop.9>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003d50:	2804      	cmp	r0, #4
 8003d52:	d0ed      	beq.n	8003d30 <f_opendir+0x2e>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d1ec      	bne.n	8003d32 <f_opendir+0x30>

	LEAVE_FF(fs, res);
}
 8003d58:	b004      	add	sp, #16
 8003d5a:	bd10      	pop	{r4, pc}
	if (!dp) return FR_INVALID_OBJECT;
 8003d5c:	2009      	movs	r0, #9
 8003d5e:	e7fb      	b.n	8003d58 <f_opendir+0x56>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003d60:	2804      	cmp	r0, #4
 8003d62:	d0e5      	beq.n	8003d30 <f_opendir+0x2e>
 8003d64:	e7e5      	b.n	8003d32 <f_opendir+0x30>

08003d66 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8003d66:	b513      	push	{r0, r1, r4, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8003d68:	a901      	add	r1, sp, #4
{
 8003d6a:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8003d6c:	f7ff fb67 	bl	800343e <validate>
	if (res == FR_OK) {
 8003d70:	b900      	cbnz	r0, 8003d74 <f_closedir+0xe>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 8003d72:	6020      	str	r0, [r4, #0]
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8003d74:	b002      	add	sp, #8
 8003d76:	bd10      	pop	{r4, pc}

08003d78 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8003d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d7a:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8003d7c:	a901      	add	r1, sp, #4
{
 8003d7e:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8003d80:	f7ff fb5d 	bl	800343e <validate>
	if (res == FR_OK) {
 8003d84:	4606      	mov	r6, r0
 8003d86:	b920      	cbnz	r0, 8003d92 <f_readdir+0x1a>
		if (!fno) {
 8003d88:	b935      	cbnz	r5, 8003d98 <f_readdir+0x20>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff fd5f 	bl	800384e <dir_sdi.constprop.9>
 8003d90:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8003d92:	4630      	mov	r0, r6
 8003d94:	b003      	add	sp, #12
 8003d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FRESULT res = FR_NO_FILE;
 8003d98:	2004      	movs	r0, #4
	FATFS *fs = dp->obj.fs;
 8003d9a:	6827      	ldr	r7, [r4, #0]
	while (dp->sect) {
 8003d9c:	69a1      	ldr	r1, [r4, #24]
 8003d9e:	2900      	cmp	r1, #0
 8003da0:	d13b      	bne.n	8003e1a <f_readdir+0xa2>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d153      	bne.n	8003e4e <f_readdir+0xd6>
	fno->fname[0] = 0;			/* Invaidate file info */
 8003da6:	2300      	movs	r3, #0
 8003da8:	726b      	strb	r3, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003daa:	69a2      	ldr	r2, [r4, #24]
 8003dac:	b372      	cbz	r2, 8003e0c <f_readdir+0x94>
		c = (TCHAR)dp->dir[si++];
 8003dae:	4618      	mov	r0, r3
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8003db0:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
		c = (TCHAR)dp->dir[si++];
 8003db4:	69e1      	ldr	r1, [r4, #28]
 8003db6:	1e4f      	subs	r7, r1, #1
 8003db8:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8003dbc:	3001      	adds	r0, #1
		if (c == ' ') continue;		/* Skip padding spaces */
 8003dbe:	2a20      	cmp	r2, #32
 8003dc0:	d00e      	beq.n	8003de0 <f_readdir+0x68>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8003dc2:	2a05      	cmp	r2, #5
 8003dc4:	bf08      	it	eq
 8003dc6:	22e5      	moveq	r2, #229	; 0xe5
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8003dc8:	2809      	cmp	r0, #9
 8003dca:	bf02      	ittt	eq
 8003dcc:	eb05 0c03 	addeq.w	ip, r5, r3
 8003dd0:	3301      	addeq	r3, #1
 8003dd2:	f88c e009 	strbeq.w	lr, [ip, #9]
		fno->fname[di++] = c;
 8003dd6:	eb05 0c03 	add.w	ip, r5, r3
 8003dda:	f88c 2009 	strb.w	r2, [ip, #9]
 8003dde:	3301      	adds	r3, #1
	while (si < 11) {		/* Copy name body and extension */
 8003de0:	280b      	cmp	r0, #11
 8003de2:	d1e9      	bne.n	8003db8 <f_readdir+0x40>
	fno->fname[di] = 0;
 8003de4:	2200      	movs	r2, #0
 8003de6:	442b      	add	r3, r5
 8003de8:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8003dea:	7acb      	ldrb	r3, [r1, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003dec:	f101 001c 	add.w	r0, r1, #28
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8003df0:	722b      	strb	r3, [r5, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003df2:	f7ff fadd 	bl	80033b0 <ld_dword>
 8003df6:	6028      	str	r0, [r5, #0]
	rv = rv << 8 | ptr[0];
 8003df8:	7dca      	ldrb	r2, [r1, #23]
 8003dfa:	7d8b      	ldrb	r3, [r1, #22]
 8003dfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8003e00:	80eb      	strh	r3, [r5, #6]
	rv = rv << 8 | ptr[0];
 8003e02:	7e4a      	ldrb	r2, [r1, #25]
 8003e04:	7e0b      	ldrb	r3, [r1, #24]
 8003e06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8003e0a:	80ab      	strh	r3, [r5, #4]
				res = dir_next(dp, 0);		/* Increment index for next */
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7ff fce4 	bl	80037da <dir_next.isra.7>
 8003e12:	2804      	cmp	r0, #4
 8003e14:	bf18      	it	ne
 8003e16:	4606      	movne	r6, r0
 8003e18:	e7bb      	b.n	8003d92 <f_readdir+0x1a>
		res = move_window(fs, dp->sect);
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	f7ff fb37 	bl	800348e <move_window>
		if (res != FR_OK) break;
 8003e20:	b9a8      	cbnz	r0, 8003e4e <f_readdir+0xd6>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8003e22:	69e3      	ldr	r3, [r4, #28]
 8003e24:	781a      	ldrb	r2, [r3, #0]
		if (b == 0) {
 8003e26:	b1c2      	cbz	r2, 8003e5a <f_readdir+0xe2>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003e28:	7adb      	ldrb	r3, [r3, #11]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003e2a:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e30:	71a3      	strb	r3, [r4, #6]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003e32:	d007      	beq.n	8003e44 <f_readdir+0xcc>
 8003e34:	2a2e      	cmp	r2, #46	; 0x2e
 8003e36:	d005      	beq.n	8003e44 <f_readdir+0xcc>
 8003e38:	2b0f      	cmp	r3, #15
 8003e3a:	d003      	beq.n	8003e44 <f_readdir+0xcc>
 8003e3c:	f023 0320 	bic.w	r3, r3, #32
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d1b0      	bne.n	8003da6 <f_readdir+0x2e>
		res = dir_next(dp, 0);		/* Next entry */
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7ff fcc8 	bl	80037da <dir_next.isra.7>
		if (res != FR_OK) break;
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d0a6      	beq.n	8003d9c <f_readdir+0x24>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003e4e:	2300      	movs	r3, #0
			if (res == FR_OK) {				/* A valid entry is found */
 8003e50:	f010 0ffb 	tst.w	r0, #251	; 0xfb
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003e54:	61a3      	str	r3, [r4, #24]
			if (res == FR_OK) {				/* A valid entry is found */
 8003e56:	d19b      	bne.n	8003d90 <f_readdir+0x18>
 8003e58:	e7a5      	b.n	8003da6 <f_readdir+0x2e>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003e5a:	2004      	movs	r0, #4
 8003e5c:	e7f7      	b.n	8003e4e <f_readdir+0xd6>
	...

08003e60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003e60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003e62:	e003      	b.n	8003e6c <LoopCopyDataInit>

08003e64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003e66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003e68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003e6a:	3104      	adds	r1, #4

08003e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003e6c:	480a      	ldr	r0, [pc, #40]	; (8003e98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003e70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003e72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003e74:	d3f6      	bcc.n	8003e64 <CopyDataInit>
  ldr r2, =_sbss
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003e78:	e002      	b.n	8003e80 <LoopFillZerobss>

08003e7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003e7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003e7c:	f842 3b04 	str.w	r3, [r2], #4

08003e80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003e82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003e84:	d3f9      	bcc.n	8003e7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e86:	f7ff f841 	bl	8002f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e8a:	f000 f80f 	bl	8003eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e8e:	f7fe ffb1 	bl	8002df4 <main>
  bx lr
 8003e92:	4770      	bx	lr
  ldr r3, =_sidata
 8003e94:	08004084 	.word	0x08004084
  ldr r0, =_sdata
 8003e98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003e9c:	20000120 	.word	0x20000120
  ldr r2, =_sbss
 8003ea0:	20000120 	.word	0x20000120
  ldr r3, = _ebss
 8003ea4:	20001b88 	.word	0x20001b88

08003ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ea8:	e7fe      	b.n	8003ea8 <ADC1_2_IRQHandler>
	...

08003eac <__libc_init_array>:
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	2500      	movs	r5, #0
 8003eb0:	4e0c      	ldr	r6, [pc, #48]	; (8003ee4 <__libc_init_array+0x38>)
 8003eb2:	4c0d      	ldr	r4, [pc, #52]	; (8003ee8 <__libc_init_array+0x3c>)
 8003eb4:	1ba4      	subs	r4, r4, r6
 8003eb6:	10a4      	asrs	r4, r4, #2
 8003eb8:	42a5      	cmp	r5, r4
 8003eba:	d109      	bne.n	8003ed0 <__libc_init_array+0x24>
 8003ebc:	f000 f836 	bl	8003f2c <_init>
 8003ec0:	2500      	movs	r5, #0
 8003ec2:	4e0a      	ldr	r6, [pc, #40]	; (8003eec <__libc_init_array+0x40>)
 8003ec4:	4c0a      	ldr	r4, [pc, #40]	; (8003ef0 <__libc_init_array+0x44>)
 8003ec6:	1ba4      	subs	r4, r4, r6
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	42a5      	cmp	r5, r4
 8003ecc:	d105      	bne.n	8003eda <__libc_init_array+0x2e>
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ed4:	4798      	blx	r3
 8003ed6:	3501      	adds	r5, #1
 8003ed8:	e7ee      	b.n	8003eb8 <__libc_init_array+0xc>
 8003eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ede:	4798      	blx	r3
 8003ee0:	3501      	adds	r5, #1
 8003ee2:	e7f2      	b.n	8003eca <__libc_init_array+0x1e>
 8003ee4:	0800407c 	.word	0x0800407c
 8003ee8:	0800407c 	.word	0x0800407c
 8003eec:	0800407c 	.word	0x0800407c
 8003ef0:	08004080 	.word	0x08004080

08003ef4 <memcpy>:
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	1e43      	subs	r3, r0, #1
 8003ef8:	440a      	add	r2, r1
 8003efa:	4291      	cmp	r1, r2
 8003efc:	d100      	bne.n	8003f00 <memcpy+0xc>
 8003efe:	bd10      	pop	{r4, pc}
 8003f00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f08:	e7f7      	b.n	8003efa <memcpy+0x6>

08003f0a <memset>:
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4402      	add	r2, r0
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d100      	bne.n	8003f14 <memset+0xa>
 8003f12:	4770      	bx	lr
 8003f14:	f803 1b01 	strb.w	r1, [r3], #1
 8003f18:	e7f9      	b.n	8003f0e <memset+0x4>

08003f1a <strcpy>:
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f20:	f803 2b01 	strb.w	r2, [r3], #1
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	d1f9      	bne.n	8003f1c <strcpy+0x2>
 8003f28:	4770      	bx	lr
	...

08003f2c <_init>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr

08003f38 <_fini>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr
