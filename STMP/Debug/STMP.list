
STMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003e80  08003e80  00013e80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000120  20000000  08003fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e90  20000120  080040e0  00020120  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20001fb0  080040e0  00021fb0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  9 .debug_info   000133dc  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000043d1  00000000  00000000  00033525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000098bb  00000000  00000000  000378f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b98  00000000  00000000  000411b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001540  00000000  00000000  00041d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c122  00000000  00000000  00043290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000038f6  00000000  00000000  0004f3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00052ca8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cc4  00000000  00000000  00052cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000120 	.word	0x20000120
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e68 	.word	0x08003e68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000124 	.word	0x20000124
 8000148:	08003e68 	.word	0x08003e68

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000160:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	4b0e      	ldr	r3, [pc, #56]	; (800019c <HAL_InitTick+0x3c>)
{
 8000164:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000166:	7818      	ldrb	r0, [r3, #0]
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000170:	4a0b      	ldr	r2, [pc, #44]	; (80001a0 <HAL_InitTick+0x40>)
 8000172:	6810      	ldr	r0, [r2, #0]
 8000174:	fbb0 f0f3 	udiv	r0, r0, r3
 8000178:	f000 f8aa 	bl	80002d0 <HAL_SYSTICK_Config>
 800017c:	4604      	mov	r4, r0
 800017e:	b958      	cbnz	r0, 8000198 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000180:	2d0f      	cmp	r5, #15
 8000182:	d809      	bhi.n	8000198 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000184:	4602      	mov	r2, r0
 8000186:	4629      	mov	r1, r5
 8000188:	f04f 30ff 	mov.w	r0, #4294967295
 800018c:	f000 f862 	bl	8000254 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000190:	4620      	mov	r0, r4
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <HAL_InitTick+0x44>)
 8000194:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000198:	2001      	movs	r0, #1
 800019a:	e7fc      	b.n	8000196 <HAL_InitTick+0x36>
 800019c:	20000000 	.word	0x20000000
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	20000004 	.word	0x20000004

080001a8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <HAL_Init+0x20>)
{
 80001aa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001b0:	f043 0310 	orr.w	r3, r3, #16
 80001b4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b6:	f000 f83b 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ba:	2000      	movs	r0, #0
 80001bc:	f7ff ffd0 	bl	8000160 <HAL_InitTick>
  HAL_MspInit();
 80001c0:	f002 fe72 	bl	8002ea8 <HAL_MspInit>
}
 80001c4:	2000      	movs	r0, #0
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	40022000 	.word	0x40022000

080001cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <HAL_IncTick+0x10>)
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <HAL_IncTick+0x14>)
 80001d0:	6811      	ldr	r1, [r2, #0]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	440b      	add	r3, r1
 80001d6:	6013      	str	r3, [r2, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	2000013c 	.word	0x2000013c
 80001e0:	20000000 	.word	0x20000000

080001e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e4:	4b01      	ldr	r3, [pc, #4]	; (80001ec <HAL_GetTick+0x8>)
 80001e6:	6818      	ldr	r0, [r3, #0]
}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	2000013c 	.word	0x2000013c

080001f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001f0:	b538      	push	{r3, r4, r5, lr}
 80001f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f4:	f7ff fff6 	bl	80001e4 <HAL_GetTick>
 80001f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001fa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001fc:	bf1e      	ittt	ne
 80001fe:	4b04      	ldrne	r3, [pc, #16]	; (8000210 <HAL_Delay+0x20>)
 8000200:	781b      	ldrbne	r3, [r3, #0]
 8000202:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000204:	f7ff ffee 	bl	80001e4 <HAL_GetTick>
 8000208:	1b43      	subs	r3, r0, r5
 800020a:	42a3      	cmp	r3, r4
 800020c:	d3fa      	bcc.n	8000204 <HAL_Delay+0x14>
  {
  }
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000000 	.word	0x20000000

08000214 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000214:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000218:	6913      	ldr	r3, [r2, #16]
 800021a:	f023 0302 	bic.w	r3, r3, #2
 800021e:	6113      	str	r3, [r2, #16]
}
 8000220:	4770      	bx	lr

08000222 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000222:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000226:	6913      	ldr	r3, [r2, #16]
 8000228:	f043 0302 	orr.w	r3, r3, #2
 800022c:	6113      	str	r3, [r2, #16]
}
 800022e:	4770      	bx	lr

08000230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000232:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000234:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800023a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800023e:	0412      	lsls	r2, r2, #16
 8000240:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800024c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000256:	b530      	push	{r4, r5, lr}
 8000258:	68dc      	ldr	r4, [r3, #12]
 800025a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000264:	2b04      	cmp	r3, #4
 8000266:	bf28      	it	cs
 8000268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000270:	bf98      	it	ls
 8000272:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	bf88      	it	hi
 800027a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027c:	ea21 0303 	bic.w	r3, r1, r3
 8000280:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000282:	fa05 f404 	lsl.w	r4, r5, r4
 8000286:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) < 0)
 800028a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	bfac      	ite	ge
 8000292:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000296:	4a07      	ldrlt	r2, [pc, #28]	; (80002b4 <HAL_NVIC_SetPriority+0x60>)
 8000298:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800029c:	b2db      	uxtb	r3, r3
 800029e:	bfb5      	itete	lt
 80002a0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	e000ed00 	.word	0xe000ed00
 80002b4:	e000ed14 	.word	0xe000ed14

080002b8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b8:	2301      	movs	r3, #1
 80002ba:	0942      	lsrs	r2, r0, #5
 80002bc:	f000 001f 	and.w	r0, r0, #31
 80002c0:	fa03 f000 	lsl.w	r0, r3, r0
 80002c4:	4b01      	ldr	r3, [pc, #4]	; (80002cc <HAL_NVIC_EnableIRQ+0x14>)
 80002c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80002ca:	4770      	bx	lr
 80002cc:	e000e100 	.word	0xe000e100

080002d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d0:	3801      	subs	r0, #1
 80002d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002d6:	d20b      	bcs.n	80002f0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	21f0      	movs	r1, #240	; 0xf0
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ea:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ec:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002ee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <FLASH_SetErrorCode+0x48>)
 80002fa:	68d3      	ldr	r3, [r2, #12]
 80002fc:	f013 0310 	ands.w	r3, r3, #16
 8000300:	d005      	beq.n	800030e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000302:	4910      	ldr	r1, [pc, #64]	; (8000344 <FLASH_SetErrorCode+0x4c>)
 8000304:	69cb      	ldr	r3, [r1, #28]
 8000306:	f043 0302 	orr.w	r3, r3, #2
 800030a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800030c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800030e:	68d2      	ldr	r2, [r2, #12]
 8000310:	0750      	lsls	r0, r2, #29
 8000312:	d506      	bpl.n	8000322 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000314:	490b      	ldr	r1, [pc, #44]	; (8000344 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000316:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800031a:	69ca      	ldr	r2, [r1, #28]
 800031c:	f042 0201 	orr.w	r2, r2, #1
 8000320:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000322:	4a07      	ldr	r2, [pc, #28]	; (8000340 <FLASH_SetErrorCode+0x48>)
 8000324:	69d1      	ldr	r1, [r2, #28]
 8000326:	07c9      	lsls	r1, r1, #31
 8000328:	d508      	bpl.n	800033c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800032a:	4806      	ldr	r0, [pc, #24]	; (8000344 <FLASH_SetErrorCode+0x4c>)
 800032c:	69c1      	ldr	r1, [r0, #28]
 800032e:	f041 0104 	orr.w	r1, r1, #4
 8000332:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000334:	69d1      	ldr	r1, [r2, #28]
 8000336:	f021 0101 	bic.w	r1, r1, #1
 800033a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800033c:	60d3      	str	r3, [r2, #12]
}  
 800033e:	4770      	bx	lr
 8000340:	40022000 	.word	0x40022000
 8000344:	20000140 	.word	0x20000140

08000348 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HAL_FLASH_Unlock+0x1c>)
 800034a:	6918      	ldr	r0, [r3, #16]
 800034c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000350:	d007      	beq.n	8000362 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000352:	4a05      	ldr	r2, [pc, #20]	; (8000368 <HAL_FLASH_Unlock+0x20>)
 8000354:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000356:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800035a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800035c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800035e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000362:	4770      	bx	lr
 8000364:	40022000 	.word	0x40022000
 8000368:	45670123 	.word	0x45670123

0800036c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800036c:	4a03      	ldr	r2, [pc, #12]	; (800037c <HAL_FLASH_Lock+0x10>)
}
 800036e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000370:	6913      	ldr	r3, [r2, #16]
 8000372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000376:	6113      	str	r3, [r2, #16]
}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40022000 	.word	0x40022000

08000380 <FLASH_WaitForLastOperation>:
{
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000384:	f7ff ff2e 	bl	80001e4 <HAL_GetTick>
 8000388:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800038a:	4c11      	ldr	r4, [pc, #68]	; (80003d0 <FLASH_WaitForLastOperation+0x50>)
 800038c:	68e3      	ldr	r3, [r4, #12]
 800038e:	07d8      	lsls	r0, r3, #31
 8000390:	d412      	bmi.n	80003b8 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000392:	68e3      	ldr	r3, [r4, #12]
 8000394:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000396:	bf44      	itt	mi
 8000398:	2320      	movmi	r3, #32
 800039a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800039c:	68e3      	ldr	r3, [r4, #12]
 800039e:	06da      	lsls	r2, r3, #27
 80003a0:	d406      	bmi.n	80003b0 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80003a2:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80003a4:	07db      	lsls	r3, r3, #31
 80003a6:	d403      	bmi.n	80003b0 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80003a8:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80003aa:	f010 0004 	ands.w	r0, r0, #4
 80003ae:	d007      	beq.n	80003c0 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 80003b0:	f7ff ffa2 	bl	80002f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80003b4:	2001      	movs	r0, #1
 80003b6:	e003      	b.n	80003c0 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 80003b8:	1c6b      	adds	r3, r5, #1
 80003ba:	d0e7      	beq.n	800038c <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80003bc:	b90d      	cbnz	r5, 80003c2 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 80003be:	2003      	movs	r0, #3
}
 80003c0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80003c2:	f7ff ff0f 	bl	80001e4 <HAL_GetTick>
 80003c6:	1b80      	subs	r0, r0, r6
 80003c8:	42a8      	cmp	r0, r5
 80003ca:	d9df      	bls.n	800038c <FLASH_WaitForLastOperation+0xc>
 80003cc:	e7f7      	b.n	80003be <FLASH_WaitForLastOperation+0x3e>
 80003ce:	bf00      	nop
 80003d0:	40022000 	.word	0x40022000

080003d4 <HAL_FLASH_Program>:
{
 80003d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80003d8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800046c <HAL_FLASH_Program+0x98>
{
 80003dc:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80003de:	f899 3018 	ldrb.w	r3, [r9, #24]
{
 80003e2:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80003e4:	2b01      	cmp	r3, #1
{
 80003e6:	460f      	mov	r7, r1
 80003e8:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80003ea:	d03d      	beq.n	8000468 <HAL_FLASH_Program+0x94>
 80003ec:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80003ee:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80003f2:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80003f6:	f7ff ffc3 	bl	8000380 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80003fa:	bb80      	cbnz	r0, 800045e <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80003fc:	2c01      	cmp	r4, #1
 80003fe:	d003      	beq.n	8000408 <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 8000400:	2c02      	cmp	r4, #2
 8000402:	bf0c      	ite	eq
 8000404:	2402      	moveq	r4, #2
 8000406:	2404      	movne	r4, #4
 8000408:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800040a:	46ab      	mov	fp, r5
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800040c:	f8df a060 	ldr.w	sl, [pc, #96]	; 8000470 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000410:	0128      	lsls	r0, r5, #4
 8000412:	f1c0 0220 	rsb	r2, r0, #32
 8000416:	f1a0 0320 	sub.w	r3, r0, #32
 800041a:	fa06 f202 	lsl.w	r2, r6, r2
 800041e:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000422:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000426:	4310      	orrs	r0, r2
 8000428:	fa26 f303 	lsr.w	r3, r6, r3
 800042c:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800042e:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000432:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 800043c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000440:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000444:	f7ff ff9c 	bl	8000380 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000448:	f8da 3010 	ldr.w	r3, [sl, #16]
 800044c:	f023 0301 	bic.w	r3, r3, #1
 8000450:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8000454:	b918      	cbnz	r0, 800045e <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 8000456:	3501      	adds	r5, #1
 8000458:	b2eb      	uxtb	r3, r5
 800045a:	429c      	cmp	r4, r3
 800045c:	d8d8      	bhi.n	8000410 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 800045e:	2300      	movs	r3, #0
 8000460:	f889 3018 	strb.w	r3, [r9, #24]
}
 8000464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000468:	2002      	movs	r0, #2
 800046a:	e7fb      	b.n	8000464 <HAL_FLASH_Program+0x90>
 800046c:	20000140 	.word	0x20000140
 8000470:	40022000 	.word	0x40022000

08000474 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000474:	2200      	movs	r2, #0
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <FLASH_PageErase+0x1c>)
 8000478:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <FLASH_PageErase+0x20>)
 800047c:	691a      	ldr	r2, [r3, #16]
 800047e:	f042 0202 	orr.w	r2, r2, #2
 8000482:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000484:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000486:	691a      	ldr	r2, [r3, #16]
 8000488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800048c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800048e:	4770      	bx	lr
 8000490:	20000140 	.word	0x20000140
 8000494:	40022000 	.word	0x40022000

08000498 <HAL_FLASHEx_Erase>:
{
 8000498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800049c:	4f26      	ldr	r7, [pc, #152]	; (8000538 <HAL_FLASHEx_Erase+0xa0>)
{
 800049e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80004a0:	7e3b      	ldrb	r3, [r7, #24]
{
 80004a2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d044      	beq.n	8000532 <HAL_FLASHEx_Erase+0x9a>
 80004a8:	2401      	movs	r4, #1
 80004aa:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80004ac:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004ae:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d11a      	bne.n	80004ec <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004b6:	f7ff ff63 	bl	8000380 <FLASH_WaitForLastOperation>
 80004ba:	b120      	cbz	r0, 80004c6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80004bc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80004be:	2300      	movs	r3, #0
 80004c0:	763b      	strb	r3, [r7, #24]
}
 80004c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80004c6:	4c1d      	ldr	r4, [pc, #116]	; (800053c <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80004c8:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80004ca:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80004cc:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80004d6:	6923      	ldr	r3, [r4, #16]
 80004d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004dc:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80004de:	f7ff ff4f 	bl	8000380 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80004e2:	6923      	ldr	r3, [r4, #16]
 80004e4:	f023 0304 	bic.w	r3, r3, #4
 80004e8:	6123      	str	r3, [r4, #16]
 80004ea:	e7e8      	b.n	80004be <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004ec:	f7ff ff48 	bl	8000380 <FLASH_WaitForLastOperation>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d1e3      	bne.n	80004bc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80004f4:	f04f 33ff 	mov.w	r3, #4294967295
 80004f8:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80004fc:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80004fe:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000500:	4c0e      	ldr	r4, [pc, #56]	; (800053c <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000502:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8000506:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 800050a:	42b3      	cmp	r3, r6
 800050c:	d9d7      	bls.n	80004be <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 800050e:	4630      	mov	r0, r6
 8000510:	f7ff ffb0 	bl	8000474 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000514:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000518:	f7ff ff32 	bl	8000380 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800051c:	6923      	ldr	r3, [r4, #16]
 800051e:	f023 0302 	bic.w	r3, r3, #2
 8000522:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000524:	b110      	cbz	r0, 800052c <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8000526:	f8c8 6000 	str.w	r6, [r8]
            break;
 800052a:	e7c8      	b.n	80004be <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800052c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000530:	e7e7      	b.n	8000502 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8000532:	2002      	movs	r0, #2
 8000534:	e7c5      	b.n	80004c2 <HAL_FLASHEx_Erase+0x2a>
 8000536:	bf00      	nop
 8000538:	20000140 	.word	0x20000140
 800053c:	40022000 	.word	0x40022000

08000540 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000544:	4604      	mov	r4, r0
{
 8000546:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000548:	2800      	cmp	r0, #0
 800054a:	d05e      	beq.n	800060a <HAL_PCD_Init+0xca>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800054c:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000550:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000554:	b91b      	cbnz	r3, 800055e <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000556:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800055a:	f002 fd2d 	bl	8002fb8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 800055e:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000560:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000562:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000564:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000568:	f855 0b10 	ldr.w	r0, [r5], #16
 800056c:	f000 ff62 	bl	8001434 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000574:	682b      	ldr	r3, [r5, #0]
 8000576:	f104 0804 	add.w	r8, r4, #4
 800057a:	6033      	str	r3, [r6, #0]
 800057c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000580:	6820      	ldr	r0, [r4, #0]
 8000582:	f000 ff47 	bl	8001414 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000586:	2100      	movs	r1, #0
 8000588:	6820      	ldr	r0, [r4, #0]
 800058a:	f000 ff5d 	bl	8001448 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 800058e:	2100      	movs	r1, #0
 8000590:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000592:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000594:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000596:	4608      	mov	r0, r1
 8000598:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 800059c:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80005a0:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80005a2:	3101      	adds	r1, #1
 80005a4:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].maxpacket =  0U;
    hpcd->IN_ep[index].xfer_buff = 0U;
 80005a6:	e9c2 000e 	strd	r0, r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].is_in = 1U;
 80005aa:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80005ae:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].xfer_len = 0U;
 80005b2:	6410      	str	r0, [r2, #64]	; 0x40
  for (index = 0U; index < 15U ; index++)
 80005b4:	f102 0220 	add.w	r2, r2, #32
 80005b8:	d1f0      	bne.n	800059c <HAL_PCD_Init+0x5c>
  }
 
  for (index = 0U; index < 15U ; index++)
 80005ba:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[index].is_in = 0U;
 80005bc:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 80005be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 80005c2:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80005c4:	3201      	adds	r2, #1
 80005c6:	2a0f      	cmp	r2, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[index].maxpacket = 0U;
    hpcd->OUT_ep[index].xfer_buff = 0U;
 80005c8:	e9c3 778e 	strd	r7, r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].is_in = 0U;
 80005cc:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80005d0:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].xfer_len = 0U;
 80005d4:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
  for (index = 0U; index < 15U ; index++)
 80005d8:	f103 0320 	add.w	r3, r3, #32
 80005dc:	d1ef      	bne.n	80005be <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80005de:	466e      	mov	r6, sp
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80005e4:	682b      	ldr	r3, [r5, #0]
 80005e6:	6033      	str	r3, [r6, #0]
 80005e8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80005ec:	6820      	ldr	r0, [r4, #0]
 80005ee:	f000 ff2d 	bl	800144c <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 80005f2:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80005f4:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 80005f8:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 80005fa:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 80005fe:	f001 f9d6 	bl	80019ae <USB_DevDisconnect>
  return HAL_OK;
 8000602:	2000      	movs	r0, #0
}
 8000604:	b006      	add	sp, #24
 8000606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800060a:	2001      	movs	r0, #1
 800060c:	e7fa      	b.n	8000604 <HAL_PCD_Init+0xc4>

0800060e <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800060e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000610:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000614:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00e      	beq.n	8000638 <HAL_PCD_Start+0x2a>
 800061a:	2101      	movs	r1, #1
 800061c:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000620:	f002 fdd1 	bl	80031c6 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000624:	6820      	ldr	r0, [r4, #0]
 8000626:	f001 f9c0 	bl	80019aa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800062a:	6820      	ldr	r0, [r4, #0]
 800062c:	f000 fef9 	bl	8001422 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000630:	2000      	movs	r0, #0
 8000632:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8000636:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000638:	2002      	movs	r0, #2
 800063a:	e7fc      	b.n	8000636 <HAL_PCD_Start+0x28>

0800063c <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800063c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800063e:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000642:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000644:	2a01      	cmp	r2, #1
 8000646:	d00b      	beq.n	8000660 <HAL_PCD_SetAddress+0x24>
 8000648:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800064a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800064e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_SetDevAddress(hpcd->Instance, address);
 8000652:	6800      	ldr	r0, [r0, #0]
 8000654:	f001 f9a3 	bl	800199e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000658:	2000      	movs	r0, #0
 800065a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 800065e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000660:	2002      	movs	r0, #2
 8000662:	e7fc      	b.n	800065e <HAL_PCD_SetAddress+0x22>

08000664 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000664:	b538      	push	{r3, r4, r5, lr}
 8000666:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000668:	b248      	sxtb	r0, r1
 800066a:	2800      	cmp	r0, #0
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800066c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000670:	bfb5      	itete	lt
 8000672:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000676:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800067a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800067c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000680:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000682:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000684:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8000686:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8000688:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 800068a:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 800068e:	2b01      	cmp	r3, #1
 8000690:	d009      	beq.n	80006a6 <HAL_PCD_EP_Open+0x42>
 8000692:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000694:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000696:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800069a:	f000 fef7 	bl	800148c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800069e:	2000      	movs	r0, #0
 80006a0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
}
 80006a4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80006a6:	2002      	movs	r0, #2
 80006a8:	e7fc      	b.n	80006a4 <HAL_PCD_EP_Open+0x40>

080006aa <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80006aa:	b24b      	sxtb	r3, r1
{  
 80006ac:	b510      	push	{r4, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 80006ae:	2b00      	cmp	r3, #0
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006b0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80006b4:	bfb5      	itete	lt
 80006b6:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80006ba:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006be:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80006c0:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80006c4:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 80006c6:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80006c8:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 80006ca:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 80006ce:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d009      	beq.n	80006e8 <HAL_PCD_EP_Close+0x3e>
 80006d4:	2301      	movs	r3, #1
 80006d6:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80006da:	6800      	ldr	r0, [r0, #0]
 80006dc:	f001 f82c 	bl	8001738 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 80006e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80006e8:	2002      	movs	r0, #2
 80006ea:	e7fc      	b.n	80006e6 <HAL_PCD_EP_Close+0x3c>

080006ec <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006ec:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80006ee:	2500      	movs	r5, #0
 80006f0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80006f4:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 80006f8:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep->xfer_len = len;
 80006fc:	e9c4 238f 	strd	r2, r3, [r4, #572]	; 0x23c
  ep->xfer_count = 0U;
 8000700:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000704:	f884 5229 	strb.w	r5, [r4, #553]	; 0x229
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000708:	f504 710a 	add.w	r1, r4, #552	; 0x228
 800070c:	6800      	ldr	r0, [r0, #0]
 800070e:	f001 f965 	bl	80019dc <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000712:	4628      	mov	r0, r5
 8000714:	bd38      	pop	{r3, r4, r5, pc}

08000716 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000716:	f001 010f 	and.w	r1, r1, #15
 800071a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
}
 800071e:	f8b0 0244 	ldrh.w	r0, [r0, #580]	; 0x244
 8000722:	4770      	bx	lr

08000724 <HAL_PCD_EP_Transmit>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000724:	f001 017f 	and.w	r1, r1, #127	; 0x7f
{
 8000728:	b538      	push	{r3, r4, r5, lr}
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800072a:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800072e:	2500      	movs	r5, #0
  ep->xfer_len = len;
 8000730:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->is_in = 1U;
  ep->num = ep_addr & 0x7FU;
 8000734:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->is_in = 1U;
 8000738:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800073a:	4621      	mov	r1, r4
  ep->xfer_count = 0U;
 800073c:	6465      	str	r5, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800073e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000742:	3128      	adds	r1, #40	; 0x28
 8000744:	6800      	ldr	r0, [r0, #0]
 8000746:	f001 f949 	bl	80019dc <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800074a:	4628      	mov	r0, r5
 800074c:	bd38      	pop	{r3, r4, r5, pc}
	...

08000750 <HAL_PCD_IRQHandler>:
{ 
 8000750:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000754:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000756:	6800      	ldr	r0, [r0, #0]
 8000758:	f001 f92b 	bl	80019b2 <USB_ReadInterrupts>
 800075c:	0400      	lsls	r0, r0, #16
 800075e:	f100 8098 	bmi.w	8000892 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000762:	6820      	ldr	r0, [r4, #0]
 8000764:	f001 f925 	bl	80019b2 <USB_ReadInterrupts>
 8000768:	0541      	lsls	r1, r0, #21
 800076a:	d50f      	bpl.n	800078c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800076c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800076e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000770:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000778:	041b      	lsls	r3, r3, #16
 800077a:	0c1b      	lsrs	r3, r3, #16
 800077c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000780:	f002 fc53 	bl	800302a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000784:	2100      	movs	r1, #0
 8000786:	4620      	mov	r0, r4
 8000788:	f7ff ff58 	bl	800063c <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800078c:	6820      	ldr	r0, [r4, #0]
 800078e:	f001 f910 	bl	80019b2 <USB_ReadInterrupts>
 8000792:	0447      	lsls	r7, r0, #17
 8000794:	d508      	bpl.n	80007a8 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000796:	6822      	ldr	r2, [r4, #0]
 8000798:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800079c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007a0:	041b      	lsls	r3, r3, #16
 80007a2:	0c1b      	lsrs	r3, r3, #16
 80007a4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80007a8:	6820      	ldr	r0, [r4, #0]
 80007aa:	f001 f902 	bl	80019b2 <USB_ReadInterrupts>
 80007ae:	0486      	lsls	r6, r0, #18
 80007b0:	d508      	bpl.n	80007c4 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80007b2:	6822      	ldr	r2, [r4, #0]
 80007b4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007bc:	041b      	lsls	r3, r3, #16
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80007c4:	6820      	ldr	r0, [r4, #0]
 80007c6:	f001 f8f4 	bl	80019b2 <USB_ReadInterrupts>
 80007ca:	04c5      	lsls	r5, r0, #19
 80007cc:	d51c      	bpl.n	8000808 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80007ce:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80007d0:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80007d2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80007d6:	f023 0304 	bic.w	r3, r3, #4
 80007da:	041b      	lsls	r3, r3, #16
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80007e2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80007e6:	f023 0308 	bic.w	r3, r3, #8
 80007ea:	041b      	lsls	r3, r3, #16
 80007ec:	0c1b      	lsrs	r3, r3, #16
 80007ee:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80007f2:	f002 fc3d 	bl	8003070 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80007f6:	6822      	ldr	r2, [r4, #0]
 80007f8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000800:	041b      	lsls	r3, r3, #16
 8000802:	0c1b      	lsrs	r3, r3, #16
 8000804:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000808:	6820      	ldr	r0, [r4, #0]
 800080a:	f001 f8d2 	bl	80019b2 <USB_ReadInterrupts>
 800080e:	0500      	lsls	r0, r0, #20
 8000810:	d51d      	bpl.n	800084e <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000812:	6820      	ldr	r0, [r4, #0]
 8000814:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000818:	b29b      	uxth	r3, r3
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000822:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800082a:	041b      	lsls	r3, r3, #16
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000832:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000836:	b29b      	uxth	r3, r3
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000840:	f001 f8b7 	bl	80019b2 <USB_ReadInterrupts>
 8000844:	04c1      	lsls	r1, r0, #19
 8000846:	d402      	bmi.n	800084e <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000848:	4620      	mov	r0, r4
 800084a:	f002 fc01 	bl	8003050 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800084e:	6820      	ldr	r0, [r4, #0]
 8000850:	f001 f8af 	bl	80019b2 <USB_ReadInterrupts>
 8000854:	0582      	lsls	r2, r0, #22
 8000856:	d50b      	bpl.n	8000870 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000858:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800085a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800085c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000864:	041b      	lsls	r3, r3, #16
 8000866:	0c1b      	lsrs	r3, r3, #16
 8000868:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800086c:	f002 fbd9 	bl	8003022 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000870:	6820      	ldr	r0, [r4, #0]
 8000872:	f001 f89e 	bl	80019b2 <USB_ReadInterrupts>
 8000876:	05c3      	lsls	r3, r0, #23
 8000878:	d508      	bpl.n	800088c <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800087a:	6822      	ldr	r2, [r4, #0]
 800087c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000884:	041b      	lsls	r3, r3, #16
 8000886:	0c1b      	lsrs	r3, r3, #16
 8000888:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800088c:	b002      	add	sp, #8
 800088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000892:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000894:	4fc6      	ldr	r7, [pc, #792]	; (8000bb0 <HAL_PCD_IRQHandler+0x460>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000896:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8000bb4 <HAL_PCD_IRQHandler+0x464>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800089a:	f8df 931c 	ldr.w	r9, [pc, #796]	; 8000bb8 <HAL_PCD_IRQHandler+0x468>
  __IO uint16_t wIstr = 0;  
 800089e:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 80008a2:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80008a6:	6820      	ldr	r0, [r4, #0]
 80008a8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	f8ad 3004 	strh.w	r3, [sp, #4]
 80008b2:	041b      	lsls	r3, r3, #16
 80008b4:	f57f af55 	bpl.w	8000762 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80008b8:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 80008bc:	f015 050f 	ands.w	r5, r5, #15
 80008c0:	f040 80ab 	bne.w	8000a1a <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 80008c4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008c8:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 80008ca:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008ce:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 80008d0:	d126      	bne.n	8000920 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008d2:	403b      	ands	r3, r7
 80008d4:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80008d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80008de:	b29b      	uxth	r3, r3
 80008e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80008e8:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80008ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80008ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008f2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80008f4:	4413      	add	r3, r2
 80008f6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80008f8:	4620      	mov	r0, r4
 80008fa:	f002 fb8b 	bl	8003014 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80008fe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0cf      	beq.n	80008a6 <HAL_PCD_IRQHandler+0x156>
 8000906:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000908:	2a00      	cmp	r2, #0
 800090a:	d1cc      	bne.n	80008a6 <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800090c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000910:	6821      	ldr	r1, [r4, #0]
 8000912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000916:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800091a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800091e:	e7c2      	b.n	80008a6 <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000920:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000924:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000928:	051a      	lsls	r2, r3, #20
 800092a:	d51f      	bpl.n	800096c <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800092c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000930:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000934:	b29b      	uxth	r3, r3
 8000936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800093a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800093e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000942:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800094a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800094e:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000952:	f001 f921 	bl	8001b98 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000956:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000958:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800095a:	8813      	ldrh	r3, [r2, #0]
 800095c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000960:	051b      	lsls	r3, r3, #20
 8000962:	0d1b      	lsrs	r3, r3, #20
 8000964:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000966:	f002 fb47 	bl	8002ff8 <HAL_PCD_SetupStageCallback>
 800096a:	e79c      	b.n	80008a6 <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800096c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000970:	041b      	lsls	r3, r3, #16
 8000972:	d598      	bpl.n	80008a6 <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000974:	8803      	ldrh	r3, [r0, #0]
 8000976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800097a:	051b      	lsls	r3, r3, #20
 800097c:	0d1b      	lsrs	r3, r3, #20
 800097e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000980:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000984:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000988:	b29b      	uxth	r3, r3
 800098a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800098e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000992:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800099a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 800099e:	b163      	cbz	r3, 80009ba <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80009a0:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 80009a4:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 80009a8:	f001 f8f6 	bl	8001b98 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80009ac:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80009b0:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 80009b4:	4413      	add	r3, r2
 80009b6:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80009ba:	2100      	movs	r1, #0
 80009bc:	4620      	mov	r0, r4
 80009be:	f002 fb21 	bl	8003004 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009c2:	6822      	ldr	r2, [r4, #0]
 80009c4:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 80009c8:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80009cc:	2d3e      	cmp	r5, #62	; 0x3e
 80009ce:	b289      	uxth	r1, r1
 80009d0:	f101 0106 	add.w	r1, r1, #6
 80009d4:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80009d8:	d917      	bls.n	8000a0a <HAL_PCD_IRQHandler+0x2ba>
 80009da:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80009de:	06ee      	lsls	r6, r5, #27
 80009e0:	bf04      	itt	eq
 80009e2:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80009e6:	b29b      	uxtheq	r3, r3
 80009e8:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80009f2:	8813      	ldrh	r3, [r2, #0]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	ea03 0308 	and.w	r3, r3, r8
 80009fa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80009fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a06:	8013      	strh	r3, [r2, #0]
 8000a08:	e74d      	b.n	80008a6 <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000a0a:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000a0e:	07ed      	lsls	r5, r5, #31
 8000a10:	bf44      	itt	mi
 8000a12:	3301      	addmi	r3, #1
 8000a14:	b29b      	uxthmi	r3, r3
 8000a16:	029b      	lsls	r3, r3, #10
 8000a18:	e7e8      	b.n	80009ec <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000a1a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000a24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a28:	0419      	lsls	r1, r3, #16
 8000a2a:	d53f      	bpl.n	8000aac <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000a2c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a30:	eb04 1145 	add.w	r1, r4, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a38:	051b      	lsls	r3, r3, #20
 8000a3a:	0d1b      	lsrs	r3, r3, #20
 8000a3c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a40:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000a44:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8000a48:	ea4f 1a45 	mov.w	sl, r5, lsl #5
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d172      	bne.n	8000b36 <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a50:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a54:	f891 6228 	ldrb.w	r6, [r1, #552]	; 0x228
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	3306      	adds	r3, #6
 8000a5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8000a60:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8000a64:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000a68:	b136      	cbz	r6, 8000a78 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000a6a:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000a6e:	4633      	mov	r3, r6
 8000a70:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000a74:	f001 f890 	bl	8001b98 <USB_ReadPMA>
        ep->xfer_count+=count;
 8000a78:	eb04 010a 	add.w	r1, r4, sl
 8000a7c:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000a80:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000a84:	4433      	add	r3, r6
 8000a86:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a8a:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000a8e:	4432      	add	r2, r6
 8000a90:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a94:	b123      	cbz	r3, 8000aa0 <HAL_PCD_IRQHandler+0x350>
 8000a96:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000a9a:	4286      	cmp	r6, r0
 8000a9c:	f080 8081 	bcs.w	8000ba2 <HAL_PCD_IRQHandler+0x452>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000aa0:	44a2      	add	sl, r4
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000aa8:	f002 faac 	bl	8003004 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000aac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ab0:	061a      	lsls	r2, r3, #24
 8000ab2:	f57f aef8 	bpl.w	80008a6 <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ab6:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000ab8:	eb04 1145 	add.w	r1, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000abc:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000ac0:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	403b      	ands	r3, r7
 8000ac6:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000aca:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000ace:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8000ad2:	3502      	adds	r5, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d171      	bne.n	8000bbc <HAL_PCD_IRQHandler+0x46c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ad8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000adc:	f891 c028 	ldrb.w	ip, [r1, #40]	; 0x28
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8000ae8:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000aec:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000af4:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000af6:	b11b      	cbz	r3, 8000b00 <HAL_PCD_IRQHandler+0x3b0>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000af8:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000afa:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000afc:	f000 ff5f 	bl	80019be <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b00:	6822      	ldr	r2, [r4, #0]
 8000b02:	4426      	add	r6, r4
 8000b04:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000b08:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	3302      	adds	r3, #2
 8000b10:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000b14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000b18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000b1c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000b22:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000b24:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000b26:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b28:	4620      	mov	r0, r4
        ep->xfer_buff+=ep->xfer_count;
 8000b2a:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d17c      	bne.n	8000c2a <HAL_PCD_IRQHandler+0x4da>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b30:	f002 fa70 	bl	8003014 <HAL_PCD_DataInStageCallback>
 8000b34:	e6b7      	b.n	80008a6 <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000b36:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000b3a:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b3e:	00de      	lsls	r6, r3, #3
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b40:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000b44:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	4433      	add	r3, r6
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000b4c:	d01e      	beq.n	8000b8c <HAL_PCD_IRQHandler+0x43c>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b4e:	3302      	adds	r3, #2
 8000b50:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8000b54:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000b58:	b136      	cbz	r6, 8000b68 <HAL_PCD_IRQHandler+0x418>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000b5a:	4633      	mov	r3, r6
 8000b5c:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b60:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000b64:	f001 f818 	bl	8001b98 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000b68:	eb04 030a 	add.w	r3, r4, sl
 8000b6c:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000b70:	6822      	ldr	r2, [r4, #0]
 8000b72:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b7a:	051b      	lsls	r3, r3, #20
 8000b7c:	0d1b      	lsrs	r3, r3, #20
 8000b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b86:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b8a:	e775      	b.n	8000a78 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b8c:	3306      	adds	r3, #6
 8000b8e:	f852 6013 	ldr.w	r6, [r2, r3, lsl #1]
 8000b92:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e6      	beq.n	8000b68 <HAL_PCD_IRQHandler+0x418>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b9a:	4633      	mov	r3, r6
 8000b9c:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000ba0:	e7de      	b.n	8000b60 <HAL_PCD_IRQHandler+0x410>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000ba8:	f7ff fda0 	bl	80006ec <HAL_PCD_EP_Receive>
 8000bac:	e77e      	b.n	8000aac <HAL_PCD_IRQHandler+0x35c>
 8000bae:	bf00      	nop
 8000bb0:	ffff8f0f 	.word	0xffff8f0f
 8000bb4:	ffffbf8f 	.word	0xffffbf8f
 8000bb8:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000bbc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000bc0:	f830 e023 	ldrh.w	lr, [r0, r3, lsl #2]
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000bc4:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000bc8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000bcc:	f01e 0f40 	tst.w	lr, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	4463      	add	r3, ip
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000bd4:	d01d      	beq.n	8000c12 <HAL_PCD_IRQHandler+0x4c2>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000bdc:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000be4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000be6:	b11b      	cbz	r3, 8000bf0 <HAL_PCD_IRQHandler+0x4a0>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000be8:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000bea:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000bec:	f000 fee7 	bl	80019be <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000bf0:	19a3      	adds	r3, r4, r6
 8000bf2:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000bf6:	6822      	ldr	r2, [r4, #0]
 8000bf8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000bfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c00:	051b      	lsls	r3, r3, #20
 8000c02:	0d1b      	lsrs	r3, r3, #20
 8000c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000c10:	e776      	b.n	8000b00 <HAL_PCD_IRQHandler+0x3b0>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000c12:	3306      	adds	r3, #6
 8000c14:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000c18:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c20:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0e4      	beq.n	8000bf0 <HAL_PCD_IRQHandler+0x4a0>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000c26:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000c28:	e7df      	b.n	8000bea <HAL_PCD_IRQHandler+0x49a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000c2a:	f7ff fd7b 	bl	8000724 <HAL_PCD_EP_Transmit>
 8000c2e:	e63a      	b.n	80008a6 <HAL_PCD_IRQHandler+0x156>

08000c30 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000c30:	2201      	movs	r2, #1
{
 8000c32:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000c34:	b24b      	sxtb	r3, r1
 8000c36:	2b00      	cmp	r3, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c38:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000c3c:	bfb5      	itete	lt
 8000c3e:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000c42:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c46:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c48:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c4c:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 1U;
 8000c4e:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000c50:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c52:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000c54:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c58:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d00e      	beq.n	8000c7c <HAL_PCD_EP_SetStall+0x4c>
 8000c5e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000c62:	6800      	ldr	r0, [r0, #0]
 8000c64:	f000 fe29 	bl	80018ba <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000c68:	b925      	cbnz	r5, 8000c74 <HAL_PCD_EP_SetStall+0x44>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000c6a:	6820      	ldr	r0, [r4, #0]
 8000c6c:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000c70:	f000 fea3 	bl	80019ba <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000c74:	2000      	movs	r0, #0
 8000c76:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	e7fc      	b.n	8000c7a <HAL_PCD_EP_SetStall+0x4a>

08000c80 <HAL_PCD_EP_ClrStall>:
{
 8000c80:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000c82:	2500      	movs	r5, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000c84:	b24b      	sxtb	r3, r1
 8000c86:	2b00      	cmp	r3, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c88:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8000c8c:	bfb5      	itete	lt
 8000c8e:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000c92:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c96:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c98:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c9c:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000c9e:	708d      	strb	r5, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000ca0:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000ca2:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000ca4:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000ca8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d009      	beq.n	8000cc2 <HAL_PCD_EP_ClrStall+0x42>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000cb4:	6800      	ldr	r0, [r0, #0]
 8000cb6:	f000 fe32 	bl	800191e <USB_EPClearStall>
  return HAL_OK;
 8000cba:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd); 
 8000cbc:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
}
 8000cc0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	e7fc      	b.n	8000cc0 <HAL_PCD_EP_ClrStall+0x40>

08000cc6 <HAL_PCD_EP_Flush>:
{
 8000cc6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000cc8:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000ccc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d010      	beq.n	8000cf4 <HAL_PCD_EP_Flush+0x2e>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  if ((ep_addr & 0x80U) == 0x80U)
 8000cd8:	060b      	lsls	r3, r1, #24
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 8000cda:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
 8000cdc:	d507      	bpl.n	8000cee <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 8000cde:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000ce2:	f000 fbce 	bl	8001482 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8000cec:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 8000cee:	f000 fbca 	bl	8001486 <USB_FlushRxFifo>
 8000cf2:	e7f8      	b.n	8000ce6 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	e7f9      	b.n	8000cec <HAL_PCD_EP_Flush+0x26>

08000cf8 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000cf8:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000cfc:	bf1b      	ittet	ne
 8000cfe:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000d02:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000d06:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000d0a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000d0c:	bf08      	it	eq
 8000d0e:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  if (ep_kind == PCD_SNG_BUF)
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000d12:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8000d14:	b91a      	cbnz	r2, 8000d1e <HAL_PCDEx_PMAConfig+0x26>
    ep->doublebuffer = 0U;
 8000d16:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8000d18:	8081      	strh	r1, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000d1e:	2201      	movs	r2, #1
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000d20:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000d22:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000d24:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000d26:	8103      	strh	r3, [r0, #8]
 8000d28:	e7f7      	b.n	8000d1a <HAL_PCDEx_PMAConfig+0x22>

08000d2a <PWR_OverloadWfe>:

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
  __asm volatile( "wfe" );
 8000d2a:	bf20      	wfe
  __asm volatile( "nop" );
 8000d2c:	bf00      	nop
}
 8000d2e:	4770      	bx	lr

08000d30 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8000d30:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <HAL_PWR_ConfigPVD+0x64>)
 8000d32:	6801      	ldr	r1, [r0, #0]
 8000d34:	6813      	ldr	r3, [r2, #0]
 8000d36:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_PWR_ConfigPVD+0x68>)
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d46:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d4e:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d56:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d5e:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8000d60:	6842      	ldr	r2, [r0, #4]
 8000d62:	03d1      	lsls	r1, r2, #15
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8000d64:	bf42      	ittt	mi
 8000d66:	6819      	ldrmi	r1, [r3, #0]
 8000d68:	f441 3180 	orrmi.w	r1, r1, #65536	; 0x10000
 8000d6c:	6019      	strmi	r1, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8000d6e:	0390      	lsls	r0, r2, #14
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8000d70:	bf42      	ittt	mi
 8000d72:	6859      	ldrmi	r1, [r3, #4]
 8000d74:	f441 3180 	orrmi.w	r1, r1, #65536	; 0x10000
 8000d78:	6059      	strmi	r1, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8000d7a:	07d1      	lsls	r1, r2, #31
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8000d7c:	bf42      	ittt	mi
 8000d7e:	6899      	ldrmi	r1, [r3, #8]
 8000d80:	f441 3180 	orrmi.w	r1, r1, #65536	; 0x10000
 8000d84:	6099      	strmi	r1, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8000d86:	0792      	lsls	r2, r2, #30
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8000d88:	bf42      	ittt	mi
 8000d8a:	68da      	ldrmi	r2, [r3, #12]
 8000d8c:	f442 3280 	orrmi.w	r2, r2, #65536	; 0x10000
 8000d90:	60da      	strmi	r2, [r3, #12]
  }
}
 8000d92:	4770      	bx	lr
 8000d94:	40007000 	.word	0x40007000
 8000d98:	40010400 	.word	0x40010400

08000d9c <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4b01      	ldr	r3, [pc, #4]	; (8000da4 <HAL_PWR_EnablePVD+0x8>)
 8000da0:	611a      	str	r2, [r3, #16]
}
 8000da2:	4770      	bx	lr
 8000da4:	420e0000 	.word	0x420e0000

08000da8 <HAL_PWR_EnterSLEEPMode>:
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_PWR_EnterSLEEPMode+0x1c>)

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000daa:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000dac:	6913      	ldr	r3, [r2, #16]
 8000dae:	f023 0304 	bic.w	r3, r3, #4
 8000db2:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000db4:	d101      	bne.n	8000dba <HAL_PWR_EnterSLEEPMode+0x12>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000db6:	bf30      	wfi
}
 8000db8:	4770      	bx	lr
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8000dba:	bf40      	sev
  __ASM volatile ("wfe");
 8000dbc:	bf20      	wfe
 8000dbe:	bf20      	wfe
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_PWR_EnterSTOPMode+0x40>)
{
 8000dca:	b510      	push	{r4, lr}
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8000dcc:	6814      	ldr	r4, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000dce:	2901      	cmp	r1, #1
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8000dd0:	f024 0402 	bic.w	r4, r4, #2
 8000dd4:	6014      	str	r4, [r2, #0]
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	f023 0301 	bic.w	r3, r3, #1
 8000ddc:	ea43 0300 	orr.w	r3, r3, r0
 8000de0:	6013      	str	r3, [r2, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_PWR_EnterSTOPMode+0x44>)
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	f042 0204 	orr.w	r2, r2, #4
 8000dea:	611a      	str	r2, [r3, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000dec:	d105      	bne.n	8000dfa <HAL_PWR_EnterSTOPMode+0x32>
  __ASM volatile ("wfi");
 8000dee:	bf30      	wfi
    __SEV();
    PWR_OverloadWfe(); /* WFE redefine locally */
    PWR_OverloadWfe(); /* WFE redefine locally */
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000df0:	691a      	ldr	r2, [r3, #16]
 8000df2:	f022 0204 	bic.w	r2, r2, #4
 8000df6:	611a      	str	r2, [r3, #16]
}
 8000df8:	bd10      	pop	{r4, pc}
  __ASM volatile ("sev");
 8000dfa:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8000dfc:	f7ff ff95 	bl	8000d2a <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8000e00:	f7ff ff93 	bl	8000d2a <PWR_OverloadWfe>
 8000e04:	e7f4      	b.n	8000df0 <HAL_PWR_EnterSTOPMode+0x28>
 8000e06:	bf00      	nop
 8000e08:	40007000 	.word	0x40007000
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_PWR_PVD_IRQHandler>:
{
 8000e14:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8000e16:	4c05      	ldr	r4, [pc, #20]	; (8000e2c <HAL_PWR_PVD_IRQHandler+0x18>)
 8000e18:	6963      	ldr	r3, [r4, #20]
 8000e1a:	03db      	lsls	r3, r3, #15
 8000e1c:	d504      	bpl.n	8000e28 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8000e1e:	f7ff fff7 	bl	8000e10 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8000e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e26:	6163      	str	r3, [r4, #20]
}
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e30:	6803      	ldr	r3, [r0, #0]
{
 8000e32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e36:	07db      	lsls	r3, r3, #31
{
 8000e38:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3a:	d410      	bmi.n	8000e5e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	079f      	lsls	r7, r3, #30
 8000e40:	d45e      	bmi.n	8000f00 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e42:	682b      	ldr	r3, [r5, #0]
 8000e44:	0719      	lsls	r1, r3, #28
 8000e46:	f100 8095 	bmi.w	8000f74 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e4a:	682b      	ldr	r3, [r5, #0]
 8000e4c:	075a      	lsls	r2, r3, #29
 8000e4e:	f100 80c1 	bmi.w	8000fd4 <HAL_RCC_OscConfig+0x1a4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e52:	69ea      	ldr	r2, [r5, #28]
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 812d 	bne.w	80010b4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e014      	b.n	8000e88 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e5e:	4c91      	ldr	r4, [pc, #580]	; (80010a4 <HAL_RCC_OscConfig+0x274>)
 8000e60:	6863      	ldr	r3, [r4, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d007      	beq.n	8000e7a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e6a:	6863      	ldr	r3, [r4, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d10c      	bne.n	8000e8e <HAL_RCC_OscConfig+0x5e>
 8000e74:	6863      	ldr	r3, [r4, #4]
 8000e76:	03de      	lsls	r6, r3, #15
 8000e78:	d509      	bpl.n	8000e8e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	039c      	lsls	r4, r3, #14
 8000e7e:	d5dd      	bpl.n	8000e3c <HAL_RCC_OscConfig+0xc>
 8000e80:	686b      	ldr	r3, [r5, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1da      	bne.n	8000e3c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e86:	2001      	movs	r0, #1
}
 8000e88:	b002      	add	sp, #8
 8000e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8e:	686b      	ldr	r3, [r5, #4]
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e94:	d110      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x88>
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e9e:	f7ff f9a1 	bl	80001e4 <HAL_GetTick>
 8000ea2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	0398      	lsls	r0, r3, #14
 8000ea8:	d4c8      	bmi.n	8000e3c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eaa:	f7ff f99b 	bl	80001e4 <HAL_GetTick>
 8000eae:	1b80      	subs	r0, r0, r6
 8000eb0:	2864      	cmp	r0, #100	; 0x64
 8000eb2:	d9f7      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	e7e7      	b.n	8000e88 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb8:	b99b      	cbnz	r3, 8000ee2 <HAL_RCC_OscConfig+0xb2>
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec0:	6023      	str	r3, [r4, #0]
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000eca:	f7ff f98b 	bl	80001e4 <HAL_GetTick>
 8000ece:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	0399      	lsls	r1, r3, #14
 8000ed4:	d5b2      	bpl.n	8000e3c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed6:	f7ff f985 	bl	80001e4 <HAL_GetTick>
 8000eda:	1b80      	subs	r0, r0, r6
 8000edc:	2864      	cmp	r0, #100	; 0x64
 8000ede:	d9f7      	bls.n	8000ed0 <HAL_RCC_OscConfig+0xa0>
 8000ee0:	e7e8      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	d103      	bne.n	8000ef2 <HAL_RCC_OscConfig+0xc2>
 8000eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eee:	6023      	str	r3, [r4, #0]
 8000ef0:	e7d1      	b.n	8000e96 <HAL_RCC_OscConfig+0x66>
 8000ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef6:	6023      	str	r3, [r4, #0]
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efe:	e7cd      	b.n	8000e9c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f00:	4c68      	ldr	r4, [pc, #416]	; (80010a4 <HAL_RCC_OscConfig+0x274>)
 8000f02:	6863      	ldr	r3, [r4, #4]
 8000f04:	f013 0f0c 	tst.w	r3, #12
 8000f08:	d007      	beq.n	8000f1a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f0a:	6863      	ldr	r3, [r4, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d110      	bne.n	8000f36 <HAL_RCC_OscConfig+0x106>
 8000f14:	6863      	ldr	r3, [r4, #4]
 8000f16:	03da      	lsls	r2, r3, #15
 8000f18:	d40d      	bmi.n	8000f36 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	079b      	lsls	r3, r3, #30
 8000f1e:	d502      	bpl.n	8000f26 <HAL_RCC_OscConfig+0xf6>
 8000f20:	692b      	ldr	r3, [r5, #16]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d1af      	bne.n	8000e86 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	696a      	ldr	r2, [r5, #20]
 8000f2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f32:	6023      	str	r3, [r4, #0]
 8000f34:	e785      	b.n	8000e42 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f36:	692a      	ldr	r2, [r5, #16]
 8000f38:	4b5b      	ldr	r3, [pc, #364]	; (80010a8 <HAL_RCC_OscConfig+0x278>)
 8000f3a:	b16a      	cbz	r2, 8000f58 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f40:	f7ff f950 	bl	80001e4 <HAL_GetTick>
 8000f44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	079f      	lsls	r7, r3, #30
 8000f4a:	d4ec      	bmi.n	8000f26 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff f94a 	bl	80001e4 <HAL_GetTick>
 8000f50:	1b80      	subs	r0, r0, r6
 8000f52:	2802      	cmp	r0, #2
 8000f54:	d9f7      	bls.n	8000f46 <HAL_RCC_OscConfig+0x116>
 8000f56:	e7ad      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000f58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f5a:	f7ff f943 	bl	80001e4 <HAL_GetTick>
 8000f5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	0798      	lsls	r0, r3, #30
 8000f64:	f57f af6d 	bpl.w	8000e42 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f68:	f7ff f93c 	bl	80001e4 <HAL_GetTick>
 8000f6c:	1b80      	subs	r0, r0, r6
 8000f6e:	2802      	cmp	r0, #2
 8000f70:	d9f6      	bls.n	8000f60 <HAL_RCC_OscConfig+0x130>
 8000f72:	e79f      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f74:	69aa      	ldr	r2, [r5, #24]
 8000f76:	4e4b      	ldr	r6, [pc, #300]	; (80010a4 <HAL_RCC_OscConfig+0x274>)
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_RCC_OscConfig+0x278>)
 8000f7a:	b1e2      	cbz	r2, 8000fb6 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000f82:	f7ff f92f 	bl	80001e4 <HAL_GetTick>
 8000f86:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000f8a:	079b      	lsls	r3, r3, #30
 8000f8c:	d50d      	bpl.n	8000faa <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f8e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <HAL_RCC_OscConfig+0x27c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f9a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("nop");
 8000f9c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000f9e:	9b01      	ldr	r3, [sp, #4]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	9201      	str	r2, [sp, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f9      	bne.n	8000f9c <HAL_RCC_OscConfig+0x16c>
 8000fa8:	e74f      	b.n	8000e4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000faa:	f7ff f91b 	bl	80001e4 <HAL_GetTick>
 8000fae:	1b00      	subs	r0, r0, r4
 8000fb0:	2802      	cmp	r0, #2
 8000fb2:	d9e9      	bls.n	8000f88 <HAL_RCC_OscConfig+0x158>
 8000fb4:	e77e      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000fb6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000fba:	f7ff f913 	bl	80001e4 <HAL_GetTick>
 8000fbe:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000fc2:	079f      	lsls	r7, r3, #30
 8000fc4:	f57f af41 	bpl.w	8000e4a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc8:	f7ff f90c 	bl	80001e4 <HAL_GetTick>
 8000fcc:	1b00      	subs	r0, r0, r4
 8000fce:	2802      	cmp	r0, #2
 8000fd0:	d9f6      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x190>
 8000fd2:	e76f      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd4:	4c33      	ldr	r4, [pc, #204]	; (80010a4 <HAL_RCC_OscConfig+0x274>)
 8000fd6:	69e3      	ldr	r3, [r4, #28]
 8000fd8:	00d8      	lsls	r0, r3, #3
 8000fda:	d424      	bmi.n	8001026 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000fdc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	69e3      	ldr	r3, [r4, #28]
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61e3      	str	r3, [r4, #28]
 8000fe6:	69e3      	ldr	r3, [r4, #28]
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	4e2f      	ldr	r6, [pc, #188]	; (80010b0 <HAL_RCC_OscConfig+0x280>)
 8000ff2:	6833      	ldr	r3, [r6, #0]
 8000ff4:	05d9      	lsls	r1, r3, #23
 8000ff6:	d518      	bpl.n	800102a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff8:	68eb      	ldr	r3, [r5, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d126      	bne.n	800104c <HAL_RCC_OscConfig+0x21c>
 8000ffe:	6a23      	ldr	r3, [r4, #32]
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001006:	f7ff f8ed 	bl	80001e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800100a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800100e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001010:	6a23      	ldr	r3, [r4, #32]
 8001012:	079b      	lsls	r3, r3, #30
 8001014:	d53f      	bpl.n	8001096 <HAL_RCC_OscConfig+0x266>
    if(pwrclkchanged == SET)
 8001016:	2f00      	cmp	r7, #0
 8001018:	f43f af1b 	beq.w	8000e52 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800101c:	69e3      	ldr	r3, [r4, #28]
 800101e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001022:	61e3      	str	r3, [r4, #28]
 8001024:	e715      	b.n	8000e52 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001026:	2700      	movs	r7, #0
 8001028:	e7e2      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102a:	6833      	ldr	r3, [r6, #0]
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001032:	f7ff f8d7 	bl	80001e4 <HAL_GetTick>
 8001036:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	6833      	ldr	r3, [r6, #0]
 800103a:	05da      	lsls	r2, r3, #23
 800103c:	d4dc      	bmi.n	8000ff8 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103e:	f7ff f8d1 	bl	80001e4 <HAL_GetTick>
 8001042:	eba0 0008 	sub.w	r0, r0, r8
 8001046:	2864      	cmp	r0, #100	; 0x64
 8001048:	d9f6      	bls.n	8001038 <HAL_RCC_OscConfig+0x208>
 800104a:	e733      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	b9ab      	cbnz	r3, 800107a <HAL_RCC_OscConfig+0x24a>
 800104e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001050:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6223      	str	r3, [r4, #32]
 800105a:	6a23      	ldr	r3, [r4, #32]
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001062:	f7ff f8bf 	bl	80001e4 <HAL_GetTick>
 8001066:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001068:	6a23      	ldr	r3, [r4, #32]
 800106a:	0798      	lsls	r0, r3, #30
 800106c:	d5d3      	bpl.n	8001016 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff f8b9 	bl	80001e4 <HAL_GetTick>
 8001072:	1b80      	subs	r0, r0, r6
 8001074:	4540      	cmp	r0, r8
 8001076:	d9f7      	bls.n	8001068 <HAL_RCC_OscConfig+0x238>
 8001078:	e71c      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107a:	2b05      	cmp	r3, #5
 800107c:	6a23      	ldr	r3, [r4, #32]
 800107e:	d103      	bne.n	8001088 <HAL_RCC_OscConfig+0x258>
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6223      	str	r3, [r4, #32]
 8001086:	e7ba      	b.n	8000ffe <HAL_RCC_OscConfig+0x1ce>
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6223      	str	r3, [r4, #32]
 800108e:	6a23      	ldr	r3, [r4, #32]
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	e7b6      	b.n	8001004 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff f8a5 	bl	80001e4 <HAL_GetTick>
 800109a:	1b80      	subs	r0, r0, r6
 800109c:	4540      	cmp	r0, r8
 800109e:	d9b7      	bls.n	8001010 <HAL_RCC_OscConfig+0x1e0>
 80010a0:	e708      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	42420000 	.word	0x42420000
 80010ac:	200000ac 	.word	0x200000ac
 80010b0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b4:	4c23      	ldr	r4, [pc, #140]	; (8001144 <HAL_RCC_OscConfig+0x314>)
 80010b6:	6863      	ldr	r3, [r4, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b08      	cmp	r3, #8
 80010be:	f43f aee2 	beq.w	8000e86 <HAL_RCC_OscConfig+0x56>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c2:	2a02      	cmp	r2, #2
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_RCC_OscConfig+0x318>)
        __HAL_RCC_PLL_DISABLE();
 80010ca:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010cc:	d12c      	bne.n	8001128 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80010ce:	f7ff f889 	bl	80001e4 <HAL_GetTick>
 80010d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	0199      	lsls	r1, r3, #6
 80010d8:	d420      	bmi.n	800111c <HAL_RCC_OscConfig+0x2ec>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010da:	6a2b      	ldr	r3, [r5, #32]
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d105      	bne.n	80010ee <HAL_RCC_OscConfig+0x2be>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010e2:	6862      	ldr	r2, [r4, #4]
 80010e4:	68a9      	ldr	r1, [r5, #8]
 80010e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80010ea:	430a      	orrs	r2, r1
 80010ec:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80010f0:	6862      	ldr	r2, [r4, #4]
 80010f2:	430b      	orrs	r3, r1
 80010f4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80010f8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80010fa:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_RCC_OscConfig+0x318>)
 8001100:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001102:	f7ff f86f 	bl	80001e4 <HAL_GetTick>
 8001106:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	019a      	lsls	r2, r3, #6
 800110c:	f53f aea5 	bmi.w	8000e5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001110:	f7ff f868 	bl	80001e4 <HAL_GetTick>
 8001114:	1b40      	subs	r0, r0, r5
 8001116:	2802      	cmp	r0, #2
 8001118:	d9f6      	bls.n	8001108 <HAL_RCC_OscConfig+0x2d8>
 800111a:	e6cb      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff f862 	bl	80001e4 <HAL_GetTick>
 8001120:	1b80      	subs	r0, r0, r6
 8001122:	2802      	cmp	r0, #2
 8001124:	d9d6      	bls.n	80010d4 <HAL_RCC_OscConfig+0x2a4>
 8001126:	e6c5      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001128:	f7ff f85c 	bl	80001e4 <HAL_GetTick>
 800112c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	019b      	lsls	r3, r3, #6
 8001132:	f57f ae92 	bpl.w	8000e5a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff f855 	bl	80001e4 <HAL_GetTick>
 800113a:	1b40      	subs	r0, r0, r5
 800113c:	2802      	cmp	r0, #2
 800113e:	d9f6      	bls.n	800112e <HAL_RCC_OscConfig+0x2fe>
 8001140:	e6b8      	b.n	8000eb4 <HAL_RCC_OscConfig+0x84>
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	42420000 	.word	0x42420000

0800114c <HAL_RCC_GetSysClockFreq>:
{
 800114c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001150:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001152:	ac02      	add	r4, sp, #8
 8001154:	f103 0510 	add.w	r5, r3, #16
 8001158:	4622      	mov	r2, r4
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	6859      	ldr	r1, [r3, #4]
 800115e:	3308      	adds	r3, #8
 8001160:	c203      	stmia	r2!, {r0, r1}
 8001162:	42ab      	cmp	r3, r5
 8001164:	4614      	mov	r4, r2
 8001166:	d1f7      	bne.n	8001158 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001168:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800116c:	4911      	ldr	r1, [pc, #68]	; (80011b4 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800116e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001172:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001174:	f003 020c 	and.w	r2, r3, #12
 8001178:	2a08      	cmp	r2, #8
 800117a:	d117      	bne.n	80011ac <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800117c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001180:	3218      	adds	r2, #24
 8001182:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001184:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001186:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800118a:	d50c      	bpl.n	80011a6 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800118c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001190:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001194:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001196:	3318      	adds	r3, #24
 8001198:	446b      	add	r3, sp
 800119a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800119e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80011a2:	b007      	add	sp, #28
 80011a4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_RCC_GetSysClockFreq+0x70>)
 80011a8:	4358      	muls	r0, r3
 80011aa:	e7fa      	b.n	80011a2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80011ae:	e7f8      	b.n	80011a2 <HAL_RCC_GetSysClockFreq+0x56>
 80011b0:	08003e80 	.word	0x08003e80
 80011b4:	40021000 	.word	0x40021000
 80011b8:	007a1200 	.word	0x007a1200
 80011bc:	003d0900 	.word	0x003d0900

080011c0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011c0:	4a53      	ldr	r2, [pc, #332]	; (8001310 <HAL_RCC_ClockConfig+0x150>)
{
 80011c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011c6:	6813      	ldr	r3, [r2, #0]
{
 80011c8:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	428b      	cmp	r3, r1
{
 80011d0:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011d2:	d328      	bcc.n	8001226 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d4:	6821      	ldr	r1, [r4, #0]
 80011d6:	078e      	lsls	r6, r1, #30
 80011d8:	d432      	bmi.n	8001240 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011da:	07ca      	lsls	r2, r1, #31
 80011dc:	d445      	bmi.n	800126a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011de:	4a4c      	ldr	r2, [pc, #304]	; (8001310 <HAL_RCC_ClockConfig+0x150>)
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	42ab      	cmp	r3, r5
 80011e8:	d87f      	bhi.n	80012ea <HAL_RCC_ClockConfig+0x12a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ea:	6822      	ldr	r2, [r4, #0]
 80011ec:	4d49      	ldr	r5, [pc, #292]	; (8001314 <HAL_RCC_ClockConfig+0x154>)
 80011ee:	f012 0f04 	tst.w	r2, #4
 80011f2:	f040 8085 	bne.w	8001300 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f6:	0713      	lsls	r3, r2, #28
 80011f8:	d506      	bpl.n	8001208 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011fa:	686b      	ldr	r3, [r5, #4]
 80011fc:	6922      	ldr	r2, [r4, #16]
 80011fe:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001202:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001206:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001208:	f7ff ffa0 	bl	800114c <HAL_RCC_GetSysClockFreq>
 800120c:	686b      	ldr	r3, [r5, #4]
 800120e:	4a42      	ldr	r2, [pc, #264]	; (8001318 <HAL_RCC_ClockConfig+0x158>)
 8001210:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	40d8      	lsrs	r0, r3
 8001218:	4b40      	ldr	r3, [pc, #256]	; (800131c <HAL_RCC_ClockConfig+0x15c>)
 800121a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800121c:	2000      	movs	r0, #0
 800121e:	f7fe ff9f 	bl	8000160 <HAL_InitTick>
  return HAL_OK;
 8001222:	2000      	movs	r0, #0
 8001224:	e00a      	b.n	800123c <HAL_RCC_ClockConfig+0x7c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	6813      	ldr	r3, [r2, #0]
 8001228:	f023 0307 	bic.w	r3, r3, #7
 800122c:	430b      	orrs	r3, r1
 800122e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001230:	6813      	ldr	r3, [r2, #0]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	428b      	cmp	r3, r1
 8001238:	d0cc      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800123a:	2001      	movs	r0, #1
}
 800123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <HAL_RCC_ClockConfig+0x154>)
 8001242:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001246:	bf1e      	ittt	ne
 8001248:	685a      	ldrne	r2, [r3, #4]
 800124a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800124e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001250:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001252:	bf42      	ittt	mi
 8001254:	685a      	ldrmi	r2, [r3, #4]
 8001256:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800125a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	68a0      	ldr	r0, [r4, #8]
 8001260:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001264:	4302      	orrs	r2, r0
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	e7b7      	b.n	80011da <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	6862      	ldr	r2, [r4, #4]
 800126c:	4e29      	ldr	r6, [pc, #164]	; (8001314 <HAL_RCC_ClockConfig+0x154>)
 800126e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001270:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001272:	d11b      	bne.n	80012ac <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001274:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	d0df      	beq.n	800123a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127a:	6873      	ldr	r3, [r6, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001280:	f023 0303 	bic.w	r3, r3, #3
 8001284:	4313      	orrs	r3, r2
 8001286:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001288:	f7fe ffac 	bl	80001e4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800128e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001290:	2b01      	cmp	r3, #1
 8001292:	d113      	bne.n	80012bc <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001294:	6873      	ldr	r3, [r6, #4]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d09f      	beq.n	80011de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800129e:	f7fe ffa1 	bl	80001e4 <HAL_GetTick>
 80012a2:	1bc0      	subs	r0, r0, r7
 80012a4:	4540      	cmp	r0, r8
 80012a6:	d9f5      	bls.n	8001294 <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 80012a8:	2003      	movs	r0, #3
 80012aa:	e7c7      	b.n	800123c <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ac:	2a02      	cmp	r2, #2
 80012ae:	d102      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012b4:	e7e0      	b.n	8001278 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	f013 0f02 	tst.w	r3, #2
 80012ba:	e7dd      	b.n	8001278 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d10f      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c0:	6873      	ldr	r3, [r6, #4]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d089      	beq.n	80011de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ca:	f7fe ff8b 	bl	80001e4 <HAL_GetTick>
 80012ce:	1bc0      	subs	r0, r0, r7
 80012d0:	4540      	cmp	r0, r8
 80012d2:	d9f5      	bls.n	80012c0 <HAL_RCC_ClockConfig+0x100>
 80012d4:	e7e8      	b.n	80012a8 <HAL_RCC_ClockConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d6:	f7fe ff85 	bl	80001e4 <HAL_GetTick>
 80012da:	1bc0      	subs	r0, r0, r7
 80012dc:	4540      	cmp	r0, r8
 80012de:	d8e3      	bhi.n	80012a8 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e0:	6873      	ldr	r3, [r6, #4]
 80012e2:	f013 0f0c 	tst.w	r3, #12
 80012e6:	d1f6      	bne.n	80012d6 <HAL_RCC_ClockConfig+0x116>
 80012e8:	e779      	b.n	80011de <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f023 0307 	bic.w	r3, r3, #7
 80012f0:	432b      	orrs	r3, r5
 80012f2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012f4:	6813      	ldr	r3, [r2, #0]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	42ab      	cmp	r3, r5
 80012fc:	d19d      	bne.n	800123a <HAL_RCC_ClockConfig+0x7a>
 80012fe:	e774      	b.n	80011ea <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001300:	686b      	ldr	r3, [r5, #4]
 8001302:	68e1      	ldr	r1, [r4, #12]
 8001304:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001308:	430b      	orrs	r3, r1
 800130a:	606b      	str	r3, [r5, #4]
 800130c:	e773      	b.n	80011f6 <HAL_RCC_ClockConfig+0x36>
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000
 8001314:	40021000 	.word	0x40021000
 8001318:	08003ec2 	.word	0x08003ec2
 800131c:	200000ac 	.word	0x200000ac

08001320 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001320:	6803      	ldr	r3, [r0, #0]
{
 8001322:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001326:	07d9      	lsls	r1, r3, #31
{
 8001328:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800132a:	d520      	bpl.n	800136e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132c:	4c36      	ldr	r4, [pc, #216]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800132e:	69e3      	ldr	r3, [r4, #28]
 8001330:	00da      	lsls	r2, r3, #3
 8001332:	d432      	bmi.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001334:	2601      	movs	r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	69e3      	ldr	r3, [r4, #28]
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	61e3      	str	r3, [r4, #28]
 800133e:	69e3      	ldr	r3, [r4, #28]
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4f30      	ldr	r7, [pc, #192]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	d526      	bpl.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001350:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001352:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001356:	d136      	bne.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001358:	6a23      	ldr	r3, [r4, #32]
 800135a:	686a      	ldr	r2, [r5, #4]
 800135c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001360:	4313      	orrs	r3, r2
 8001362:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001364:	b11e      	cbz	r6, 800136e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001366:	69e3      	ldr	r3, [r4, #28]
 8001368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800136e:	6828      	ldr	r0, [r5, #0]
 8001370:	0783      	lsls	r3, r0, #30
 8001372:	d506      	bpl.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001374:	4924      	ldr	r1, [pc, #144]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001376:	68ab      	ldr	r3, [r5, #8]
 8001378:	684a      	ldr	r2, [r1, #4]
 800137a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800137e:	431a      	orrs	r2, r3
 8001380:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001382:	f010 0010 	ands.w	r0, r0, #16
 8001386:	d01b      	beq.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800138a:	68e9      	ldr	r1, [r5, #12]
 800138c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800138e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001390:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001394:	430b      	orrs	r3, r1
 8001396:	6053      	str	r3, [r2, #4]
 8001398:	e012      	b.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800139a:	2600      	movs	r6, #0
 800139c:	e7d4      	b.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80013a6:	f7fe ff1d 	bl	80001e4 <HAL_GetTick>
 80013aa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	05d8      	lsls	r0, r3, #23
 80013b0:	d4ce      	bmi.n	8001350 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b2:	f7fe ff17 	bl	80001e4 <HAL_GetTick>
 80013b6:	eba0 0008 	sub.w	r0, r0, r8
 80013ba:	2864      	cmp	r0, #100	; 0x64
 80013bc:	d9f6      	bls.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80013be:	2003      	movs	r0, #3
}
 80013c0:	b002      	add	sp, #8
 80013c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013c6:	686a      	ldr	r2, [r5, #4]
 80013c8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d0c3      	beq.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80013d0:	2001      	movs	r0, #1
 80013d2:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013d4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80013d6:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013da:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013e0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80013e4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80013e6:	07d9      	lsls	r1, r3, #31
 80013e8:	d5b6      	bpl.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80013ea:	f7fe fefb 	bl	80001e4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80013f2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	6a23      	ldr	r3, [r4, #32]
 80013f6:	079a      	lsls	r2, r3, #30
 80013f8:	d4ae      	bmi.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7fe fef3 	bl	80001e4 <HAL_GetTick>
 80013fe:	1bc0      	subs	r0, r0, r7
 8001400:	4540      	cmp	r0, r8
 8001402:	d9f7      	bls.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001404:	e7db      	b.n	80013be <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	40007000 	.word	0x40007000
 8001410:	42420000 	.word	0x42420000

08001414 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001414:	b084      	sub	sp, #16
 8001416:	a801      	add	r0, sp, #4
 8001418:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800141c:	b004      	add	sp, #16
 800141e:	2000      	movs	r0, #0
 8001420:	4770      	bx	lr

08001422 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001422:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001426:	b29b      	uxth	r3, r3
 8001428:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800142c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001430:	2000      	movs	r0, #0
 8001432:	4770      	bx	lr

08001434 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001434:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001438:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 800143c:	045b      	lsls	r3, r3, #17
 800143e:	0c5b      	lsrs	r3, r3, #17
 8001440:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001444:	2000      	movs	r0, #0
 8001446:	4770      	bx	lr

08001448 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001448:	2000      	movs	r0, #0
 800144a:	4770      	bx	lr

0800144c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800144c:	b084      	sub	sp, #16
 800144e:	b510      	push	{r4, lr}
 8001450:	4604      	mov	r4, r0
 8001452:	a803      	add	r0, sp, #12
 8001454:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001458:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 800145a:	2301      	movs	r3, #1
 800145c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 8001460:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001464:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001468:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800146c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8001470:	b29b      	uxth	r3, r3
 8001472:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001476:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 800147a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800147e:	b004      	add	sp, #16
 8001480:	4770      	bx	lr

08001482 <USB_FlushTxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001482:	2000      	movs	r0, #0
 8001484:	4770      	bx	lr

08001486 <USB_FlushRxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001486:	2000      	movs	r0, #0
 8001488:	4770      	bx	lr
	...

0800148c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* initialize Endpoint */
  switch (ep->type)
 800148e:	78cb      	ldrb	r3, [r1, #3]
 8001490:	780a      	ldrb	r2, [r1, #0]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d80f      	bhi.n	80014b6 <USB_ActivateEndpoint+0x2a>
 8001496:	e8df f003 	tbb	[pc, r3]
 800149a:	6102      	.short	0x6102
 800149c:	564d      	.short	0x564d
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800149e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80014a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014aa:	041b      	lsls	r3, r3, #16
 80014ac:	0c1b      	lsrs	r3, r3, #16
 80014ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80014b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80014b6:	f640 720f 	movw	r2, #3855	; 0xf0f
 80014ba:	780b      	ldrb	r3, [r1, #0]
 80014bc:	f500 6680 	add.w	r6, r0, #1024	; 0x400
 80014c0:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 80014c4:	4014      	ands	r4, r2
 80014c6:	431c      	orrs	r4, r3
 80014c8:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80014cc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80014d0:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80014d4:	7a8d      	ldrb	r5, [r1, #10]
 80014d6:	00dc      	lsls	r4, r3, #3
 80014d8:	2d00      	cmp	r5, #0
 80014da:	f040 8089 	bne.w	80015f0 <USB_ActivateEndpoint+0x164>
  {
    if (ep->is_in)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80014de:	888d      	ldrh	r5, [r1, #4]
    if (ep->is_in)
 80014e0:	784f      	ldrb	r7, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80014e2:	086d      	lsrs	r5, r5, #1
 80014e4:	006d      	lsls	r5, r5, #1
    if (ep->is_in)
 80014e6:	2f00      	cmp	r7, #0
 80014e8:	d043      	beq.n	8001572 <USB_ActivateEndpoint+0xe6>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80014ea:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80014ee:	b289      	uxth	r1, r1
 80014f0:	440c      	add	r4, r1
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80014f2:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80014f6:	f846 5014 	str.w	r5, [r6, r4, lsl #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80014fa:	0649      	lsls	r1, r1, #25
 80014fc:	d508      	bpl.n	8001510 <USB_ActivateEndpoint+0x84>
 80014fe:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001502:	400a      	ands	r2, r1
 8001504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001508:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800150c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001510:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001514:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800151c:	0412      	lsls	r2, r2, #16
 800151e:	0c12      	lsrs	r2, r2, #16
 8001520:	f082 0220 	eor.w	r2, r2, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001524:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001528:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800152c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
  
  return HAL_OK;
}
 8001530:	2000      	movs	r0, #0
 8001532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001534:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001538:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800153c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	0c1b      	lsrs	r3, r3, #16
 8001544:	e7b5      	b.n	80014b2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001546:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800154a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800154e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001552:	041b      	lsls	r3, r3, #16
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800155a:	e7aa      	b.n	80014b2 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800155c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001560:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001570:	e79f      	b.n	80014b2 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001572:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001576:	b292      	uxth	r2, r2
 8001578:	4422      	add	r2, r4
 800157a:	3204      	adds	r2, #4
 800157c:	f846 5012 	str.w	r5, [r6, r2, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001580:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001584:	6909      	ldr	r1, [r1, #16]
 8001586:	b292      	uxth	r2, r2
 8001588:	3206      	adds	r2, #6
 800158a:	293e      	cmp	r1, #62	; 0x3e
 800158c:	4414      	add	r4, r2
 800158e:	d927      	bls.n	80015e0 <USB_ActivateEndpoint+0x154>
 8001590:	f3c1 154f 	ubfx	r5, r1, #5, #16
 8001594:	06ca      	lsls	r2, r1, #27
 8001596:	bf04      	itt	eq
 8001598:	f105 32ff 	addeq.w	r2, r5, #4294967295
 800159c:	b295      	uxtheq	r5, r2
 800159e:	4a65      	ldr	r2, [pc, #404]	; (8001734 <USB_ActivateEndpoint+0x2a8>)
 80015a0:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f846 2014 	str.w	r2, [r6, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80015aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80015ae:	0456      	lsls	r6, r2, #17
 80015b0:	d50b      	bpl.n	80015ca <USB_ActivateEndpoint+0x13e>
 80015b2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80015b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015ba:	0512      	lsls	r2, r2, #20
 80015bc:	0d12      	lsrs	r2, r2, #20
 80015be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80015c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015c6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80015ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80015ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015d6:	0412      	lsls	r2, r2, #16
 80015d8:	0c12      	lsrs	r2, r2, #16
 80015da:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80015de:	e7a1      	b.n	8001524 <USB_ActivateEndpoint+0x98>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80015e0:	f3c1 024f 	ubfx	r2, r1, #1, #16
 80015e4:	07cf      	lsls	r7, r1, #31
 80015e6:	bf44      	itt	mi
 80015e8:	3201      	addmi	r2, #1
 80015ea:	b292      	uxthmi	r2, r2
 80015ec:	0292      	lsls	r2, r2, #10
 80015ee:	e7d9      	b.n	80015a4 <USB_ActivateEndpoint+0x118>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80015f0:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 80015f4:	f425 75f8 	bic.w	r5, r5, #496	; 0x1f0
 80015f8:	052d      	lsls	r5, r5, #20
 80015fa:	0d2d      	lsrs	r5, r5, #20
 80015fc:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8001600:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001604:	f820 5023 	strh.w	r5, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001608:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800160c:	88cf      	ldrh	r7, [r1, #6]
 800160e:	b2ad      	uxth	r5, r5
 8001610:	087f      	lsrs	r7, r7, #1
 8001612:	4425      	add	r5, r4
 8001614:	007f      	lsls	r7, r7, #1
 8001616:	f846 7015 	str.w	r7, [r6, r5, lsl #1]
 800161a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800161e:	b2ad      	uxth	r5, r5
 8001620:	442c      	add	r4, r5
 8001622:	890d      	ldrh	r5, [r1, #8]
 8001624:	3404      	adds	r4, #4
 8001626:	086d      	lsrs	r5, r5, #1
 8001628:	006d      	lsls	r5, r5, #1
 800162a:	f846 5014 	str.w	r5, [r6, r4, lsl #1]
    if (ep->is_in==0)
 800162e:	7849      	ldrb	r1, [r1, #1]
 8001630:	2900      	cmp	r1, #0
 8001632:	d141      	bne.n	80016b8 <USB_ActivateEndpoint+0x22c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001634:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001638:	044d      	lsls	r5, r1, #17
 800163a:	d508      	bpl.n	800164e <USB_ActivateEndpoint+0x1c2>
 800163c:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001640:	400a      	ands	r2, r1
 8001642:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800164a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800164e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001652:	0654      	lsls	r4, r2, #25
 8001654:	d50b      	bpl.n	800166e <USB_ActivateEndpoint+0x1e2>
 8001656:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800165a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800165e:	0512      	lsls	r2, r2, #20
 8001660:	0d12      	lsrs	r2, r2, #20
 8001662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001666:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800166a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800166e:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8001672:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001676:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800167a:	0512      	lsls	r2, r2, #20
 800167c:	0d12      	lsrs	r2, r2, #20
 800167e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001682:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001686:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800168a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800168e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001692:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001696:	0412      	lsls	r2, r2, #16
 8001698:	0c12      	lsrs	r2, r2, #16
 800169a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800169e:	430a      	orrs	r2, r1
 80016a0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80016a4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80016ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80016b0:	0412      	lsls	r2, r2, #16
 80016b2:	0c12      	lsrs	r2, r2, #16
 80016b4:	430a      	orrs	r2, r1
 80016b6:	e739      	b.n	800152c <USB_ActivateEndpoint+0xa0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80016b8:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 80016bc:	0449      	lsls	r1, r1, #17
 80016be:	d508      	bpl.n	80016d2 <USB_ActivateEndpoint+0x246>
 80016c0:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 80016c4:	400a      	ands	r2, r1
 80016c6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80016ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ce:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80016d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016d6:	0652      	lsls	r2, r2, #25
 80016d8:	d50b      	bpl.n	80016f2 <USB_ActivateEndpoint+0x266>
 80016da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016e2:	0512      	lsls	r2, r2, #20
 80016e4:	0d12      	lsrs	r2, r2, #20
 80016e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80016ee:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80016f2:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 80016f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016fe:	0512      	lsls	r2, r2, #20
 8001700:	0d12      	lsrs	r2, r2, #20
 8001702:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001706:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800170a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800170e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001712:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800171a:	0412      	lsls	r2, r2, #16
 800171c:	0c12      	lsrs	r2, r2, #16
 800171e:	430a      	orrs	r2, r1
 8001720:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001724:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001728:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800172c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001730:	e7be      	b.n	80016b0 <USB_ActivateEndpoint+0x224>
 8001732:	bf00      	nop
 8001734:	ffff8000 	.word	0xffff8000

08001738 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
  {
    if (ep->is_in)
 8001738:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800173a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0) 
 800173c:	7a89      	ldrb	r1, [r1, #10]
 800173e:	bbb9      	cbnz	r1, 80017b0 <USB_DeactivateEndpoint+0x78>
    if (ep->is_in)
 8001740:	b1fa      	cbz	r2, 8001782 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001742:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001746:	0651      	lsls	r1, r2, #25
 8001748:	d50b      	bpl.n	8001762 <USB_DeactivateEndpoint+0x2a>
 800174a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800174e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001752:	0512      	lsls	r2, r2, #20
 8001754:	0d12      	lsrs	r2, r2, #20
 8001756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800175a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800175e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001762:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001766:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800176a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800176e:	0412      	lsls	r2, r2, #16
 8001770:	0c12      	lsrs	r2, r2, #16
 8001772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800177a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
  
  return HAL_OK;
}
 800177e:	2000      	movs	r0, #0
 8001780:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001782:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001786:	0452      	lsls	r2, r2, #17
 8001788:	d50b      	bpl.n	80017a2 <USB_DeactivateEndpoint+0x6a>
 800178a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800178e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001792:	0512      	lsls	r2, r2, #20
 8001794:	0d12      	lsrs	r2, r2, #20
 8001796:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800179a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800179e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80017a2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017ae:	e7de      	b.n	800176e <USB_DeactivateEndpoint+0x36>
    if (ep->is_in==0)
 80017b0:	2a00      	cmp	r2, #0
 80017b2:	d142      	bne.n	800183a <USB_DeactivateEndpoint+0x102>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017b4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017b8:	0451      	lsls	r1, r2, #17
 80017ba:	d50b      	bpl.n	80017d4 <USB_DeactivateEndpoint+0x9c>
 80017bc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017c4:	0512      	lsls	r2, r2, #20
 80017c6:	0d12      	lsrs	r2, r2, #20
 80017c8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80017cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017d0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017d4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017d8:	0652      	lsls	r2, r2, #25
 80017da:	d50b      	bpl.n	80017f4 <USB_DeactivateEndpoint+0xbc>
 80017dc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017e4:	0512      	lsls	r2, r2, #20
 80017e6:	0d12      	lsrs	r2, r2, #20
 80017e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80017f0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80017f4:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80017f8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80017fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001800:	0512      	lsls	r2, r2, #20
 8001802:	0d12      	lsrs	r2, r2, #20
 8001804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001808:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800180c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001810:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001814:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001818:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800181c:	0412      	lsls	r2, r2, #16
 800181e:	0c12      	lsrs	r2, r2, #16
 8001820:	430a      	orrs	r2, r1
 8001822:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001826:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800182a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800182e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001832:	0412      	lsls	r2, r2, #16
 8001834:	0c12      	lsrs	r2, r2, #16
 8001836:	430a      	orrs	r2, r1
 8001838:	e79f      	b.n	800177a <USB_DeactivateEndpoint+0x42>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800183a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800183e:	0451      	lsls	r1, r2, #17
 8001840:	d50b      	bpl.n	800185a <USB_DeactivateEndpoint+0x122>
 8001842:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001846:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800184a:	0512      	lsls	r2, r2, #20
 800184c:	0d12      	lsrs	r2, r2, #20
 800184e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001856:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800185a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800185e:	0652      	lsls	r2, r2, #25
 8001860:	d50b      	bpl.n	800187a <USB_DeactivateEndpoint+0x142>
 8001862:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001866:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800186a:	0512      	lsls	r2, r2, #20
 800186c:	0d12      	lsrs	r2, r2, #20
 800186e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001872:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001876:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800187a:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800187e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001882:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001886:	0512      	lsls	r2, r2, #20
 8001888:	0d12      	lsrs	r2, r2, #20
 800188a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800188e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001892:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001896:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800189a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800189e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018a2:	0412      	lsls	r2, r2, #16
 80018a4:	0c12      	lsrs	r2, r2, #16
 80018a6:	430a      	orrs	r2, r1
 80018a8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80018ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80018b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018b8:	e7bb      	b.n	8001832 <USB_DeactivateEndpoint+0xfa>

080018ba <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80018ba:	780a      	ldrb	r2, [r1, #0]
 80018bc:	b98a      	cbnz	r2, 80018e2 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80018be:	8803      	ldrh	r3, [r0, #0]
 80018c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018d0:	f083 0310 	eor.w	r3, r3, #16
 80018d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018dc:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 80018de:	2000      	movs	r0, #0
 80018e0:	4770      	bx	lr
    if (ep->is_in)
 80018e2:	784b      	ldrb	r3, [r1, #1]
 80018e4:	b183      	cbz	r3, 8001908 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80018e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80018fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001902:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001906:	e7ea      	b.n	80018de <USB_EPSetStall+0x24>
 8001908:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800190c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800191c:	e7ed      	b.n	80018fa <USB_EPSetStall+0x40>

0800191e <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 800191e:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001920:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in)
 8001922:	b30b      	cbz	r3, 8001968 <USB_EPClearStall+0x4a>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001924:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001928:	0659      	lsls	r1, r3, #25
 800192a:	d50b      	bpl.n	8001944 <USB_EPClearStall+0x26>
 800192c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001934:	051b      	lsls	r3, r3, #20
 8001936:	0d1b      	lsrs	r3, r3, #20
 8001938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001940:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001944:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800194c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	0c1b      	lsrs	r3, r3, #16
 8001954:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001960:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001964:	2000      	movs	r0, #0
 8001966:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001968:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800196c:	045b      	lsls	r3, r3, #17
 800196e:	d50b      	bpl.n	8001988 <USB_EPClearStall+0x6a>
 8001970:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001978:	051b      	lsls	r3, r3, #20
 800197a:	0d1b      	lsrs	r3, r3, #20
 800197c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001984:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001988:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800198c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	0c1b      	lsrs	r3, r3, #16
 8001998:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800199c:	e7dc      	b.n	8001958 <USB_EPClearStall+0x3a>

0800199e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 800199e:	b911      	cbnz	r1, 80019a6 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 80019a6:	2000      	movs	r0, #0
 80019a8:	4770      	bx	lr

080019aa <USB_DevConnect>:
 80019aa:	2000      	movs	r0, #0
 80019ac:	4770      	bx	lr

080019ae <USB_DevDisconnect>:
 80019ae:	2000      	movs	r0, #0
 80019b0:	4770      	bx	lr

080019b2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 80019b2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80019b6:	b280      	uxth	r0, r0
 80019b8:	4770      	bx	lr

080019ba <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80019ba:	2000      	movs	r0, #0
 80019bc:	4770      	bx	lr

080019be <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80019be:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80019c0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80019c4:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80019c6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80019ca:	b903      	cbnz	r3, 80019ce <USB_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80019cc:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80019ce:	f831 0b02 	ldrh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 80019d2:	3b01      	subs	r3, #1
    *pdwVal++ = temp2;
 80019d4:	f822 0b04 	strh.w	r0, [r2], #4
  for (index = nbytes; index != 0; index--)
 80019d8:	e7f7      	b.n	80019ca <USB_WritePMA+0xc>
	...

080019dc <USB_EPStartXfer>:
{
 80019dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1)
 80019de:	784a      	ldrb	r2, [r1, #1]
{
 80019e0:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 80019e2:	2a01      	cmp	r2, #1
{
 80019e4:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 80019e6:	698c      	ldr	r4, [r1, #24]
    if (ep->xfer_len > ep->maxpacket)
 80019e8:	690b      	ldr	r3, [r1, #16]
 80019ea:	7a88      	ldrb	r0, [r1, #10]
  if (ep->is_in == 1)
 80019ec:	d15b      	bne.n	8001aa6 <USB_EPStartXfer+0xca>
    if (ep->xfer_len > ep->maxpacket)
 80019ee:	429c      	cmp	r4, r3
      ep->xfer_len-=len; 
 80019f0:	bf8a      	itet	hi
 80019f2:	1ae2      	subhi	r2, r4, r3
      ep->xfer_len =0;
 80019f4:	2200      	movls	r2, #0
 80019f6:	461c      	movhi	r4, r3
 80019f8:	618a      	str	r2, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80019fa:	b2a3      	uxth	r3, r4
 80019fc:	6949      	ldr	r1, [r1, #20]
 80019fe:	f505 6780 	add.w	r7, r5, #1024	; 0x400
    if (ep->doublebuffer == 0) 
 8001a02:	b9f8      	cbnz	r0, 8001a44 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001a04:	88b2      	ldrh	r2, [r6, #4]
 8001a06:	4628      	mov	r0, r5
 8001a08:	f7ff ffd9 	bl	80019be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001a0c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001a10:	7832      	ldrb	r2, [r6, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3302      	adds	r3, #2
 8001a16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a1a:	f847 4013 	str.w	r4, [r7, r3, lsl #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001a1e:	7832      	ldrb	r2, [r6, #0]
 8001a20:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8001a3c:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a3e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001a44:	7832      	ldrb	r2, [r6, #0]
 8001a46:	f835 c022 	ldrh.w	ip, [r5, r2, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001a4a:	00d0      	lsls	r0, r2, #3
 8001a4c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001a50:	f01c 0f40 	tst.w	ip, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001a54:	b292      	uxth	r2, r2
 8001a56:	4402      	add	r2, r0
 8001a58:	f102 0202 	add.w	r2, r2, #2
 8001a5c:	f847 4012 	str.w	r4, [r7, r2, lsl #1]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001a60:	4628      	mov	r0, r5
        pmabuffer = ep->pmaaddr1;
 8001a62:	bf14      	ite	ne
 8001a64:	8932      	ldrhne	r2, [r6, #8]
        pmabuffer = ep->pmaaddr0;
 8001a66:	88f2      	ldrheq	r2, [r6, #6]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001a68:	f7ff ffa9 	bl	80019be <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001a6c:	7873      	ldrb	r3, [r6, #1]
 8001a6e:	7832      	ldrb	r2, [r6, #0]
 8001a70:	b963      	cbnz	r3, 8001a8c <USB_EPStartXfer+0xb0>
 8001a72:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a7a:	051b      	lsls	r3, r3, #20
 8001a7c:	0d1b      	lsrs	r3, r3, #20
 8001a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a86:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001a8a:	e7c8      	b.n	8001a1e <USB_EPStartXfer+0x42>
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d1c6      	bne.n	8001a1e <USB_EPStartXfer+0x42>
 8001a90:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a98:	051b      	lsls	r3, r3, #20
 8001a9a:	0d1b      	lsrs	r3, r3, #20
 8001a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa4:	e7ef      	b.n	8001a86 <USB_EPStartXfer+0xaa>
    if (ep->xfer_len > ep->maxpacket)
 8001aa6:	429c      	cmp	r4, r3
      ep->xfer_len =0;
 8001aa8:	bf94      	ite	ls
 8001aaa:	2100      	movls	r1, #0
      ep->xfer_len-=len; 
 8001aac:	1ae1      	subhi	r1, r4, r3
 8001aae:	61b1      	str	r1, [r6, #24]
 8001ab0:	bf88      	it	hi
 8001ab2:	461c      	movhi	r4, r3
    if (ep->doublebuffer == 0) 
 8001ab4:	7833      	ldrb	r3, [r6, #0]
 8001ab6:	bb58      	cbnz	r0, 8001b10 <USB_EPStartXfer+0x134>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001ab8:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8001abc:	2c3e      	cmp	r4, #62	; 0x3e
 8001abe:	b280      	uxth	r0, r0
 8001ac0:	f100 0006 	add.w	r0, r0, #6
 8001ac4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001ac8:	f505 6180 	add.w	r1, r5, #1024	; 0x400
 8001acc:	d918      	bls.n	8001b00 <USB_EPStartXfer+0x124>
 8001ace:	f3c4 124f 	ubfx	r2, r4, #5, #16
 8001ad2:	06e4      	lsls	r4, r4, #27
 8001ad4:	bf04      	itt	eq
 8001ad6:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8001ada:	b29a      	uxtheq	r2, r3
 8001adc:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <USB_EPStartXfer+0x1b8>)
 8001ade:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	f841 3010 	str.w	r3, [r1, r0, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ae8:	7832      	ldrb	r2, [r6, #0]
 8001aea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001afe:	e799      	b.n	8001a34 <USB_EPStartXfer+0x58>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001b00:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8001b04:	07e2      	lsls	r2, r4, #31
 8001b06:	bf44      	itt	mi
 8001b08:	3301      	addmi	r3, #1
 8001b0a:	b29b      	uxthmi	r3, r3
 8001b0c:	029b      	lsls	r3, r3, #10
 8001b0e:	e7e8      	b.n	8001ae2 <USB_EPStartXfer+0x106>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d1e9      	bne.n	8001ae8 <USB_EPStartXfer+0x10c>
 8001b14:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8001b18:	2c3e      	cmp	r4, #62	; 0x3e
 8001b1a:	b280      	uxth	r0, r0
 8001b1c:	f100 0002 	add.w	r0, r0, #2
 8001b20:	ea4f 07c3 	mov.w	r7, r3, lsl #3
 8001b24:	f505 6180 	add.w	r1, r5, #1024	; 0x400
 8001b28:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001b2c:	d91b      	bls.n	8001b66 <USB_EPStartXfer+0x18a>
 8001b2e:	f3c4 124f 	ubfx	r2, r4, #5, #16
 8001b32:	06e3      	lsls	r3, r4, #27
 8001b34:	bf04      	itt	eq
 8001b36:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8001b3a:	b29a      	uxtheq	r2, r3
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <USB_EPStartXfer+0x1b8>)
 8001b3e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001b42:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b292      	uxth	r2, r2
 8001b4a:	3206      	adds	r2, #6
 8001b4c:	2c3e      	cmp	r4, #62	; 0x3e
 8001b4e:	f841 3010 	str.w	r3, [r1, r0, lsl #1]
 8001b52:	443a      	add	r2, r7
 8001b54:	d80f      	bhi.n	8001b76 <USB_EPStartXfer+0x19a>
 8001b56:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8001b5a:	07e0      	lsls	r0, r4, #31
 8001b5c:	bf44      	itt	mi
 8001b5e:	3301      	addmi	r3, #1
 8001b60:	b29b      	uxthmi	r3, r3
 8001b62:	029b      	lsls	r3, r3, #10
 8001b64:	e011      	b.n	8001b8a <USB_EPStartXfer+0x1ae>
 8001b66:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8001b6a:	07e2      	lsls	r2, r4, #31
 8001b6c:	bf44      	itt	mi
 8001b6e:	3301      	addmi	r3, #1
 8001b70:	b29b      	uxthmi	r3, r3
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	e7e5      	b.n	8001b42 <USB_EPStartXfer+0x166>
 8001b76:	f3c4 104f 	ubfx	r0, r4, #5, #16
 8001b7a:	06e4      	lsls	r4, r4, #27
 8001b7c:	bf04      	itt	eq
 8001b7e:	f100 33ff 	addeq.w	r3, r0, #4294967295
 8001b82:	b298      	uxtheq	r0, r3
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <USB_EPStartXfer+0x1b8>)
 8001b86:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f841 3012 	str.w	r3, [r1, r2, lsl #1]
 8001b90:	e7aa      	b.n	8001ae8 <USB_EPStartXfer+0x10c>
 8001b92:	bf00      	nop
 8001b94:	ffff8000 	.word	0xffff8000

08001b98 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001b98:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001b9a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001b9e:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001ba0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001ba4:	b903      	cbnz	r3, 8001ba8 <USB_ReadPMA+0x10>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001ba6:	4770      	bx	lr
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001ba8:	f852 0b04 	ldr.w	r0, [r2], #4
  for (index = nbytes; index != 0; index--)
 8001bac:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001bae:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 8001bb2:	e7f7      	b.n	8001ba4 <USB_ReadPMA+0xc>

08001bb4 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8001bb8:	4800      	ldr	r0, [pc, #0]	; (8001bbc <USBD_MSC_GetHSCfgDesc+0x8>)
 8001bba:	4770      	bx	lr
 8001bbc:	20000060 	.word	0x20000060

08001bc0 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8001bc4:	4800      	ldr	r0, [pc, #0]	; (8001bc8 <USBD_MSC_GetFSCfgDesc+0x8>)
 8001bc6:	4770      	bx	lr
 8001bc8:	20000040 	.word	0x20000040

08001bcc <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8001bcc:	2320      	movs	r3, #32
 8001bce:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8001bd0:	4800      	ldr	r0, [pc, #0]	; (8001bd4 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8001bd2:	4770      	bx	lr
 8001bd4:	2000008c 	.word	0x2000008c

08001bd8 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8001bd8:	230a      	movs	r3, #10
 8001bda:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8001bdc:	4800      	ldr	r0, [pc, #0]	; (8001be0 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8001bde:	4770      	bx	lr
 8001be0:	20000080 	.word	0x20000080

08001be4 <USBD_MSC_Init>:
{
 8001be4:	b510      	push	{r4, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001be6:	7c03      	ldrb	r3, [r0, #16]
{
 8001be8:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001bea:	b9c3      	cbnz	r3, 8001c1e <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8001bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	f001 fa81 	bl	80030fa <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	2181      	movs	r1, #129	; 0x81
 8001c00:	4620      	mov	r0, r4
 8001c02:	f001 fa7a 	bl	80030fa <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8001c06:	f240 406c 	movw	r0, #1132	; 0x46c
 8001c0a:	f001 fad7 	bl	80031bc <USBD_static_malloc>
 8001c0e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001c12:	b158      	cbz	r0, 8001c2c <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 8001c14:	4620      	mov	r0, r4
 8001c16:	f000 f8bc 	bl	8001d92 <MSC_BOT_Init>
    ret = 0;
 8001c1a:	2000      	movs	r0, #0
}
 8001c1c:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8001c1e:	2340      	movs	r3, #64	; 0x40
 8001c20:	2202      	movs	r2, #2
 8001c22:	2101      	movs	r1, #1
 8001c24:	f001 fa69 	bl	80030fa <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001c28:	2340      	movs	r3, #64	; 0x40
 8001c2a:	e7e7      	b.n	8001bfc <USBD_MSC_Init+0x18>
    ret = 1; 
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	e7f5      	b.n	8001c1c <USBD_MSC_Init+0x38>

08001c30 <USBD_MSC_DeInit>:
{
 8001c30:	b510      	push	{r4, lr}
 8001c32:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001c34:	2101      	movs	r1, #1
 8001c36:	f001 fa6c 	bl	8003112 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001c3a:	2181      	movs	r1, #129	; 0x81
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f001 fa68 	bl	8003112 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8001c42:	4620      	mov	r0, r4
 8001c44:	f000 f8cd 	bl	8001de2 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8001c48:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001c4c:	b120      	cbz	r0, 8001c58 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8001c4e:	f001 fab9 	bl	80031c4 <USBD_static_free>
    pdev->pClassData  = NULL; 
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001c58:	2000      	movs	r0, #0
 8001c5a:	bd10      	pop	{r4, pc}

08001c5c <USBD_MSC_Setup>:
{
 8001c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c60:	780b      	ldrb	r3, [r1, #0]
{
 8001c62:	4607      	mov	r7, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c64:	f013 0560 	ands.w	r5, r3, #96	; 0x60
{
 8001c68:	460c      	mov	r4, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8001c6a:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c6e:	d02d      	beq.n	8001ccc <USBD_MSC_Setup+0x70>
 8001c70:	2d20      	cmp	r5, #32
 8001c72:	d15d      	bne.n	8001d30 <USBD_MSC_Setup+0xd4>
    switch (req->bRequest)
 8001c74:	784a      	ldrb	r2, [r1, #1]
 8001c76:	2afe      	cmp	r2, #254	; 0xfe
 8001c78:	d005      	beq.n	8001c86 <USBD_MSC_Setup+0x2a>
 8001c7a:	2aff      	cmp	r2, #255	; 0xff
 8001c7c:	d019      	beq.n	8001cb2 <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8001c7e:	f000 fe54 	bl	800292a <USBD_CtlError>
       return USBD_FAIL; 
 8001c82:	2502      	movs	r5, #2
 8001c84:	e01f      	b.n	8001cc6 <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8001c86:	884d      	ldrh	r5, [r1, #2]
 8001c88:	b985      	cbnz	r5, 8001cac <USBD_MSC_Setup+0x50>
 8001c8a:	88ce      	ldrh	r6, [r1, #6]
 8001c8c:	2e01      	cmp	r6, #1
 8001c8e:	d10d      	bne.n	8001cac <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8001c90:	061a      	lsls	r2, r3, #24
 8001c92:	d50b      	bpl.n	8001cac <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8001c94:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8001c9c:	4632      	mov	r2, r6
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8001c9e:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	4638      	mov	r0, r7
      USBD_CtlSendData (pdev,
 8001ca6:	f000 fe67 	bl	8002978 <USBD_CtlSendData>
      break;
 8001caa:	e00c      	b.n	8001cc6 <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8001cac:	4621      	mov	r1, r4
 8001cae:	4638      	mov	r0, r7
 8001cb0:	e7e5      	b.n	8001c7e <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8001cb2:	884a      	ldrh	r2, [r1, #2]
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	d1f9      	bne.n	8001cac <USBD_MSC_Setup+0x50>
 8001cb8:	88cd      	ldrh	r5, [r1, #6]
 8001cba:	2d00      	cmp	r5, #0
 8001cbc:	d1f6      	bne.n	8001cac <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 8001cbe:	061b      	lsls	r3, r3, #24
 8001cc0:	d4f4      	bmi.n	8001cac <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 8001cc2:	f000 f883 	bl	8001dcc <MSC_BOT_Reset>
}
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8001ccc:	784e      	ldrb	r6, [r1, #1]
 8001cce:	2e0a      	cmp	r6, #10
 8001cd0:	d01c      	beq.n	8001d0c <USBD_MSC_Setup+0xb0>
 8001cd2:	2e0b      	cmp	r6, #11
 8001cd4:	d01e      	beq.n	8001d14 <USBD_MSC_Setup+0xb8>
 8001cd6:	2e01      	cmp	r6, #1
 8001cd8:	d1f5      	bne.n	8001cc6 <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8001cda:	7909      	ldrb	r1, [r1, #4]
 8001cdc:	f001 fa22 	bl	8003124 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8001ce0:	4638      	mov	r0, r7
 8001ce2:	7921      	ldrb	r1, [r4, #4]
 8001ce4:	f001 fa15 	bl	8003112 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8001ce8:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	7c3b      	ldrb	r3, [r7, #16]
 8001cf0:	da16      	bge.n	8001d20 <USBD_MSC_Setup+0xc4>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001cf2:	b99b      	cbnz	r3, 8001d1c <USBD_MSC_Setup+0xc0>
          USBD_LL_OpenEP(pdev,
 8001cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8001cfc:	4638      	mov	r0, r7
 8001cfe:	f001 f9fc 	bl	80030fa <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8001d02:	4638      	mov	r0, r7
 8001d04:	7921      	ldrb	r1, [r4, #4]
 8001d06:	f000 f913 	bl	8001f30 <MSC_BOT_CplClrFeature>
      break;
 8001d0a:	e7dc      	b.n	8001cc6 <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f108 0104 	add.w	r1, r8, #4
 8001d12:	e7c8      	b.n	8001ca6 <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 8001d14:	788b      	ldrb	r3, [r1, #2]
 8001d16:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8001d1a:	e7d4      	b.n	8001cc6 <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8001d1c:	2340      	movs	r3, #64	; 0x40
 8001d1e:	e7eb      	b.n	8001cf8 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001d20:	b923      	cbnz	r3, 8001d2c <USBD_MSC_Setup+0xd0>
          USBD_LL_OpenEP(pdev,
 8001d22:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8001d26:	2202      	movs	r2, #2
 8001d28:	4631      	mov	r1, r6
 8001d2a:	e7e7      	b.n	8001cfc <USBD_MSC_Setup+0xa0>
 8001d2c:	2340      	movs	r3, #64	; 0x40
 8001d2e:	e7fa      	b.n	8001d26 <USBD_MSC_Setup+0xca>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001d30:	2500      	movs	r5, #0
 8001d32:	e7c8      	b.n	8001cc6 <USBD_MSC_Setup+0x6a>

08001d34 <USBD_MSC_DataIn>:
{
 8001d34:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8001d36:	f000 f875 	bl	8001e24 <MSC_BOT_DataIn>
}
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	bd08      	pop	{r3, pc}

08001d3e <USBD_MSC_DataOut>:
{
 8001d3e:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8001d40:	f000 f88c 	bl	8001e5c <MSC_BOT_DataOut>
}
 8001d44:	2000      	movs	r0, #0
 8001d46:	bd08      	pop	{r3, pc}

08001d48 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8001d48:	b109      	cbz	r1, 8001d4e <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8001d4a:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8001d4e:	2000      	movs	r0, #0
 8001d50:	4770      	bx	lr

08001d52 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8001d52:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001d54:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 8001d58:	4604      	mov	r4, r0
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8001d5a:	f895 3418 	ldrb.w	r3, [r5, #1048]	; 0x418
 8001d5e:	b93b      	cbnz	r3, 8001d70 <MSC_BOT_Abort+0x1e>
 8001d60:	f8d5 3414 	ldr.w	r3, [r5, #1044]	; 0x414
 8001d64:	b123      	cbz	r3, 8001d70 <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0) &&
 8001d66:	7a6b      	ldrb	r3, [r5, #9]
 8001d68:	b913      	cbnz	r3, 8001d70 <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	f001 f9e3 	bl	8003136 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8001d70:	2181      	movs	r1, #129	; 0x81
 8001d72:	4620      	mov	r0, r4
 8001d74:	f001 f9df 	bl	8003136 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8001d78:	7a6b      	ldrb	r3, [r5, #9]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d108      	bne.n	8001d90 <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev,
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8001d84:	231f      	movs	r3, #31
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8001d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	f001 ba07 	b.w	800319e <USBD_LL_PrepareReceive>
}
 8001d90:	bd70      	pop	{r4, r5, r6, pc}

08001d92 <MSC_BOT_Init>:
{
 8001d92:	b570      	push	{r4, r5, r6, lr}
 8001d94:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8001d96:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	8128      	strh	r0, [r5, #8]
  hmsc->scsi_sense_head = 0;
 8001d9e:	f8a5 045c 	strh.w	r0, [r5, #1116]	; 0x45c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8001da2:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8001daa:	2101      	movs	r1, #1
 8001dac:	4620      	mov	r0, r4
 8001dae:	f001 f9b9 	bl	8003124 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8001db2:	2181      	movs	r1, #129	; 0x81
 8001db4:	4620      	mov	r0, r4
 8001db6:	f001 f9b5 	bl	8003124 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8001dc0:	231f      	movs	r3, #31
}
 8001dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	f001 b9e9 	b.w	800319e <USBD_LL_PrepareReceive>

08001dcc <MSC_BOT_Reset>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8001dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8001dd0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  USBD_LL_PrepareReceive (pdev,
 8001dd4:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8001dd6:	8113      	strh	r3, [r2, #8]
  USBD_LL_PrepareReceive (pdev,
 8001dd8:	231f      	movs	r3, #31
 8001dda:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001dde:	f001 b9de 	b.w	800319e <USBD_LL_PrepareReceive>

08001de2 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8001de2:	2200      	movs	r2, #0
 8001de4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8001de8:	721a      	strb	r2, [r3, #8]
}
 8001dea:	4770      	bx	lr

08001dec <MSC_BOT_SendCSW>:
{
 8001dec:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MSC_BOT_SendCSW+0x34>)
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001df0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
{
 8001df4:	4605      	mov	r5, r0
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8001df6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
  hmsc->bot_state = USBD_BOT_IDLE;
 8001dfa:	2300      	movs	r3, #0
  hmsc->csw.bStatus = CSW_Status;
 8001dfc:	f884 1438 	strb.w	r1, [r4, #1080]	; 0x438
  hmsc->bot_state = USBD_BOT_IDLE;
 8001e00:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8001e02:	f204 422c 	addw	r2, r4, #1068	; 0x42c
 8001e06:	230d      	movs	r3, #13
 8001e08:	2181      	movs	r1, #129	; 0x81
 8001e0a:	f001 f9bf 	bl	800318c <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8001e0e:	4628      	mov	r0, r5
 8001e10:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 8001e14:	231f      	movs	r3, #31
}
 8001e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	f001 b9bf 	b.w	800319e <USBD_LL_PrepareReceive>
 8001e20:	53425355 	.word	0x53425355

08001e24 <MSC_BOT_DataIn>:
{
 8001e24:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8001e26:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
{
 8001e2a:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8001e2c:	7a0b      	ldrb	r3, [r1, #8]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d007      	beq.n	8001e42 <MSC_BOT_DataIn+0x1e>
 8001e32:	3b03      	subs	r3, #3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d80f      	bhi.n	8001e58 <MSC_BOT_DataIn+0x34>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8001e38:	2100      	movs	r1, #0
}
 8001e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8001e3e:	f7ff bfd5 	b.w	8001dec <MSC_BOT_SendCSW>
    if(SCSI_ProcessCmd(pdev,
 8001e42:	f201 421b 	addw	r2, r1, #1051	; 0x41b
 8001e46:	f891 1419 	ldrb.w	r1, [r1, #1049]	; 0x419
 8001e4a:	f000 f899 	bl	8001f80 <SCSI_ProcessCmd>
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	da02      	bge.n	8001e58 <MSC_BOT_DataIn+0x34>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8001e52:	2101      	movs	r1, #1
 8001e54:	4620      	mov	r0, r4
 8001e56:	e7f0      	b.n	8001e3a <MSC_BOT_DataIn+0x16>
}
 8001e58:	bd10      	pop	{r4, pc}
	...

08001e5c <MSC_BOT_DataOut>:
{
 8001e5c:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8001e5e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
{
 8001e62:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8001e64:	7a26      	ldrb	r6, [r4, #8]
 8001e66:	b116      	cbz	r6, 8001e6e <MSC_BOT_DataOut+0x12>
 8001e68:	2e01      	cmp	r6, #1
 8001e6a:	d056      	beq.n	8001f1a <MSC_BOT_DataOut+0xbe>
}
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8001e6e:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8001e72:	2101      	movs	r1, #1
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8001e74:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8001e78:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 8001e7c:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8001e80:	f001 f996 	bl	80031b0 <USBD_LL_GetRxDataSize>
 8001e84:	281f      	cmp	r0, #31
 8001e86:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
 8001e8a:	d10b      	bne.n	8001ea4 <MSC_BOT_DataOut+0x48>
 8001e8c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
 8001e90:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <MSC_BOT_DataOut+0xd0>)
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d106      	bne.n	8001ea4 <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8001e96:	2901      	cmp	r1, #1
 8001e98:	d804      	bhi.n	8001ea4 <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1) || 
 8001e9a:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	d90b      	bls.n	8001ebc <MSC_BOT_DataOut+0x60>
    SCSI_SenseCode(pdev,
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	2205      	movs	r2, #5
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f000 fa77 	bl	800239c <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8001eae:	2302      	movs	r3, #2
 8001eb0:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8001eb2:	4628      	mov	r0, r5
}
 8001eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 8001eb8:	f7ff bf4b 	b.w	8001d52 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	f204 421b 	addw	r2, r4, #1051	; 0x41b
 8001ec2:	f000 f85d 	bl	8001f80 <SCSI_ProcessCmd>
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	7a23      	ldrb	r3, [r4, #8]
 8001eca:	da07      	bge.n	8001edc <MSC_BOT_DataOut+0x80>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d1f0      	bne.n	8001eb2 <MSC_BOT_DataOut+0x56>
       MSC_BOT_SendCSW (pdev,
 8001ed0:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 8001ed2:	4628      	mov	r0, r5
}
 8001ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW (pdev,
 8001ed8:	f7ff bf88 	b.w	8001dec <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8001edc:	3b01      	subs	r3, #1
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d9c4      	bls.n	8001e6c <MSC_BOT_DataOut+0x10>
      if (hmsc->bot_data_length > 0)
 8001ee2:	8961      	ldrh	r1, [r4, #10]
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	d0f4      	beq.n	8001ed2 <MSC_BOT_DataOut+0x76>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001ee8:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8001eec:	4628      	mov	r0, r5
  len = MIN (hmsc->cbw.dDataLength, len);
 8001eee:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8001ef2:	f883 6438 	strb.w	r6, [r3, #1080]	; 0x438
  len = MIN (hmsc->cbw.dDataLength, len);
 8001ef6:	4291      	cmp	r1, r2
 8001ef8:	bf28      	it	cs
 8001efa:	4611      	movcs	r1, r2
  hmsc->csw.dDataResidue -= len;
 8001efc:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8001f00:	1a52      	subs	r2, r2, r1
 8001f02:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8001f06:	2204      	movs	r2, #4
 8001f08:	721a      	strb	r2, [r3, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8001f0a:	b28b      	uxth	r3, r1
 8001f0c:	f104 020c 	add.w	r2, r4, #12
 8001f10:	2181      	movs	r1, #129	; 0x81
}
 8001f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8001f16:	f001 b939 	b.w	800318c <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 8001f1a:	f894 1419 	ldrb.w	r1, [r4, #1049]	; 0x419
 8001f1e:	f204 421b 	addw	r2, r4, #1051	; 0x41b
 8001f22:	f000 f82d 	bl	8001f80 <SCSI_ProcessCmd>
 8001f26:	2800      	cmp	r0, #0
 8001f28:	daa0      	bge.n	8001e6c <MSC_BOT_DataOut+0x10>
 8001f2a:	e7d1      	b.n	8001ed0 <MSC_BOT_DataOut+0x74>
 8001f2c:	43425355 	.word	0x43425355

08001f30 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8001f30:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8001f32:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8001f36:	7a63      	ldrb	r3, [r4, #9]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d105      	bne.n	8001f48 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8001f3c:	2181      	movs	r1, #129	; 0x81
 8001f3e:	f001 f8fa 	bl	8003136 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8001f42:	2300      	movs	r3, #0
 8001f44:	7263      	strb	r3, [r4, #9]
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 8001f46:	bd10      	pop	{r4, pc}
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8001f48:	060a      	lsls	r2, r1, #24
 8001f4a:	d5fc      	bpl.n	8001f46 <MSC_BOT_CplClrFeature+0x16>
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d0fa      	beq.n	8001f46 <MSC_BOT_CplClrFeature+0x16>
}
 8001f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8001f54:	2101      	movs	r1, #1
 8001f56:	f7ff bf49 	b.w	8001dec <MSC_BOT_SendCSW>

08001f5a <SCSI_SenseCode.constprop.0.isra.0>:
*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8001f5a:	f890 345d 	ldrb.w	r3, [r0, #1117]	; 0x45d
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 8001f5e:	b510      	push	{r4, lr}
 8001f60:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2db      	uxtb	r3, r3
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8001f68:	2b04      	cmp	r3, #4
  {
    hmsc->scsi_sense_tail = 0;
 8001f6a:	bf08      	it	eq
 8001f6c:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8001f6e:	0212      	lsls	r2, r2, #8
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8001f70:	f884 143c 	strb.w	r1, [r4, #1084]	; 0x43c
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8001f74:	f8c4 2440 	str.w	r2, [r4, #1088]	; 0x440
    hmsc->scsi_sense_tail = 0;
 8001f78:	f880 345d 	strb.w	r3, [r0, #1117]	; 0x45d
  }
}
 8001f7c:	bd10      	pop	{r4, pc}
	...

08001f80 <SCSI_ProcessCmd>:
{
 8001f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (params[0])
 8001f84:	7813      	ldrb	r3, [r2, #0]
{
 8001f86:	4606      	mov	r6, r0
  switch (params[0])
 8001f88:	2b2f      	cmp	r3, #47	; 0x2f
{
 8001f8a:	460d      	mov	r5, r1
 8001f8c:	4617      	mov	r7, r2
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8001f8e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (params[0])
 8001f92:	d83d      	bhi.n	8002010 <SCSI_ProcessCmd+0x90>
 8001f94:	2b19      	cmp	r3, #25
 8001f96:	d808      	bhi.n	8001faa <SCSI_ProcessCmd+0x2a>
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d05a      	beq.n	8002052 <SCSI_ProcessCmd+0xd2>
 8001f9c:	2b12      	cmp	r3, #18
 8001f9e:	f000 8082 	beq.w	80020a6 <SCSI_ProcessCmd+0x126>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d03a      	beq.n	800201c <SCSI_ProcessCmd+0x9c>
    SCSI_SenseCode(pdev, 
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	e1e8      	b.n	800237c <SCSI_ProcessCmd+0x3fc>
  switch (params[0])
 8001faa:	3b1a      	subs	r3, #26
 8001fac:	2b15      	cmp	r3, #21
 8001fae:	d8fa      	bhi.n	8001fa6 <SCSI_ProcessCmd+0x26>
 8001fb0:	a201      	add	r2, pc, #4	; (adr r2, 8001fb8 <SCSI_ProcessCmd+0x38>)
 8001fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb6:	bf00      	nop
 8001fb8:	080020e3 	.word	0x080020e3
 8001fbc:	080020dd 	.word	0x080020dd
 8001fc0:	08001fa7 	.word	0x08001fa7
 8001fc4:	08001fa7 	.word	0x08001fa7
 8001fc8:	080020dd 	.word	0x080020dd
 8001fcc:	08001fa7 	.word	0x08001fa7
 8001fd0:	08001fa7 	.word	0x08001fa7
 8001fd4:	08001fa7 	.word	0x08001fa7
 8001fd8:	08001fa7 	.word	0x08001fa7
 8001fdc:	080020f3 	.word	0x080020f3
 8001fe0:	08001fa7 	.word	0x08001fa7
 8001fe4:	08002141 	.word	0x08002141
 8001fe8:	08001fa7 	.word	0x08001fa7
 8001fec:	08001fa7 	.word	0x08001fa7
 8001ff0:	0800217b 	.word	0x0800217b
 8001ff4:	08001fa7 	.word	0x08001fa7
 8001ff8:	08002253 	.word	0x08002253
 8001ffc:	08001fa7 	.word	0x08001fa7
 8002000:	08001fa7 	.word	0x08001fa7
 8002004:	08001fa7 	.word	0x08001fa7
 8002008:	08001fa7 	.word	0x08001fa7
 800200c:	08002373 	.word	0x08002373
 8002010:	2b5a      	cmp	r3, #90	; 0x5a
 8002012:	d1c8      	bne.n	8001fa6 <SCSI_ProcessCmd+0x26>
  hmsc->bot_data_length = len;
 8002014:	2308      	movs	r3, #8
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8002016:	4ac3      	ldr	r2, [pc, #780]	; (8002324 <SCSI_ProcessCmd+0x3a4>)
  hmsc->bot_data_length = len;
 8002018:	8163      	strh	r3, [r4, #10]
  while (len) 
 800201a:	e065      	b.n	80020e8 <SCSI_ProcessCmd+0x168>
  if (hmsc->cbw.dDataLength != 0)
 800201c:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1c0      	bne.n	8001fa6 <SCSI_ProcessCmd+0x26>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8002024:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002028:	4608      	mov	r0, r1
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4798      	blx	r3
 800202e:	4605      	mov	r5, r0
 8002030:	b150      	cbz	r0, 8002048 <SCSI_ProcessCmd+0xc8>
    SCSI_SenseCode(pdev,
 8002032:	223a      	movs	r2, #58	; 0x3a
 8002034:	2102      	movs	r1, #2
 8002036:	f8d6 0218 	ldr.w	r0, [r6, #536]	; 0x218
 800203a:	f7ff ff8e 	bl	8001f5a <SCSI_SenseCode.constprop.0.isra.0>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800203e:	2305      	movs	r3, #5
 8002040:	7223      	strb	r3, [r4, #8]
    return -1;
 8002042:	f04f 35ff 	mov.w	r5, #4294967295
 8002046:	e000      	b.n	800204a <SCSI_ProcessCmd+0xca>
  hmsc->bot_data_length = 0;
 8002048:	8160      	strh	r0, [r4, #10]
}
 800204a:	4628      	mov	r0, r5
 800204c:	b003      	add	sp, #12
 800204e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hmsc->bot_data[i] = 0;
 8002052:	2212      	movs	r2, #18
 8002054:	2100      	movs	r1, #0
 8002056:	f104 000c 	add.w	r0, r4, #12
 800205a:	f001 fef5 	bl	8003e48 <memset>
  hmsc->bot_data[0]	= 0x70;		
 800205e:	2370      	movs	r3, #112	; 0x70
 8002060:	7323      	strb	r3, [r4, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8002062:	230c      	movs	r3, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8002064:	f894 245d 	ldrb.w	r2, [r4, #1117]	; 0x45d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8002068:	74e3      	strb	r3, [r4, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800206a:	f894 345c 	ldrb.w	r3, [r4, #1116]	; 0x45c
 800206e:	429a      	cmp	r2, r3
 8002070:	d011      	beq.n	8002096 <SCSI_ProcessCmd+0x116>
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8002072:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    hmsc->scsi_sense_head++;
 8002076:	3301      	adds	r3, #1
 8002078:	b2db      	uxtb	r3, r3
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800207a:	2b04      	cmp	r3, #4
      hmsc->scsi_sense_head = 0;
 800207c:	bf08      	it	eq
 800207e:	2300      	moveq	r3, #0
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8002080:	f892 143c 	ldrb.w	r1, [r2, #1084]	; 0x43c
 8002084:	73a1      	strb	r1, [r4, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8002086:	f892 1441 	ldrb.w	r1, [r2, #1089]	; 0x441
 800208a:	7621      	strb	r1, [r4, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 800208c:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
      hmsc->scsi_sense_head = 0;
 8002090:	f884 345c 	strb.w	r3, [r4, #1116]	; 0x45c
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8002094:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8002096:	2312      	movs	r3, #18
 8002098:	8163      	strh	r3, [r4, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800209a:	793b      	ldrb	r3, [r7, #4]
 800209c:	2b12      	cmp	r3, #18
    hmsc->bot_data_length = params[4];
 800209e:	bf98      	it	ls
 80020a0:	8163      	strhls	r3, [r4, #10]
    return SCSI_RequestSense (pdev, lun, params);
 80020a2:	2500      	movs	r5, #0
 80020a4:	e7d1      	b.n	800204a <SCSI_ProcessCmd+0xca>
  if (params[1] & 0x01)/*Evpd is set*/
 80020a6:	7853      	ldrb	r3, [r2, #1]
 80020a8:	07db      	lsls	r3, r3, #31
 80020aa:	d414      	bmi.n	80020d6 <SCSI_ProcessCmd+0x156>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80020ac:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80020b0:	7912      	ldrb	r2, [r2, #4]
 80020b2:	69d9      	ldr	r1, [r3, #28]
 80020b4:	2324      	movs	r3, #36	; 0x24
 80020b6:	fb03 1505 	mla	r5, r3, r5, r1
    len = pPage[4] + 5;
 80020ba:	792b      	ldrb	r3, [r5, #4]
 80020bc:	3305      	adds	r3, #5
 80020be:	4293      	cmp	r3, r2
 80020c0:	bf28      	it	cs
 80020c2:	4613      	movcs	r3, r2
  hmsc->bot_data_length = len;
 80020c4:	8163      	strh	r3, [r4, #10]
  while (len) 
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0eb      	beq.n	80020a2 <SCSI_ProcessCmd+0x122>
    len--;
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 80020ce:	5ce9      	ldrb	r1, [r5, r3]
 80020d0:	18e2      	adds	r2, r4, r3
 80020d2:	7311      	strb	r1, [r2, #12]
 80020d4:	e7f7      	b.n	80020c6 <SCSI_ProcessCmd+0x146>
    len = LENGTH_INQUIRY_PAGE00;
 80020d6:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 80020d8:	4d93      	ldr	r5, [pc, #588]	; (8002328 <SCSI_ProcessCmd+0x3a8>)
 80020da:	e7f3      	b.n	80020c4 <SCSI_ProcessCmd+0x144>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 80020dc:	2000      	movs	r0, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 80020de:	8160      	strh	r0, [r4, #10]
  return 0;
 80020e0:	e7df      	b.n	80020a2 <SCSI_ProcessCmd+0x122>
  hmsc->bot_data_length = len;
 80020e2:	2308      	movs	r3, #8
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80020e4:	4a91      	ldr	r2, [pc, #580]	; (800232c <SCSI_ProcessCmd+0x3ac>)
  hmsc->bot_data_length = len;
 80020e6:	8163      	strh	r3, [r4, #10]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	60e3      	str	r3, [r4, #12]
 80020ec:	6853      	ldr	r3, [r2, #4]
 80020ee:	6123      	str	r3, [r4, #16]
 80020f0:	e7d7      	b.n	80020a2 <SCSI_ProcessCmd+0x122>
    hmsc->bot_data[i] = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60e3      	str	r3, [r4, #12]
 80020f6:	6123      	str	r3, [r4, #16]
 80020f8:	6163      	str	r3, [r4, #20]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 80020fa:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80020fe:	f10d 0202 	add.w	r2, sp, #2
 8002102:	4628      	mov	r0, r5
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	a901      	add	r1, sp, #4
 8002108:	4798      	blx	r3
 800210a:	4605      	mov	r5, r0
 800210c:	b120      	cbz	r0, 8002118 <SCSI_ProcessCmd+0x198>
      SCSI_SenseCode(pdev,
 800210e:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 8002110:	2102      	movs	r1, #2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
                              hmsc->bot_data, 
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
                              len / hmsc->scsi_blk_size) < 0)
  {
    SCSI_SenseCode(pdev,
 8002112:	f8d6 0218 	ldr.w	r0, [r6, #536]	; 0x218
 8002116:	e0c9      	b.n	80022ac <SCSI_ProcessCmd+0x32c>
    hmsc->bot_data[3] = 0x08;
 8002118:	2308      	movs	r3, #8
 800211a:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 800211c:	9b01      	ldr	r3, [sp, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	0e1a      	lsrs	r2, r3, #24
 8002122:	7422      	strb	r2, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8002124:	0c1a      	lsrs	r2, r3, #16
 8002126:	7462      	strb	r2, [r4, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8002128:	74e3      	strb	r3, [r4, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800212a:	0a1a      	lsrs	r2, r3, #8
 800212c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002130:	74a2      	strb	r2, [r4, #18]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8002132:	ba5b      	rev16	r3, r3
    hmsc->bot_data[8] = 0x02;
 8002134:	2202      	movs	r2, #2
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8002136:	82e3      	strh	r3, [r4, #22]
    hmsc->bot_data_length = 12;
 8002138:	230c      	movs	r3, #12
    hmsc->bot_data[8] = 0x02;
 800213a:	82a2      	strh	r2, [r4, #20]
    hmsc->bot_data_length = 8;
 800213c:	8163      	strh	r3, [r4, #10]
    return 0;
 800213e:	e784      	b.n	800204a <SCSI_ProcessCmd+0xca>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8002140:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002144:	f204 425e 	addw	r2, r4, #1118	; 0x45e
 8002148:	4628      	mov	r0, r5
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f504 618c 	add.w	r1, r4, #1120	; 0x460
 8002150:	4798      	blx	r3
 8002152:	4605      	mov	r5, r0
 8002154:	2800      	cmp	r0, #0
 8002156:	d1da      	bne.n	800210e <SCSI_ProcessCmd+0x18e>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8002158:	f8d4 3460 	ldr.w	r3, [r4, #1120]	; 0x460
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800215c:	8220      	strh	r0, [r4, #16]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 800215e:	3b01      	subs	r3, #1
 8002160:	0e1a      	lsrs	r2, r3, #24
 8002162:	7322      	strb	r2, [r4, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8002164:	0c1a      	lsrs	r2, r3, #16
 8002166:	7362      	strb	r2, [r4, #13]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8002168:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 800216a:	0a1a      	lsrs	r2, r3, #8
 800216c:	f8b4 345e 	ldrh.w	r3, [r4, #1118]	; 0x45e
 8002170:	73a2      	strb	r2, [r4, #14]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8002172:	ba5b      	rev16	r3, r3
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8002174:	8263      	strh	r3, [r4, #18]
    hmsc->bot_data_length = 8;
 8002176:	2308      	movs	r3, #8
 8002178:	e7e0      	b.n	800213c <SCSI_ProcessCmd+0x1bc>
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800217a:	7a23      	ldrb	r3, [r4, #8]
 800217c:	bb6b      	cbnz	r3, 80021da <SCSI_ProcessCmd+0x25a>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 800217e:	f994 3418 	ldrsb.w	r3, [r4, #1048]	; 0x418
 8002182:	2b00      	cmp	r3, #0
 8002184:	f6bf af0f 	bge.w	8001fa6 <SCSI_ProcessCmd+0x26>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8002188:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800218c:	4608      	mov	r0, r1
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4798      	blx	r3
 8002192:	2800      	cmp	r0, #0
 8002194:	d1bb      	bne.n	800210e <SCSI_ProcessCmd+0x18e>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8002196:	f8d7 2002 	ldr.w	r2, [r7, #2]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800219a:	f8d6 0218 	ldr.w	r0, [r6, #536]	; 0x218
 800219e:	ba12      	rev	r2, r2
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80021a0:	f8c4 2464 	str.w	r2, [r4, #1124]	; 0x464
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80021a4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80021a8:	f8d0 1460 	ldr.w	r1, [r0, #1120]	; 0x460
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80021ac:	ba5b      	rev16	r3, r3
 80021ae:	b29b      	uxth	r3, r3
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80021b0:	189f      	adds	r7, r3, r2
 80021b2:	428f      	cmp	r7, r1
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80021b4:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80021b8:	d876      	bhi.n	80022a8 <SCSI_ProcessCmd+0x328>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 80021ba:	2102      	movs	r1, #2
 80021bc:	7221      	strb	r1, [r4, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80021be:	f8b4 145e 	ldrh.w	r1, [r4, #1118]	; 0x45e
 80021c2:	434a      	muls	r2, r1
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80021c4:	434b      	muls	r3, r1
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80021c6:	f8c4 2464 	str.w	r2, [r4, #1124]	; 0x464
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80021ca:	f8d4 2414 	ldr.w	r2, [r4, #1044]	; 0x414
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80021ce:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d001      	beq.n	80021da <SCSI_ProcessCmd+0x25a>
      SCSI_SenseCode(pdev,
 80021d6:	2220      	movs	r2, #32
 80021d8:	e067      	b.n	80022aa <SCSI_ProcessCmd+0x32a>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 80021da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021de:	8163      	strh	r3, [r4, #10]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 80021e0:	f8d6 4218 	ldr.w	r4, [r6, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80021e4:	f8d6 021c 	ldr.w	r0, [r6, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80021e8:	f8d4 7468 	ldr.w	r7, [r4, #1128]	; 0x468
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80021ec:	f8b4 245e 	ldrh.w	r2, [r4, #1118]	; 0x45e
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80021f0:	429f      	cmp	r7, r3
 80021f2:	bf28      	it	cs
 80021f4:	461f      	movcs	r7, r3
                              len / hmsc->scsi_blk_size) < 0)
 80021f6:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80021fa:	f8d4 1464 	ldr.w	r1, [r4, #1124]	; 0x464
                              hmsc->bot_data, 
 80021fe:	f104 080c 	add.w	r8, r4, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8002202:	fbb1 f2f2 	udiv	r2, r1, r2
 8002206:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800220a:	4641      	mov	r1, r8
 800220c:	4628      	mov	r0, r5
 800220e:	b29b      	uxth	r3, r3
 8002210:	47c8      	blx	r9
 8002212:	2800      	cmp	r0, #0
 8002214:	da02      	bge.n	800221c <SCSI_ProcessCmd+0x29c>
    SCSI_SenseCode(pdev,
 8002216:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 8002218:	2104      	movs	r1, #4
 800221a:	e77a      	b.n	8002112 <SCSI_ProcessCmd+0x192>
  USBD_LL_Transmit (pdev, 
 800221c:	b2bb      	uxth	r3, r7
 800221e:	4642      	mov	r2, r8
 8002220:	2181      	movs	r1, #129	; 0x81
 8002222:	4630      	mov	r0, r6
 8002224:	f000 ffb2 	bl	800318c <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 8002228:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
  hmsc->scsi_blk_len    -= len;  
 800222c:	f8d4 0468 	ldr.w	r0, [r4, #1128]	; 0x468
  hmsc->scsi_blk_addr   += len; 
 8002230:	443b      	add	r3, r7
 8002232:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
  hmsc->csw.dDataResidue -= len;
 8002236:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
  hmsc->scsi_blk_len    -= len;  
 800223a:	1bc5      	subs	r5, r0, r7
  hmsc->csw.dDataResidue -= len;
 800223c:	1bdb      	subs	r3, r3, r7
  hmsc->scsi_blk_len    -= len;  
 800223e:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
  hmsc->csw.dDataResidue -= len;
 8002242:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  if (hmsc->scsi_blk_len == 0)
 8002246:	2d00      	cmp	r5, #0
 8002248:	f47f af2b 	bne.w	80020a2 <SCSI_ProcessCmd+0x122>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800224c:	2303      	movs	r3, #3
 800224e:	7223      	strb	r3, [r4, #8]
 8002250:	e6fb      	b.n	800204a <SCSI_ProcessCmd+0xca>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8002252:	7a23      	ldrb	r3, [r4, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d147      	bne.n	80022e8 <SCSI_ProcessCmd+0x368>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8002258:	f994 3418 	ldrsb.w	r3, [r4, #1048]	; 0x418
 800225c:	2b00      	cmp	r3, #0
 800225e:	f6ff aea2 	blt.w	8001fa6 <SCSI_ProcessCmd+0x26>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8002262:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002266:	4608      	mov	r0, r1
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4798      	blx	r3
 800226c:	2800      	cmp	r0, #0
 800226e:	f47f af4e 	bne.w	800210e <SCSI_ProcessCmd+0x18e>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8002272:	f8d6 321c 	ldr.w	r3, [r6, #540]	; 0x21c
 8002276:	4628      	mov	r0, r5
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4798      	blx	r3
 800227c:	4605      	mov	r5, r0
 800227e:	b108      	cbz	r0, 8002284 <SCSI_ProcessCmd+0x304>
      SCSI_SenseCode(pdev,
 8002280:	2227      	movs	r2, #39	; 0x27
 8002282:	e745      	b.n	8002110 <SCSI_ProcessCmd+0x190>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8002284:	f8d7 2002 	ldr.w	r2, [r7, #2]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8002288:	f8d6 0218 	ldr.w	r0, [r6, #536]	; 0x218
 800228c:	ba12      	rev	r2, r2
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800228e:	f8c4 2464 	str.w	r2, [r4, #1124]	; 0x464
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8002292:	f8b7 3007 	ldrh.w	r3, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002296:	f8d0 1460 	ldr.w	r1, [r0, #1120]	; 0x460
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800229a:	ba5b      	rev16	r3, r3
 800229c:	b29b      	uxth	r3, r3
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800229e:	18d7      	adds	r7, r2, r3
 80022a0:	428f      	cmp	r7, r1
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80022a2:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80022a6:	d904      	bls.n	80022b2 <SCSI_ProcessCmd+0x332>
    SCSI_SenseCode(pdev,
 80022a8:	2221      	movs	r2, #33	; 0x21
 80022aa:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 80022ac:	f7ff fe55 	bl	8001f5a <SCSI_SenseCode.constprop.0.isra.0>
 80022b0:	e6c7      	b.n	8002042 <SCSI_ProcessCmd+0xc2>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80022b2:	f8b4 145e 	ldrh.w	r1, [r4, #1118]	; 0x45e
 80022b6:	434a      	muls	r2, r1
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80022b8:	434b      	muls	r3, r1
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80022ba:	f8c4 2464 	str.w	r2, [r4, #1124]	; 0x464
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80022be:	f8d4 2414 	ldr.w	r2, [r4, #1044]	; 0x414
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80022c2:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d185      	bne.n	80021d6 <SCSI_ProcessCmd+0x256>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80022ce:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80022d2:	bf28      	it	cs
 80022d4:	f44f 6380 	movcs.w	r3, #1024	; 0x400
    USBD_LL_PrepareReceive (pdev,
 80022d8:	4630      	mov	r0, r6
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80022da:	7221      	strb	r1, [r4, #8]
    USBD_LL_PrepareReceive (pdev,
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f104 020c 	add.w	r2, r4, #12
 80022e2:	f000 ff5c 	bl	800319e <USBD_LL_PrepareReceive>
  return 0;
 80022e6:	e6b0      	b.n	800204a <SCSI_ProcessCmd+0xca>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80022e8:	f8d4 7468 	ldr.w	r7, [r4, #1128]	; 0x468
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80022ec:	f8b4 245e 	ldrh.w	r2, [r4, #1118]	; 0x45e
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80022f0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80022f4:	bf28      	it	cs
 80022f6:	f44f 6780 	movcs.w	r7, #1024	; 0x400
                              len / hmsc->scsi_blk_size) < 0)
 80022fa:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80022fe:	f8d4 1464 	ldr.w	r1, [r4, #1124]	; 0x464
 8002302:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
                              hmsc->bot_data, 
 8002306:	f104 080c 	add.w	r8, r4, #12
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800230a:	fbb1 f2f2 	udiv	r2, r1, r2
 800230e:	f8d0 9014 	ldr.w	r9, [r0, #20]
 8002312:	4641      	mov	r1, r8
 8002314:	4628      	mov	r0, r5
 8002316:	b29b      	uxth	r3, r3
 8002318:	47c8      	blx	r9
 800231a:	2800      	cmp	r0, #0
 800231c:	da08      	bge.n	8002330 <SCSI_ProcessCmd+0x3b0>
    SCSI_SenseCode(pdev,
 800231e:	2203      	movs	r2, #3
 8002320:	e77a      	b.n	8002218 <SCSI_ProcessCmd+0x298>
 8002322:	bf00      	nop
 8002324:	08003e91 	.word	0x08003e91
 8002328:	08003ea1 	.word	0x08003ea1
 800232c:	08003e99 	.word	0x08003e99
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8002330:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
  hmsc->scsi_blk_len   -= len; 
 8002334:	f8d4 5468 	ldr.w	r5, [r4, #1128]	; 0x468
  hmsc->scsi_blk_addr  += len; 
 8002338:	443b      	add	r3, r7
 800233a:	f8c4 3464 	str.w	r3, [r4, #1124]	; 0x464
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800233e:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
  hmsc->scsi_blk_len   -= len; 
 8002342:	1bed      	subs	r5, r5, r7
  hmsc->csw.dDataResidue -= len;
 8002344:	1bdb      	subs	r3, r3, r7
  hmsc->scsi_blk_len   -= len; 
 8002346:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
  hmsc->csw.dDataResidue -= len;
 800234a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  
  if (hmsc->scsi_blk_len == 0)
 800234e:	b925      	cbnz	r5, 800235a <SCSI_ProcessCmd+0x3da>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8002350:	4629      	mov	r1, r5
 8002352:	4630      	mov	r0, r6
 8002354:	f7ff fd4a 	bl	8001dec <MSC_BOT_SendCSW>
 8002358:	e677      	b.n	800204a <SCSI_ProcessCmd+0xca>
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 800235a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800235e:	bf28      	it	cs
 8002360:	f44f 6580 	movcs.w	r5, #1024	; 0x400
    USBD_LL_PrepareReceive (pdev,
 8002364:	4642      	mov	r2, r8
 8002366:	2101      	movs	r1, #1
 8002368:	4630      	mov	r0, r6
 800236a:	b2ab      	uxth	r3, r5
 800236c:	f000 ff17 	bl	800319e <USBD_LL_PrepareReceive>
 8002370:	e697      	b.n	80020a2 <SCSI_ProcessCmd+0x122>
  if ((params[1]& 0x02) == 0x02) 
 8002372:	7878      	ldrb	r0, [r7, #1]
 8002374:	f010 0002 	ands.w	r0, r0, #2
 8002378:	d003      	beq.n	8002382 <SCSI_ProcessCmd+0x402>
    SCSI_SenseCode (pdev,
 800237a:	2224      	movs	r2, #36	; 0x24
    SCSI_SenseCode(pdev, 
 800237c:	2105      	movs	r1, #5
 800237e:	4620      	mov	r0, r4
 8002380:	e794      	b.n	80022ac <SCSI_ProcessCmd+0x32c>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002382:	f8d4 2464 	ldr.w	r2, [r4, #1124]	; 0x464
 8002386:	f8b4 3468 	ldrh.w	r3, [r4, #1128]	; 0x468
 800238a:	4413      	add	r3, r2
 800238c:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
 8002390:	4293      	cmp	r3, r2
 8002392:	f67f aea4 	bls.w	80020de <SCSI_ProcessCmd+0x15e>
    SCSI_SenseCode(pdev,
 8002396:	2221      	movs	r2, #33	; 0x21
 8002398:	e7f0      	b.n	800237c <SCSI_ProcessCmd+0x3fc>
 800239a:	bf00      	nop

0800239c <SCSI_SenseCode>:
{
 800239c:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800239e:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80023a2:	021b      	lsls	r3, r3, #8
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80023a4:	f890 145d 	ldrb.w	r1, [r0, #1117]	; 0x45d
 80023a8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 80023ac:	3101      	adds	r1, #1
 80023ae:	b2c9      	uxtb	r1, r1
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80023b0:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80023b2:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    hmsc->scsi_sense_tail = 0;
 80023b6:	bf08      	it	eq
 80023b8:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80023ba:	f884 243c 	strb.w	r2, [r4, #1084]	; 0x43c
  hmsc->scsi_sense_tail++;
 80023be:	bf14      	ite	ne
 80023c0:	f880 145d 	strbne.w	r1, [r0, #1117]	; 0x45d
    hmsc->scsi_sense_tail = 0;
 80023c4:	f880 345d 	strbeq.w	r3, [r0, #1117]	; 0x45d
}
 80023c8:	bd10      	pop	{r4, pc}

080023ca <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80023ca:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80023cc:	b180      	cbz	r0, 80023f0 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80023ce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80023d2:	b113      	cbz	r3, 80023da <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80023da:	b109      	cbz	r1, 80023e0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80023dc:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80023e0:	2301      	movs	r3, #1
  pdev->id = id;
 80023e2:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80023e4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80023e8:	f000 fe46 	bl	8003078 <USBD_LL_Init>
  
  return USBD_OK; 
 80023ec:	2000      	movs	r0, #0
}
 80023ee:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80023f0:	2002      	movs	r0, #2
 80023f2:	e7fc      	b.n	80023ee <USBD_Init+0x24>

080023f4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80023f4:	b119      	cbz	r1, 80023fe <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80023f6:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80023fa:	2000      	movs	r0, #0
 80023fc:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80023fe:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002400:	4770      	bx	lr

08002402 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002402:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002404:	f000 fe70 	bl	80030e8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002408:	2000      	movs	r0, #0
 800240a:	bd08      	pop	{r3, pc}

0800240c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800240c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800240e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002412:	b90b      	cbnz	r3, 8002418 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002414:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002416:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4798      	blx	r3
 800241c:	2800      	cmp	r0, #0
 800241e:	d0fa      	beq.n	8002416 <USBD_SetClassConfig+0xa>
 8002420:	e7f8      	b.n	8002414 <USBD_SetClassConfig+0x8>

08002422 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002422:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002424:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4798      	blx	r3
  return USBD_OK;
}
 800242c:	2000      	movs	r0, #0
 800242e:	bd08      	pop	{r3, pc}

08002430 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002430:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002432:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002436:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002438:	4628      	mov	r0, r5
 800243a:	f000 fa62 	bl	8002902 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800243e:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002440:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002444:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002448:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800244c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002450:	f001 031f 	and.w	r3, r1, #31
 8002454:	2b01      	cmp	r3, #1
 8002456:	d008      	beq.n	800246a <USBD_LL_SetupStage+0x3a>
 8002458:	2b02      	cmp	r3, #2
 800245a:	d00b      	beq.n	8002474 <USBD_LL_SetupStage+0x44>
 800245c:	b97b      	cbnz	r3, 800247e <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800245e:	4629      	mov	r1, r5
 8002460:	4620      	mov	r0, r4
 8002462:	f000 f8d9 	bl	8002618 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 8002466:	2000      	movs	r0, #0
 8002468:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800246a:	4629      	mov	r1, r5
 800246c:	4620      	mov	r0, r4
 800246e:	f000 f9cd 	bl	800280c <USBD_StdItfReq>
    break;
 8002472:	e7f8      	b.n	8002466 <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002474:	4629      	mov	r1, r5
 8002476:	4620      	mov	r0, r4
 8002478:	f000 f9e0 	bl	800283c <USBD_StdEPReq>
    break;
 800247c:	e7f3      	b.n	8002466 <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800247e:	4620      	mov	r0, r4
 8002480:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002484:	f000 fe57 	bl	8003136 <USBD_LL_StallEP>
    break;
 8002488:	e7ed      	b.n	8002466 <USBD_LL_SetupStage+0x36>

0800248a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800248a:	b558      	push	{r3, r4, r6, lr}
 800248c:	4604      	mov	r4, r0
 800248e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002490:	bb01      	cbnz	r1, 80024d4 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002492:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002496:	2b03      	cmp	r3, #3
 8002498:	d10d      	bne.n	80024b6 <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 800249a:	e9d0 2343 	ldrd	r2, r3, [r0, #268]	; 0x10c
 800249e:	429a      	cmp	r2, r3
 80024a0:	d90b      	bls.n	80024ba <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 80024a2:	1ad2      	subs	r2, r2, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80024a4:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80024a6:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 80024aa:	bf28      	it	cs
 80024ac:	461a      	movcs	r2, r3
        USBD_CtlContinueRx (pdev, 
 80024ae:	4631      	mov	r1, r6
 80024b0:	b292      	uxth	r2, r2
 80024b2:	f000 fa76 	bl	80029a2 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80024b6:	2000      	movs	r0, #0
 80024b8:	bd58      	pop	{r3, r4, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80024ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	b123      	cbz	r3, 80024cc <USBD_LL_DataOutStage+0x42>
 80024c2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024c6:	2a03      	cmp	r2, #3
 80024c8:	d100      	bne.n	80024cc <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 80024ca:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80024cc:	4620      	mov	r0, r4
 80024ce:	f000 fa70 	bl	80029b2 <USBD_CtlSendStatus>
 80024d2:	e7f0      	b.n	80024b6 <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 80024d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0eb      	beq.n	80024b6 <USBD_LL_DataOutStage+0x2c>
 80024de:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024e2:	2a03      	cmp	r2, #3
 80024e4:	d1e7      	bne.n	80024b6 <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 80024e6:	4798      	blx	r3
 80024e8:	e7e5      	b.n	80024b6 <USBD_LL_DataOutStage+0x2c>

080024ea <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80024ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ec:	4604      	mov	r4, r0
 80024ee:	4613      	mov	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80024f0:	460f      	mov	r7, r1
 80024f2:	2900      	cmp	r1, #0
 80024f4:	d13d      	bne.n	8002572 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80024f6:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80024fa:	2a02      	cmp	r2, #2
 80024fc:	d10f      	bne.n	800251e <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80024fe:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 8002502:	42b5      	cmp	r5, r6
 8002504:	d914      	bls.n	8002530 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002506:	1bad      	subs	r5, r5, r6
        
        USBD_CtlContinueSendData (pdev, 
 8002508:	4619      	mov	r1, r3
        pep->rem_length -=  pep->maxpacket;
 800250a:	61c5      	str	r5, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 800250c:	b2aa      	uxth	r2, r5
 800250e:	f000 fa40 	bl	8002992 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002512:	463b      	mov	r3, r7
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002514:	461a      	mov	r2, r3
 8002516:	4619      	mov	r1, r3
 8002518:	4620      	mov	r0, r4
 800251a:	f000 fe40 	bl	800319e <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800251e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002522:	2b01      	cmp	r3, #1
 8002524:	d102      	bne.n	800252c <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800252c:	2000      	movs	r0, #0
 800252e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002530:	6983      	ldr	r3, [r0, #24]
 8002532:	fbb3 f5f6 	udiv	r5, r3, r6
 8002536:	fb06 3515 	mls	r5, r6, r5, r3
 800253a:	b965      	cbnz	r5, 8002556 <USBD_LL_DataInStage+0x6c>
 800253c:	429e      	cmp	r6, r3
 800253e:	d80a      	bhi.n	8002556 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002540:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002544:	4293      	cmp	r3, r2
 8002546:	d206      	bcs.n	8002556 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002548:	462a      	mov	r2, r5
 800254a:	f000 fa22 	bl	8002992 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 800254e:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0;
 8002550:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002554:	e7de      	b.n	8002514 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002556:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	b12b      	cbz	r3, 800256a <USBD_LL_DataInStage+0x80>
 800255e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002562:	2a03      	cmp	r2, #3
 8002564:	d101      	bne.n	800256a <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002566:	4620      	mov	r0, r4
 8002568:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800256a:	4620      	mov	r0, r4
 800256c:	f000 fa2c 	bl	80029c8 <USBD_CtlReceiveStatus>
 8002570:	e7d5      	b.n	800251e <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002572:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0d7      	beq.n	800252c <USBD_LL_DataInStage+0x42>
 800257c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002580:	2a03      	cmp	r2, #3
 8002582:	d1d3      	bne.n	800252c <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002584:	4798      	blx	r3
 8002586:	e7d1      	b.n	800252c <USBD_LL_DataInStage+0x42>

08002588 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002588:	2200      	movs	r2, #0
{
 800258a:	b538      	push	{r3, r4, r5, lr}
 800258c:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800258e:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002590:	4611      	mov	r1, r2
 8002592:	2340      	movs	r3, #64	; 0x40
 8002594:	f000 fdb1 	bl	80030fa <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002598:	462b      	mov	r3, r5
 800259a:	2200      	movs	r2, #0
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	4620      	mov	r0, r4
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80025a0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80025a4:	f000 fda9 	bl	80030fa <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80025ae:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80025b2:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80025b4:	b12b      	cbz	r3, 80025c2 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80025b6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80025ba:	4620      	mov	r0, r4
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	7921      	ldrb	r1, [r4, #4]
 80025c0:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80025c2:	2000      	movs	r0, #0
 80025c4:	bd38      	pop	{r3, r4, r5, pc}

080025c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80025c6:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80025c8:	2000      	movs	r0, #0
 80025ca:	4770      	bx	lr

080025cc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80025cc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80025d0:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80025d4:	2304      	movs	r3, #4
 80025d6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80025da:	2000      	movs	r0, #0
 80025dc:	4770      	bx	lr

080025de <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80025de:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80025e2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80025e6:	2000      	movs	r0, #0
 80025e8:	4770      	bx	lr

080025ea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80025ea:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80025ec:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80025f0:	2a03      	cmp	r2, #3
 80025f2:	d104      	bne.n	80025fe <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80025f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	b103      	cbz	r3, 80025fe <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80025fc:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80025fe:	2000      	movs	r0, #0
 8002600:	bd08      	pop	{r3, pc}

08002602 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002602:	b510      	push	{r4, lr}
 8002604:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	f000 fd95 	bl	8003136 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800260c:	4620      	mov	r0, r4
}
 800260e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002612:	2100      	movs	r1, #0
 8002614:	f000 bd8f 	b.w	8003136 <USBD_LL_StallEP>

08002618 <USBD_StdDevReq>:
{
 8002618:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800261a:	784b      	ldrb	r3, [r1, #1]
{
 800261c:	4604      	mov	r4, r0
 800261e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002620:	2b09      	cmp	r3, #9
 8002622:	d876      	bhi.n	8002712 <USBD_StdDevReq+0xfa>
 8002624:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002628:	00e500c9 	.word	0x00e500c9
 800262c:	00d90075 	.word	0x00d90075
 8002630:	006d0075 	.word	0x006d0075
 8002634:	0075000a 	.word	0x0075000a
 8002638:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800263c:	884b      	ldrh	r3, [r1, #2]
 800263e:	0a1a      	lsrs	r2, r3, #8
 8002640:	3a01      	subs	r2, #1
 8002642:	2a06      	cmp	r2, #6
 8002644:	d865      	bhi.n	8002712 <USBD_StdDevReq+0xfa>
 8002646:	e8df f002 	tbb	[pc, r2]
 800264a:	1c04      	.short	0x1c04
 800264c:	49646429 	.word	0x49646429
 8002650:	52          	.byte	0x52
 8002651:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002652:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002656:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002658:	7c20      	ldrb	r0, [r4, #16]
 800265a:	f10d 0106 	add.w	r1, sp, #6
 800265e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002660:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002664:	2a00      	cmp	r2, #0
 8002666:	d067      	beq.n	8002738 <USBD_StdDevReq+0x120>
 8002668:	88eb      	ldrh	r3, [r5, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d064      	beq.n	8002738 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800266e:	429a      	cmp	r2, r3
 8002670:	bf28      	it	cs
 8002672:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002674:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002676:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800267a:	4620      	mov	r0, r4
 800267c:	f000 f97c 	bl	8002978 <USBD_CtlSendData>
    break;
 8002680:	e05a      	b.n	8002738 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002682:	7c02      	ldrb	r2, [r0, #16]
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002684:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002688:	b932      	cbnz	r2, 8002698 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800268c:	f10d 0006 	add.w	r0, sp, #6
 8002690:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002692:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002694:	7043      	strb	r3, [r0, #1]
      break; 
 8002696:	e7e3      	b.n	8002660 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	e7f7      	b.n	800268c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d837      	bhi.n	8002712 <USBD_StdDevReq+0xfa>
 80026a2:	e8df f003 	tbb	[pc, r3]
 80026a6:	0703      	.short	0x0703
 80026a8:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80026ac:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	e7d1      	b.n	8002658 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80026b4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	e7cd      	b.n	8002658 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80026bc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	e7c9      	b.n	8002658 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80026c4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	e7c5      	b.n	8002658 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80026cc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	e7c1      	b.n	8002658 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80026d4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	e7bd      	b.n	8002658 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80026dc:	7c03      	ldrb	r3, [r0, #16]
 80026de:	b9c3      	cbnz	r3, 8002712 <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80026e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026e4:	f10d 0006 	add.w	r0, sp, #6
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	4798      	blx	r3
      break;
 80026ec:	e7b8      	b.n	8002660 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80026ee:	7c03      	ldrb	r3, [r0, #16]
 80026f0:	b97b      	cbnz	r3, 8002712 <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80026f2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026f6:	f10d 0006 	add.w	r0, sp, #6
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80026fe:	2307      	movs	r3, #7
 8002700:	e7c8      	b.n	8002694 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002702:	888b      	ldrh	r3, [r1, #4]
 8002704:	b92b      	cbnz	r3, 8002712 <USBD_StdDevReq+0xfa>
 8002706:	88cb      	ldrh	r3, [r1, #6]
 8002708:	b91b      	cbnz	r3, 8002712 <USBD_StdDevReq+0xfa>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800270a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800270e:	2b03      	cmp	r3, #3
 8002710:	d103      	bne.n	800271a <USBD_StdDevReq+0x102>
       USBD_CtlError(pdev , req);                     
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff ff75 	bl	8002602 <USBD_CtlError.constprop.0>
      break;
 8002718:	e00e      	b.n	8002738 <USBD_StdDevReq+0x120>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800271a:	884d      	ldrh	r5, [r1, #2]
 800271c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002720:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8002722:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002726:	f000 fd28 	bl	800317a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800272a:	4620      	mov	r0, r4
 800272c:	f000 f941 	bl	80029b2 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002730:	b12d      	cbz	r5, 800273e <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002732:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002734:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002738:	2000      	movs	r0, #0
 800273a:	b003      	add	sp, #12
 800273c:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800273e:	2301      	movs	r3, #1
 8002740:	e7f8      	b.n	8002734 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002742:	7889      	ldrb	r1, [r1, #2]
 8002744:	4d30      	ldr	r5, [pc, #192]	; (8002808 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002746:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002748:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800274a:	d8e2      	bhi.n	8002712 <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state) 
 800274c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002750:	2b02      	cmp	r3, #2
 8002752:	d00c      	beq.n	800276e <USBD_StdDevReq+0x156>
 8002754:	2b03      	cmp	r3, #3
 8002756:	d1dc      	bne.n	8002712 <USBD_StdDevReq+0xfa>
      if (cfgidx == 0) 
 8002758:	b9b1      	cbnz	r1, 8002788 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800275a:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 800275c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800275e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002762:	f7ff fe5e 	bl	8002422 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002766:	4620      	mov	r0, r4
 8002768:	f000 f923 	bl	80029b2 <USBD_CtlSendStatus>
 800276c:	e7e4      	b.n	8002738 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800276e:	2900      	cmp	r1, #0
 8002770:	d0f9      	beq.n	8002766 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002772:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002774:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002776:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002778:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff fe45 	bl	800240c <USBD_SetClassConfig>
 8002782:	2802      	cmp	r0, #2
 8002784:	d1ef      	bne.n	8002766 <USBD_StdDevReq+0x14e>
 8002786:	e7c4      	b.n	8002712 <USBD_StdDevReq+0xfa>
      else  if (cfgidx != pdev->dev_config) 
 8002788:	6841      	ldr	r1, [r0, #4]
 800278a:	2901      	cmp	r1, #1
 800278c:	d0eb      	beq.n	8002766 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800278e:	b2c9      	uxtb	r1, r1
 8002790:	f7ff fe47 	bl	8002422 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002794:	7829      	ldrb	r1, [r5, #0]
 8002796:	6061      	str	r1, [r4, #4]
 8002798:	e7f0      	b.n	800277c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800279a:	88ca      	ldrh	r2, [r1, #6]
 800279c:	2a01      	cmp	r2, #1
 800279e:	d1b8      	bne.n	8002712 <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state )  
 80027a0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d003      	beq.n	80027b0 <USBD_StdDevReq+0x198>
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d1b2      	bne.n	8002712 <USBD_StdDevReq+0xfa>
      USBD_CtlSendData (pdev, 
 80027ac:	1d01      	adds	r1, r0, #4
 80027ae:	e764      	b.n	800267a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80027b0:	4601      	mov	r1, r0
 80027b2:	2300      	movs	r3, #0
 80027b4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 80027b8:	e75f      	b.n	800267a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80027ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80027be:	3b02      	subs	r3, #2
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d8a6      	bhi.n	8002712 <USBD_StdDevReq+0xfa>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80027c4:	2301      	movs	r3, #1
 80027c6:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80027c8:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80027cc:	b10b      	cbz	r3, 80027d2 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80027ce:	2303      	movs	r3, #3
 80027d0:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80027d2:	2202      	movs	r2, #2
 80027d4:	f104 010c 	add.w	r1, r4, #12
 80027d8:	e74f      	b.n	800267a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80027da:	884b      	ldrh	r3, [r1, #2]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d1ab      	bne.n	8002738 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80027e0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80027e4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80027e8:	4629      	mov	r1, r5
 80027ea:	4620      	mov	r0, r4
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4798      	blx	r3
 80027f0:	e7b9      	b.n	8002766 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80027f2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80027f6:	3b02      	subs	r3, #2
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d88a      	bhi.n	8002712 <USBD_StdDevReq+0xfa>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80027fc:	884b      	ldrh	r3, [r1, #2]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d19a      	bne.n	8002738 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002802:	2300      	movs	r3, #0
 8002804:	e7ec      	b.n	80027e0 <USBD_StdDevReq+0x1c8>
 8002806:	bf00      	nop
 8002808:	20000160 	.word	0x20000160

0800280c <USBD_StdItfReq>:
{
 800280c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800280e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002812:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002814:	2b03      	cmp	r3, #3
{
 8002816:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002818:	d10d      	bne.n	8002836 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800281a:	790b      	ldrb	r3, [r1, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d80a      	bhi.n	8002836 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002820:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002828:	88eb      	ldrh	r3, [r5, #6]
 800282a:	b913      	cbnz	r3, 8002832 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800282c:	4620      	mov	r0, r4
 800282e:	f000 f8c0 	bl	80029b2 <USBD_CtlSendStatus>
}
 8002832:	2000      	movs	r0, #0
 8002834:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002836:	f7ff fee4 	bl	8002602 <USBD_CtlError.constprop.0>
    break;
 800283a:	e7fa      	b.n	8002832 <USBD_StdItfReq+0x26>

0800283c <USBD_StdEPReq>:
{
 800283c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800283e:	780a      	ldrb	r2, [r1, #0]
{
 8002840:	4604      	mov	r4, r0
  if ((req->bmRequest & 0x60) == 0x20)
 8002842:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002846:	2a20      	cmp	r2, #32
{
 8002848:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800284a:	888e      	ldrh	r6, [r1, #4]
 800284c:	790b      	ldrb	r3, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800284e:	d105      	bne.n	800285c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002850:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	4798      	blx	r3
}
 8002858:	2000      	movs	r0, #0
 800285a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 800285c:	784a      	ldrb	r2, [r1, #1]
 800285e:	2a01      	cmp	r2, #1
 8002860:	d03a      	beq.n	80028d8 <USBD_StdEPReq+0x9c>
 8002862:	2a03      	cmp	r2, #3
 8002864:	d01d      	beq.n	80028a2 <USBD_StdEPReq+0x66>
 8002866:	2a00      	cmp	r2, #0
 8002868:	d1f6      	bne.n	8002858 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800286a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800286e:	2a02      	cmp	r2, #2
 8002870:	d041      	beq.n	80028f6 <USBD_StdEPReq+0xba>
 8002872:	2a03      	cmp	r2, #3
 8002874:	d11b      	bne.n	80028ae <USBD_StdEPReq+0x72>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002876:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800287a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800287e:	0632      	lsls	r2, r6, #24
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002880:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002882:	bf4c      	ite	mi
 8002884:	3514      	addmi	r5, #20
 8002886:	f505 7582 	addpl.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800288a:	f000 fc66 	bl	800315a <USBD_LL_IsStallEP>
 800288e:	3800      	subs	r0, #0
 8002890:	bf18      	it	ne
 8002892:	2001      	movne	r0, #1
      USBD_CtlSendData (pdev,
 8002894:	2202      	movs	r2, #2
 8002896:	6028      	str	r0, [r5, #0]
 8002898:	4629      	mov	r1, r5
 800289a:	4620      	mov	r0, r4
 800289c:	f000 f86c 	bl	8002978 <USBD_CtlSendData>
      break;
 80028a0:	e7da      	b.n	8002858 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80028a2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80028a6:	2a02      	cmp	r2, #2
 80028a8:	d025      	beq.n	80028f6 <USBD_StdEPReq+0xba>
 80028aa:	2a03      	cmp	r2, #3
 80028ac:	d003      	beq.n	80028b6 <USBD_StdEPReq+0x7a>
      USBD_CtlError(pdev , req);
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff fea7 	bl	8002602 <USBD_CtlError.constprop.0>
      break;    
 80028b4:	e7d0      	b.n	8002858 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80028b6:	884a      	ldrh	r2, [r1, #2]
 80028b8:	b922      	cbnz	r2, 80028c4 <USBD_StdEPReq+0x88>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80028ba:	065a      	lsls	r2, r3, #25
 80028bc:	d002      	beq.n	80028c4 <USBD_StdEPReq+0x88>
          USBD_LL_StallEP(pdev , ep_addr);
 80028be:	4619      	mov	r1, r3
 80028c0:	f000 fc39 	bl	8003136 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80028c4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80028c8:	4629      	mov	r1, r5
 80028ca:	4620      	mov	r0, r4
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80028d0:	4620      	mov	r0, r4
 80028d2:	f000 f86e 	bl	80029b2 <USBD_CtlSendStatus>
 80028d6:	e7bf      	b.n	8002858 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80028d8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80028dc:	2a02      	cmp	r2, #2
 80028de:	d00a      	beq.n	80028f6 <USBD_StdEPReq+0xba>
 80028e0:	2a03      	cmp	r2, #3
 80028e2:	d1e4      	bne.n	80028ae <USBD_StdEPReq+0x72>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80028e4:	884a      	ldrh	r2, [r1, #2]
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	d1b6      	bne.n	8002858 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80028ea:	065e      	lsls	r6, r3, #25
 80028ec:	d0f0      	beq.n	80028d0 <USBD_StdEPReq+0x94>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80028ee:	4619      	mov	r1, r3
 80028f0:	f000 fc2a 	bl	8003148 <USBD_LL_ClearStallEP>
 80028f4:	e7e6      	b.n	80028c4 <USBD_StdEPReq+0x88>
      if ((ep_addr & 0x7F) != 0x00) 
 80028f6:	0659      	lsls	r1, r3, #25
 80028f8:	d0ae      	beq.n	8002858 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80028fa:	4619      	mov	r1, r3
 80028fc:	f000 fc1b 	bl	8003136 <USBD_LL_StallEP>
 8002900:	e7aa      	b.n	8002858 <USBD_StdEPReq+0x1c>

08002902 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002902:	780b      	ldrb	r3, [r1, #0]
 8002904:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002906:	784b      	ldrb	r3, [r1, #1]
 8002908:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800290a:	78ca      	ldrb	r2, [r1, #3]
 800290c:	788b      	ldrb	r3, [r1, #2]
 800290e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002912:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002914:	794a      	ldrb	r2, [r1, #5]
 8002916:	790b      	ldrb	r3, [r1, #4]
 8002918:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800291c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800291e:	79ca      	ldrb	r2, [r1, #7]
 8002920:	798b      	ldrb	r3, [r1, #6]
 8002922:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002926:	80c3      	strh	r3, [r0, #6]
}
 8002928:	4770      	bx	lr

0800292a <USBD_CtlError>:
{
 800292a:	b510      	push	{r4, lr}
 800292c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	f000 fc01 	bl	8003136 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002934:	4620      	mov	r0, r4
}
 8002936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800293a:	2100      	movs	r1, #0
 800293c:	f000 bbfb 	b.w	8003136 <USBD_LL_StallEP>

08002940 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002940:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002942:	b188      	cbz	r0, 8002968 <USBD_GetString+0x28>
 8002944:	2400      	movs	r4, #0
 8002946:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002948:	4623      	mov	r3, r4
 800294a:	3401      	adds	r4, #1
 800294c:	5d05      	ldrb	r5, [r0, r4]
 800294e:	2d00      	cmp	r5, #0
 8002950:	d1fa      	bne.n	8002948 <USBD_GetString+0x8>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3301      	adds	r3, #1
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800295a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800295c:	2303      	movs	r3, #3
 800295e:	704b      	strb	r3, [r1, #1]
 8002960:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002962:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8002966:	b904      	cbnz	r4, 800296a <USBD_GetString+0x2a>
}
 8002968:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	54cc      	strb	r4, [r1, r3]
 800296e:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002970:	3302      	adds	r3, #2
 8002972:	b2db      	uxtb	r3, r3
 8002974:	548d      	strb	r5, [r1, r2]
 8002976:	e7f4      	b.n	8002962 <USBD_GetString+0x22>

08002978 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002978:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800297a:	2202      	movs	r2, #2
{
 800297c:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800297e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002982:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002986:	460a      	mov	r2, r1
 8002988:	2100      	movs	r1, #0
 800298a:	f000 fbff 	bl	800318c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800298e:	2000      	movs	r0, #0
 8002990:	bd10      	pop	{r4, pc}

08002992 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002992:	b508      	push	{r3, lr}
 8002994:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002996:	460a      	mov	r2, r1
 8002998:	2100      	movs	r1, #0
 800299a:	f000 fbf7 	bl	800318c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800299e:	2000      	movs	r0, #0
 80029a0:	bd08      	pop	{r3, pc}

080029a2 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80029a2:	b508      	push	{r3, lr}
 80029a4:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 80029a6:	460a      	mov	r2, r1
 80029a8:	2100      	movs	r1, #0
 80029aa:	f000 fbf8 	bl	800319e <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80029ae:	2000      	movs	r0, #0
 80029b0:	bd08      	pop	{r3, pc}

080029b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80029b2:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80029b4:	2304      	movs	r3, #4
 80029b6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80029ba:	2300      	movs	r3, #0
 80029bc:	461a      	mov	r2, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	f000 fbe4 	bl	800318c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80029c4:	2000      	movs	r0, #0
 80029c6:	bd08      	pop	{r3, pc}

080029c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80029c8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80029ca:	2305      	movs	r3, #5
 80029cc:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80029d0:	2300      	movs	r3, #0
 80029d2:	461a      	mov	r2, r3
 80029d4:	4619      	mov	r1, r3
 80029d6:	f000 fbe2 	bl	800319e <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80029da:	2000      	movs	r0, #0
 80029dc:	bd08      	pop	{r3, pc}
	...

080029e0 <fastGpioInitOutputPP_DATA>:
    		((GPIO_SPEED_FREQ_HIGH + GPIO_CR_CNF_GP_OUTPUT_PP) << position));
}

static void fastGpioInitOutputPP_DATA(void) {
	#define  GPIO_CR_CNF_GP_OUTPUT_OD   0x00000004U
    MODIFY_REG(PORT_DATA->CRH, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << ((PIN_DATA_NUM - 8) << 2)),
 80029e0:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <fastGpioInitOutputPP_DATA+0x10>)
 80029e2:	6853      	ldr	r3, [r2, #4]
 80029e4:	f023 030f 	bic.w	r3, r3, #15
 80029e8:	f043 0303 	orr.w	r3, r3, #3
 80029ec:	6053      	str	r3, [r2, #4]
    		((GPIO_SPEED_FREQ_HIGH + GPIO_CR_CNF_GP_OUTPUT_PP) << ((PIN_DATA_NUM - 8) << 2)));
}
 80029ee:	4770      	bx	lr
 80029f0:	40010c00 	.word	0x40010c00

080029f4 <receiveData>:
	SET_BIT(EXTI->FTSR, 0x01U << pinNum); //FALLING_EDGE
}

static uint32_t receiveData(uint32_t bitCount) {
	uint32_t data = 0;
	for(uint32_t i = 0; i < bitCount; i++) {
 80029f4:	2300      	movs	r3, #0
static uint32_t receiveData(uint32_t bitCount) {
 80029f6:	4601      	mov	r1, r0
	uint32_t data = 0;
 80029f8:	4618      	mov	r0, r3
static uint32_t receiveData(uint32_t bitCount) {
 80029fa:	b510      	push	{r4, lr}
		while ((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 80029fc:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <receiveData+0x30>)
 80029fe:	6894      	ldr	r4, [r2, #8]
 8002a00:	0624      	lsls	r4, r4, #24
 8002a02:	d502      	bpl.n	8002a0a <receiveData+0x16>
				(PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
 8002a04:	6894      	ldr	r4, [r2, #8]
		while ((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 8002a06:	05a4      	lsls	r4, r4, #22
 8002a08:	d5f9      	bpl.n	80029fe <receiveData+0xa>
		data <<= 1;
		if ((PORT_DATA->IDR & PIN_DATA) != GPIO_PIN_RESET) {
 8002a0a:	6894      	ldr	r4, [r2, #8]
		data <<= 1;
 8002a0c:	0040      	lsls	r0, r0, #1
		if ((PORT_DATA->IDR & PIN_DATA) != GPIO_PIN_RESET) {
 8002a0e:	05e4      	lsls	r4, r4, #23
			data++;
 8002a10:	bf48      	it	mi
 8002a12:	3001      	addmi	r0, #1
		}
		while((PORT_CLK->IDR & PIN_CLK) == GPIO_PIN_RESET);
 8002a14:	6894      	ldr	r4, [r2, #8]
 8002a16:	0624      	lsls	r4, r4, #24
 8002a18:	d5fc      	bpl.n	8002a14 <receiveData+0x20>
	for(uint32_t i = 0; i < bitCount; i++) {
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4299      	cmp	r1, r3
 8002a1e:	d1ee      	bne.n	80029fe <receiveData+0xa>
	}
	return data;
}
 8002a20:	bd10      	pop	{r4, pc}
 8002a22:	bf00      	nop
 8002a24:	40010c00 	.word	0x40010c00

08002a28 <sendByte>:

static void sendByte(uint32_t data) {
 8002a28:	b530      	push	{r4, r5, lr}
 8002a2a:	2208      	movs	r2, #8
		while((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
				 (PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
		if(data & 0x80){
			PORT_DATA->BSRR = PIN_DATA;
		} else {
			PORT_DATA->BSRR = PIN_DATA << 16;
 8002a2c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
			PORT_DATA->BSRR = PIN_DATA;
 8002a30:	f44f 7480 	mov.w	r4, #256	; 0x100
		while((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <sendByte+0x30>)
 8002a36:	689d      	ldr	r5, [r3, #8]
 8002a38:	062d      	lsls	r5, r5, #24
 8002a3a:	d502      	bpl.n	8002a42 <sendByte+0x1a>
				 (PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
 8002a3c:	689d      	ldr	r5, [r3, #8]
		while((PORT_CLK->IDR & PIN_CLK) != GPIO_PIN_RESET &&
 8002a3e:	05ad      	lsls	r5, r5, #22
 8002a40:	d5f9      	bpl.n	8002a36 <sendByte+0xe>
		if(data & 0x80){
 8002a42:	0605      	lsls	r5, r0, #24
			PORT_DATA->BSRR = PIN_DATA;
 8002a44:	bf4c      	ite	mi
 8002a46:	611c      	strmi	r4, [r3, #16]
			PORT_DATA->BSRR = PIN_DATA << 16;
 8002a48:	6119      	strpl	r1, [r3, #16]
		}
		data <<= 1;
 8002a4a:	0040      	lsls	r0, r0, #1
		while((PORT_CLK->IDR & PIN_CLK) == GPIO_PIN_RESET);
 8002a4c:	689d      	ldr	r5, [r3, #8]
 8002a4e:	062d      	lsls	r5, r5, #24
 8002a50:	d5fc      	bpl.n	8002a4c <sendByte+0x24>
	for(uint32_t i = 0; i < 8; i++) {
 8002a52:	3a01      	subs	r2, #1
 8002a54:	d1ef      	bne.n	8002a36 <sendByte+0xe>
	}
}
 8002a56:	bd30      	pop	{r4, r5, pc}
 8002a58:	40010c00 	.word	0x40010c00

08002a5c <openFile>:
static FRESULT openFile(char *filename) {
 8002a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a60:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8002a64:	4605      	mov	r5, r0
    fr = f_opendir(&dj, "");
 8002a66:	4921      	ldr	r1, [pc, #132]	; (8002aec <openFile+0x90>)
 8002a68:	a807      	add	r0, sp, #28
 8002a6a:	f001 f8ef 	bl	8003c4c <f_opendir>
    if(fr == FR_OK){
 8002a6e:	4604      	mov	r4, r0
 8002a70:	b950      	cbnz	r0, 8002a88 <openFile+0x2c>
			if (fr == FR_OK && (strcmp(fno.fname, "AUTORUN.BIN") != 0) && !(fno.fattrib & AM_DIR)) {
 8002a72:	4f1f      	ldr	r7, [pc, #124]	; (8002af0 <openFile+0x94>)
				strcpy(fileList[i++], fno.fname);
 8002a74:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8002af4 <openFile+0x98>
			fr = f_readdir(&dj, &fno);
 8002a78:	a901      	add	r1, sp, #4
 8002a7a:	a807      	add	r0, sp, #28
 8002a7c:	f001 f921 	bl	8003cc2 <f_readdir>
			if (fr == FR_OK && (strcmp(fno.fname, "AUTORUN.BIN") != 0) && !(fno.fattrib & AM_DIR)) {
 8002a80:	b1e8      	cbz	r0, 8002abe <openFile+0x62>
		f_closedir(&dj);
 8002a82:	a807      	add	r0, sp, #28
 8002a84:	f001 f914 	bl	8003cb0 <f_closedir>
    	fr = f_open(&appFile, filename, FA_READ);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	481a      	ldr	r0, [pc, #104]	; (8002af8 <openFile+0x9c>)
 8002a8e:	f000 ffa3 	bl	80039d8 <f_open>
    if (fr != FR_OK && fileList[0]) {
 8002a92:	4c19      	ldr	r4, [pc, #100]	; (8002af8 <openFile+0x9c>)
 8002a94:	b128      	cbz	r0, 8002aa2 <openFile+0x46>
    	fr = f_open(&appFile, fileList[0], FA_READ);
 8002a96:	2201      	movs	r2, #1
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4916      	ldr	r1, [pc, #88]	; (8002af4 <openFile+0x98>)
 8002a9c:	f000 ff9c 	bl	80039d8 <f_open>
    if (fr == FR_OK) {
 8002aa0:	b948      	cbnz	r0, 8002ab6 <openFile+0x5a>
		lktbl[0] = 256;
 8002aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa6:	ab12      	add	r3, sp, #72	; 0x48
		fr = f_lseek(&appFile, CREATE_LINKMAP);
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	4812      	ldr	r0, [pc, #72]	; (8002af8 <openFile+0x9c>)
		lktbl[0] = 256;
 8002aae:	9212      	str	r2, [sp, #72]	; 0x48
		appFile.cltbl = lktbl;
 8002ab0:	6223      	str	r3, [r4, #32]
		fr = f_lseek(&appFile, CREATE_LINKMAP);
 8002ab2:	f001 f813 	bl	8003adc <f_lseek>
}
 8002ab6:	f50d 6d89 	add.w	sp, sp, #1096	; 0x448
 8002aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (fr == FR_OK && (strcmp(fno.fname, "AUTORUN.BIN") != 0) && !(fno.fattrib & AM_DIR)) {
 8002abe:	4639      	mov	r1, r7
 8002ac0:	f10d 000d 	add.w	r0, sp, #13
 8002ac4:	f7fd fb42 	bl	800014c <strcmp>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d0d5      	beq.n	8002a78 <openFile+0x1c>
 8002acc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002ad0:	06db      	lsls	r3, r3, #27
 8002ad2:	d4d1      	bmi.n	8002a78 <openFile+0x1c>
				strcpy(fileList[i++], fno.fname);
 8002ad4:	200d      	movs	r0, #13
 8002ad6:	1c66      	adds	r6, r4, #1
 8002ad8:	fb00 8004 	mla	r0, r0, r4, r8
 8002adc:	f10d 010d 	add.w	r1, sp, #13
 8002ae0:	f001 f9ba 	bl	8003e58 <strcpy>
		} while (fr == FR_OK && i<255);
 8002ae4:	2eff      	cmp	r6, #255	; 0xff
 8002ae6:	d0cc      	beq.n	8002a82 <openFile+0x26>
 8002ae8:	4634      	mov	r4, r6
 8002aea:	e7c5      	b.n	8002a78 <openFile+0x1c>
 8002aec:	08003e90 	.word	0x08003e90
 8002af0:	08003ea8 	.word	0x08003ea8
 8002af4:	200005b0 	.word	0x200005b0
 8002af8:	2000058c 	.word	0x2000058c

08002afc <fastGpioInitEvtFal.constprop.0>:
    __HAL_RCC_AFIO_CLK_ENABLE();
 8002afc:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <fastGpioInitEvtFal.constprop.0+0x64>)
static void fastGpioInitEvtFal(GPIO_TypeDef *GPIOx, uint32_t pinNum) {
 8002afe:	b513      	push	{r0, r1, r4, lr}
    __HAL_RCC_AFIO_CLK_ENABLE();
 8002b00:	699a      	ldr	r2, [r3, #24]
	MODIFY_REG(AFIO->EXTICR[pinNum >> 2], (0x0F << (4 * (pinNum & 0x03))),
 8002b02:	f000 0103 	and.w	r1, r0, #3
    __HAL_RCC_AFIO_CLK_ENABLE();
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	619a      	str	r2, [r3, #24]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f020 0203 	bic.w	r2, r0, #3
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	9b01      	ldr	r3, [sp, #4]
	MODIFY_REG(AFIO->EXTICR[pinNum >> 2], (0x0F << (4 * (pinNum & 0x03))),
 8002b1a:	230f      	movs	r3, #15
 8002b1c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002b20:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002b24:	6894      	ldr	r4, [r2, #8]
 8002b26:	0089      	lsls	r1, r1, #2
 8002b28:	408b      	lsls	r3, r1
 8002b2a:	ea24 0403 	bic.w	r4, r4, r3
 8002b2e:	2301      	movs	r3, #1
 8002b30:	fa03 f101 	lsl.w	r1, r3, r1
 8002b34:	4321      	orrs	r1, r4
 8002b36:	6091      	str	r1, [r2, #8]
	CLEAR_BIT(EXTI->IMR, 0x01U << pinNum); //GPIO_MODE_IT
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <fastGpioInitEvtFal.constprop.0+0x68>)
 8002b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8002b3e:	6811      	ldr	r1, [r2, #0]
 8002b40:	ea21 0100 	bic.w	r1, r1, r0
 8002b44:	6011      	str	r1, [r2, #0]
	SET_BIT(EXTI->EMR, 0x01U << pinNum); //GPIO_MODE_EVT
 8002b46:	6853      	ldr	r3, [r2, #4]
 8002b48:	4303      	orrs	r3, r0
 8002b4a:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(EXTI->RTSR, 0x01U << pinNum); //RISING_EDGE
 8002b4c:	6893      	ldr	r3, [r2, #8]
 8002b4e:	ea23 0300 	bic.w	r3, r3, r0
 8002b52:	6093      	str	r3, [r2, #8]
	SET_BIT(EXTI->FTSR, 0x01U << pinNum); //FALLING_EDGE
 8002b54:	68d3      	ldr	r3, [r2, #12]
 8002b56:	4318      	orrs	r0, r3
 8002b58:	60d0      	str	r0, [r2, #12]
}
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd10      	pop	{r4, pc}
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010400 	.word	0x40010400

08002b68 <PVD_IRQHandler>:
   	HAL_PWR_ConfigPVD(&sConfigPVD); //event on supply voltage < 2.8V
    HAL_PWR_EnablePVD();
}

void PVD_IRQHandler(void) {
    HAL_PWR_PVD_IRQHandler();
 8002b68:	f7fe b954 	b.w	8000e14 <HAL_PWR_PVD_IRQHandler>

08002b6c <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8002b6c:	b508      	push	{r3, lr}
	HAL_ResumeTick();
 8002b6e:	f7fd fb58 	bl	8000222 <HAL_ResumeTick>
	while(1){
		HAL_Delay(100);
		PORT_LED->ODR ^= PIN_LED;
 8002b72:	4c04      	ldr	r4, [pc, #16]	; (8002b84 <Error_Handler+0x18>)
		HAL_Delay(100);
 8002b74:	2064      	movs	r0, #100	; 0x64
 8002b76:	f7fd fb3b 	bl	80001f0 <HAL_Delay>
		PORT_LED->ODR ^= PIN_LED;
 8002b7a:	68e3      	ldr	r3, [r4, #12]
 8002b7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b80:	60e3      	str	r3, [r4, #12]
	while(1){
 8002b82:	e7f7      	b.n	8002b74 <Error_Handler+0x8>
 8002b84:	40011000 	.word	0x40011000

08002b88 <SystemClock_Config>:
static void SystemClock_Config(void) {
 8002b88:	b530      	push	{r4, r5, lr}
 8002b8a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b8c:	2214      	movs	r2, #20
 8002b8e:	2100      	movs	r1, #0
 8002b90:	a80c      	add	r0, sp, #48	; 0x30
 8002b92:	f001 f959 	bl	8003e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b96:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b98:	2410      	movs	r4, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	eb0d 0002 	add.w	r0, sp, r2
 8002ba0:	f001 f952 	bl	8003e48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	a801      	add	r0, sp, #4
 8002baa:	f001 f94d 	bl	8003e48 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bae:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bba:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002bbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002bc2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bc4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002bc6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002bc8:	f7fe f932 	bl	8000e30 <HAL_RCC_OscConfig>
 8002bcc:	4601      	mov	r1, r0
 8002bce:	b108      	cbz	r0, 8002bd4 <SystemClock_Config+0x4c>
    Error_Handler();
 8002bd0:	f7ff ffcc 	bl	8002b6c <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bd4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd6:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bde:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002be0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002be2:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002be6:	f7fe faeb 	bl	80011c0 <HAL_RCC_ClockConfig>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d1f0      	bne.n	8002bd0 <SystemClock_Config+0x48>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002bf2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002bf4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002bf6:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002bf8:	f7fe fb92 	bl	8001320 <HAL_RCCEx_PeriphCLKConfig>
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d1e7      	bne.n	8002bd0 <SystemClock_Config+0x48>
}
 8002c00:	b015      	add	sp, #84	; 0x54
 8002c02:	bd30      	pop	{r4, r5, pc}

08002c04 <main>:
int main(void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
	HAL_Init();
 8002c08:	f7fd face 	bl	80001a8 <HAL_Init>
	HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8002c0c:	2200      	movs	r2, #0
	__HAL_RCC_PWR_CLK_ENABLE();	//Enable Power Clock
 8002c0e:	4c99      	ldr	r4, [pc, #612]	; (8002e74 <main+0x270>)
	HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8002c10:	4611      	mov	r1, r2
	__HAL_RCC_PWR_CLK_ENABLE();	//Enable Power Clock
 8002c12:	69e3      	ldr	r3, [r4, #28]
	HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8002c14:	2001      	movs	r0, #1
	__HAL_RCC_PWR_CLK_ENABLE();	//Enable Power Clock
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	61e3      	str	r3, [r4, #28]
 8002c1c:	69e3      	ldr	r3, [r4, #28]
	WRITE_REG(GPIOB->CRL, 0x88888888U);
 8002c1e:	4e96      	ldr	r6, [pc, #600]	; (8002e78 <main+0x274>)
	__HAL_RCC_PWR_CLK_ENABLE();	//Enable Power Clock
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	9305      	str	r3, [sp, #20]
 8002c26:	9b05      	ldr	r3, [sp, #20]
	HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8002c28:	f7fd fb14 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f7fd fb43 	bl	80002b8 <HAL_NVIC_EnableIRQ>
    sConfigPVD.Mode =  PWR_PVD_MODE_IT_RISING;
 8002c32:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002c36:	20e0      	movs	r0, #224	; 0xe0
 8002c38:	e9cd 0306 	strd	r0, r3, [sp, #24]
   	HAL_PWR_ConfigPVD(&sConfigPVD); //event on supply voltage < 2.8V
 8002c3c:	a806      	add	r0, sp, #24
 8002c3e:	f7fe f877 	bl	8000d30 <HAL_PWR_ConfigPVD>
    HAL_PWR_EnablePVD();
 8002c42:	f7fe f8ab 	bl	8000d9c <HAL_PWR_EnablePVD>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	69a3      	ldr	r3, [r4, #24]
	GPIOA->BSRR = 0x0000;
 8002c48:	2100      	movs	r1, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	61a3      	str	r3, [r4, #24]
 8002c50:	69a3      	ldr	r3, [r4, #24]
	WRITE_REG(GPIOA->CRL, 0x88888888U);
 8002c52:	4a8a      	ldr	r2, [pc, #552]	; (8002e7c <main+0x278>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	69a3      	ldr	r3, [r4, #24]
	WRITE_REG(GPIOC->CRH, 0x88888888U);
 8002c5e:	4d88      	ldr	r5, [pc, #544]	; (8002e80 <main+0x27c>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	61a3      	str	r3, [r4, #24]
 8002c66:	69a3      	ldr	r3, [r4, #24]
  fastGpioInitEvtFal(PORT_SELECT, PIN_SELECT_NUM);
 8002c68:	2009      	movs	r0, #9
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	9302      	str	r3, [sp, #8]
 8002c70:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	69a3      	ldr	r3, [r4, #24]
		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO)) {
 8002c74:	4f83      	ldr	r7, [pc, #524]	; (8002e84 <main+0x280>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c76:	f043 0310 	orr.w	r3, r3, #16
 8002c7a:	61a3      	str	r3, [r4, #24]
 8002c7c:	69a3      	ldr	r3, [r4, #24]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	9303      	str	r3, [sp, #12]
 8002c84:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002c86:	69a3      	ldr	r3, [r4, #24]
 8002c88:	f043 0320 	orr.w	r3, r3, #32
 8002c8c:	61a3      	str	r3, [r4, #24]
 8002c8e:	69a3      	ldr	r3, [r4, #24]
    MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002c90:	f5a4 3488 	sub.w	r4, r4, #69632	; 0x11000
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	9304      	str	r3, [sp, #16]
 8002c9a:	9b04      	ldr	r3, [sp, #16]
	WRITE_REG(GPIOA->CRL, 0x88888888U);
 8002c9c:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8002ca0:	6013      	str	r3, [r2, #0]
	WRITE_REG(GPIOA->CRH, 0x88888888U);
 8002ca2:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR = 0x0000;
 8002ca4:	6111      	str	r1, [r2, #16]
	GPIOB->BSRR = 0xFFFF;
 8002ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
	WRITE_REG(GPIOB->CRL, 0x88888888U);
 8002caa:	6033      	str	r3, [r6, #0]
	WRITE_REG(GPIOB->CRH, 0x88888888U);
 8002cac:	6073      	str	r3, [r6, #4]
	GPIOB->BSRR = 0xFFFF;
 8002cae:	6132      	str	r2, [r6, #16]
	GPIOC->BSRR = 0x0000 | PIN_LED;
 8002cb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	WRITE_REG(GPIOC->CRH, 0x88888888U);
 8002cb4:	606b      	str	r3, [r5, #4]
	GPIOC->BSRR = 0x0000 | PIN_LED;
 8002cb6:	612a      	str	r2, [r5, #16]
	WRITE_REG(GPIOD->CRH, 0x88888888U);
 8002cb8:	4a73      	ldr	r2, [pc, #460]	; (8002e88 <main+0x284>)
 8002cba:	6053      	str	r3, [r2, #4]
	GPIOx->BSRR = 0x01U << pinNum;	//pull-up
 8002cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIOD->BSRR = 0x0000;
 8002cc0:	6111      	str	r1, [r2, #16]
	GPIOx->BSRR = 0x01U << pinNum;	//pull-up
 8002cc2:	6133      	str	r3, [r6, #16]
    MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002cc4:	f8d4 3c04 	ldr.w	r3, [r4, #3076]	; 0xc04
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	f8c4 3c04 	str.w	r3, [r4, #3076]	; 0xc04
	GPIOx->BSRR = 0x01U << pinNum;	//pull-up
 8002cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd8:	6133      	str	r3, [r6, #16]
    MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002cda:	f8d4 3c04 	ldr.w	r3, [r4, #3076]	; 0xc04
 8002cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce6:	f8c4 3c04 	str.w	r3, [r4, #3076]	; 0xc04
  fastGpioInitEvtFal(PORT_SELECT, PIN_SELECT_NUM);
 8002cea:	f7ff ff07 	bl	8002afc <fastGpioInitEvtFal.constprop.0>
	GPIOx->BSRR = 0x01U << pinNum;	//pull-up
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	6133      	str	r3, [r6, #16]
    MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002cf2:	f8d4 3c00 	ldr.w	r3, [r4, #3072]	; 0xc00
  fastGpioInitEvtFal(PORT_CLK, PIN_CLK_NUM);
 8002cf6:	2007      	movs	r0, #7
    MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002cf8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d00:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
  fastGpioInitEvtFal(PORT_CLK, PIN_CLK_NUM);
 8002d04:	f7ff fefa 	bl	8002afc <fastGpioInitEvtFal.constprop.0>
    MODIFY_REG(GPIOx->CRH, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002d08:	686b      	ldr	r3, [r5, #4]
				sendByte(readBuffer);
 8002d0a:	4e60      	ldr	r6, [pc, #384]	; (8002e8c <main+0x288>)
    MODIFY_REG(GPIOx->CRH, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002d0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d10:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002d14:	606b      	str	r3, [r5, #4]
	SystemClock_Config();
 8002d16:	f7ff ff37 	bl	8002b88 <SystemClock_Config>
	MX_USB_DEVICE_Init();
 8002d1a:	f000 f91d 	bl	8002f58 <MX_USB_DEVICE_Init>
	HAL_SuspendTick();	//disable exit from sleep by pvd?
 8002d1e:	f7fd fa79 	bl	8000214 <HAL_SuspendTick>
		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO)) {
 8002d22:	6878      	ldr	r0, [r7, #4]
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 8002d24:	2102      	movs	r1, #2
		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO)) {
 8002d26:	f010 0004 	ands.w	r0, r0, #4
 8002d2a:	d025      	beq.n	8002d78 <main+0x174>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f7fe f84b 	bl	8000dc8 <HAL_PWR_EnterSTOPMode>
			SystemClock_Config();
 8002d32:	f7ff ff29 	bl	8002b88 <SystemClock_Config>
			if(f_mount(&FATFS_Obj, "0", 1) == FR_OK) {
 8002d36:	2201      	movs	r2, #1
 8002d38:	4955      	ldr	r1, [pc, #340]	; (8002e90 <main+0x28c>)
 8002d3a:	4856      	ldr	r0, [pc, #344]	; (8002e94 <main+0x290>)
 8002d3c:	f000 fe28 	bl	8003990 <f_mount>
 8002d40:	b910      	cbnz	r0, 8002d48 <main+0x144>
				openFile("autorun.bin");
 8002d42:	4855      	ldr	r0, [pc, #340]	; (8002e98 <main+0x294>)
 8002d44:	f7ff fe8a 	bl	8002a5c <openFile>
		if ((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET &&
 8002d48:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002e78 <main+0x274>
 8002d4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002d50:	0599      	lsls	r1, r3, #22
 8002d52:	d4e6      	bmi.n	8002d22 <main+0x11e>
			  (PORT_CLK->IDR & PIN_CLK) == GPIO_PIN_RESET) {
 8002d54:	f8d8 4008 	ldr.w	r4, [r8, #8]
		if ((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET &&
 8002d58:	f014 0480 	ands.w	r4, r4, #128	; 0x80
 8002d5c:	d1e1      	bne.n	8002d22 <main+0x11e>
			parseCommand(receiveData(8));
 8002d5e:	2008      	movs	r0, #8
 8002d60:	f7ff fe48 	bl	80029f4 <receiveData>
	switch(command) {
 8002d64:	28d0      	cmp	r0, #208	; 0xd0
 8002d66:	d010      	beq.n	8002d8a <main+0x186>
 8002d68:	d809      	bhi.n	8002d7e <main+0x17a>
 8002d6a:	28a0      	cmp	r0, #160	; 0xa0
 8002d6c:	d049      	beq.n	8002e02 <main+0x1fe>
 8002d6e:	28a8      	cmp	r0, #168	; 0xa8
 8002d70:	d037      	beq.n	8002de2 <main+0x1de>
 8002d72:	b320      	cbz	r0, 8002dbe <main+0x1ba>
			Error_Handler();
 8002d74:	f7ff fefa 	bl	8002b6c <Error_Handler>
			HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFE);
 8002d78:	f7fe f816 	bl	8000da8 <HAL_PWR_EnterSLEEPMode>
 8002d7c:	e7e4      	b.n	8002d48 <main+0x144>
	switch(command) {
 8002d7e:	28f0      	cmp	r0, #240	; 0xf0
 8002d80:	d049      	beq.n	8002e16 <main+0x212>
 8002d82:	28f1      	cmp	r0, #241	; 0xf1
 8002d84:	d05f      	beq.n	8002e46 <main+0x242>
 8002d86:	28d8      	cmp	r0, #216	; 0xd8
 8002d88:	d1f4      	bne.n	8002d74 <main+0x170>
			fastGpioInitOutputPP_DATA();
 8002d8a:	f7ff fe29 	bl	80029e0 <fastGpioInitOutputPP_DATA>
			PORT_LED->BSRR = PIN_LED << 16;
 8002d8e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
			while ((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET) {
 8002d92:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002e78 <main+0x274>
				f_read_byte(&appFile, &readBuffer);
 8002d96:	4c41      	ldr	r4, [pc, #260]	; (8002e9c <main+0x298>)
			PORT_LED->BSRR = PIN_LED << 16;
 8002d98:	612b      	str	r3, [r5, #16]
			while ((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET) {
 8002d9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002d9e:	059a      	lsls	r2, r3, #22
 8002da0:	d531      	bpl.n	8002e06 <main+0x202>
			f_lseek(&appFile, appFile.fptr - 1);
 8002da2:	4c3e      	ldr	r4, [pc, #248]	; (8002e9c <main+0x298>)
 8002da4:	6961      	ldr	r1, [r4, #20]
 8002da6:	4620      	mov	r0, r4
 8002da8:	3901      	subs	r1, #1
 8002daa:	f000 fe97 	bl	8003adc <f_lseek>
			f_read_byte(&appFile, &readBuffer);
 8002dae:	4631      	mov	r1, r6
 8002db0:	4620      	mov	r0, r4
 8002db2:	f000 fe4f 	bl	8003a54 <f_read_byte>
			PORT_LED->BSRR = PIN_LED;
 8002db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dba:	612b      	str	r3, [r5, #16]
 8002dbc:	e003      	b.n	8002dc6 <main+0x1c2>
			fastGpioInitOutputPP_DATA();
 8002dbe:	f7ff fe0f 	bl	80029e0 <fastGpioInitOutputPP_DATA>
			sendByte(0x00);
 8002dc2:	f7ff fe31 	bl	8002a28 <sendByte>
	GPIOx->BSRR = 0x01U << pinNum;	//pull-up
 8002dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dca:	f8c8 3010 	str.w	r3, [r8, #16]
    MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002dce:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <main+0x29c>)
 8002dd0:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	; 0xc04
 8002dd4:	f023 030f 	bic.w	r3, r3, #15
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
}
 8002de0:	e00a      	b.n	8002df8 <main+0x1f4>
			f_lseek(&appFile, receiveData(24));
 8002de2:	2018      	movs	r0, #24
			f_lseek(&appFile, receiveData(16));
 8002de4:	f7ff fe06 	bl	80029f4 <receiveData>
 8002de8:	4601      	mov	r1, r0
 8002dea:	482c      	ldr	r0, [pc, #176]	; (8002e9c <main+0x298>)
 8002dec:	f000 fe76 	bl	8003adc <f_lseek>
			f_read_byte(&appFile, &readBuffer);
 8002df0:	4631      	mov	r1, r6
 8002df2:	482a      	ldr	r0, [pc, #168]	; (8002e9c <main+0x298>)
 8002df4:	f000 fe2e 	bl	8003a54 <f_read_byte>
	while((PORT_SELECT->IDR & PIN_SELECT) == GPIO_PIN_RESET);
 8002df8:	4a1f      	ldr	r2, [pc, #124]	; (8002e78 <main+0x274>)
 8002dfa:	6893      	ldr	r3, [r2, #8]
 8002dfc:	059b      	lsls	r3, r3, #22
 8002dfe:	d5fc      	bpl.n	8002dfa <main+0x1f6>
 8002e00:	e78f      	b.n	8002d22 <main+0x11e>
			f_lseek(&appFile, receiveData(16));
 8002e02:	2010      	movs	r0, #16
 8002e04:	e7ee      	b.n	8002de4 <main+0x1e0>
				sendByte(readBuffer);
 8002e06:	7830      	ldrb	r0, [r6, #0]
 8002e08:	f7ff fe0e 	bl	8002a28 <sendByte>
				f_read_byte(&appFile, &readBuffer);
 8002e0c:	4631      	mov	r1, r6
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f000 fe20 	bl	8003a54 <f_read_byte>
 8002e14:	e7c1      	b.n	8002d9a <main+0x196>
			fastGpioInitOutputPP_DATA();
 8002e16:	f7ff fde3 	bl	80029e0 <fastGpioInitOutputPP_DATA>
            uint32_t j = 0;
 8002e1a:	4c22      	ldr	r4, [pc, #136]	; (8002ea4 <main+0x2a0>)
int main(void) {
 8002e1c:	46a0      	mov	r8, r4
                	sendByte(fileList[i][j]);
 8002e1e:	f898 0000 	ldrb.w	r0, [r8]
 8002e22:	f7ff fe01 	bl	8002a28 <sendByte>
                } while (fileList[i][j++]);
 8002e26:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f7      	bne.n	8002e1e <main+0x21a>
            } while (fileList[i++][0]);
 8002e2e:	f814 3b0d 	ldrb.w	r3, [r4], #13
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f2      	bne.n	8002e1c <main+0x218>
			sendByte(0xFF);
 8002e36:	20ff      	movs	r0, #255	; 0xff
 8002e38:	f7ff fdf6 	bl	8002a28 <sendByte>
	GPIOx->BSRR = 0x01U << pinNum;	//pull-up
 8002e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <main+0x274>)
 8002e42:	611a      	str	r2, [r3, #16]
    MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << position),
 8002e44:	e7c3      	b.n	8002dce <main+0x1ca>
			char filename[12+1] = {0,};
 8002e46:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002e4a:	9408      	str	r4, [sp, #32]
 8002e4c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
			uint32_t i = 0;
 8002e50:	f10d 0818 	add.w	r8, sp, #24
				filename[i] = receiveData(8);
 8002e54:	2008      	movs	r0, #8
 8002e56:	f7ff fdcd 	bl	80029f4 <receiveData>
 8002e5a:	b2c0      	uxtb	r0, r0
 8002e5c:	f808 0b01 	strb.w	r0, [r8], #1
			} while (filename[i] && ++i < 13);
 8002e60:	b110      	cbz	r0, 8002e68 <main+0x264>
 8002e62:	3401      	adds	r4, #1
 8002e64:	2c0d      	cmp	r4, #13
 8002e66:	d1f5      	bne.n	8002e54 <main+0x250>
			if (openFile(filename) != FR_OK) {
 8002e68:	a806      	add	r0, sp, #24
 8002e6a:	f7ff fdf7 	bl	8002a5c <openFile>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d0c2      	beq.n	8002df8 <main+0x1f4>
 8002e72:	e77f      	b.n	8002d74 <main+0x170>
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40010c00 	.word	0x40010c00
 8002e7c:	40010800 	.word	0x40010800
 8002e80:	40011000 	.word	0x40011000
 8002e84:	40007000 	.word	0x40007000
 8002e88:	40011400 	.word	0x40011400
 8002e8c:	200012b0 	.word	0x200012b0
 8002e90:	08003eb4 	.word	0x08003eb4
 8002e94:	20000164 	.word	0x20000164
 8002e98:	08003eb6 	.word	0x08003eb6
 8002e9c:	2000058c 	.word	0x2000058c
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	200005b0 	.word	0x200005b0

08002ea8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_MspInit+0x3c>)
{
 8002eaa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	619a      	str	r2, [r3, #24]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	f002 0201 	and.w	r2, r2, #1
 8002eba:	9200      	str	r2, [sp, #0]
 8002ebc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ec4:	61da      	str	r2, [r3, #28]
 8002ec6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ed2:	6853      	ldr	r3, [r2, #4]
 8002ed4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002edc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ede:	b002      	add	sp, #8
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010000 	.word	0x40010000

08002eec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002eec:	4770      	bx	lr

08002eee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <HardFault_Handler>

08002ef0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef0:	e7fe      	b.n	8002ef0 <MemManage_Handler>

08002ef2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ef2:	e7fe      	b.n	8002ef2 <BusFault_Handler>

08002ef4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <UsageFault_Handler>

08002ef6 <SVC_Handler>:
 8002ef6:	4770      	bx	lr

08002ef8 <DebugMon_Handler>:
 8002ef8:	4770      	bx	lr

08002efa <PendSV_Handler>:
 8002efa:	4770      	bx	lr

08002efc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002efc:	f7fd b966 	b.w	80001cc <HAL_IncTick>

08002f00 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f00:	4801      	ldr	r0, [pc, #4]	; (8002f08 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002f02:	f7fd bc25 	b.w	8000750 <HAL_PCD_IRQHandler>
 8002f06:	bf00      	nop
 8002f08:	200014d8 	.word	0x200014d8

08002f0c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <SystemInit+0x40>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <SystemInit+0x44>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f28:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f30:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f38:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f3e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <SystemInit+0x48>)
 8002f46:	609a      	str	r2, [r3, #8]
#endif 
}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	f8ff0000 	.word	0xf8ff0000
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002f58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	490e      	ldr	r1, [pc, #56]	; (8002f98 <MX_USB_DEVICE_Init+0x40>)
 8002f5e:	480f      	ldr	r0, [pc, #60]	; (8002f9c <MX_USB_DEVICE_Init+0x44>)
 8002f60:	f7ff fa33 	bl	80023ca <USBD_Init>
 8002f64:	b108      	cbz	r0, 8002f6a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002f66:	f7ff fe01 	bl	8002b6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8002f6a:	490d      	ldr	r1, [pc, #52]	; (8002fa0 <MX_USB_DEVICE_Init+0x48>)
 8002f6c:	480b      	ldr	r0, [pc, #44]	; (8002f9c <MX_USB_DEVICE_Init+0x44>)
 8002f6e:	f7ff fa41 	bl	80023f4 <USBD_RegisterClass>
 8002f72:	b108      	cbz	r0, 8002f78 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002f74:	f7ff fdfa 	bl	8002b6c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8002f78:	490a      	ldr	r1, [pc, #40]	; (8002fa4 <MX_USB_DEVICE_Init+0x4c>)
 8002f7a:	4808      	ldr	r0, [pc, #32]	; (8002f9c <MX_USB_DEVICE_Init+0x44>)
 8002f7c:	f7fe fee4 	bl	8001d48 <USBD_MSC_RegisterStorage>
 8002f80:	b108      	cbz	r0, 8002f86 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8002f82:	f7ff fdf3 	bl	8002b6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_USB_DEVICE_Init+0x44>)
 8002f88:	f7ff fa3b 	bl	8002402 <USBD_Start>
 8002f8c:	b118      	cbz	r0, 8002f96 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002f92:	f7ff bdeb 	b.w	8002b6c <Error_Handler>
}
 8002f96:	bd08      	pop	{r3, pc}
 8002f98:	200000b0 	.word	0x200000b0
 8002f9c:	200012b4 	.word	0x200012b4
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	20000100 	.word	0x20000100

08002fa8 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8002fa8:	2803      	cmp	r0, #3
 8002faa:	bf9a      	itte	ls
 8002fac:	4b01      	ldrls	r3, [pc, #4]	; (8002fb4 <USBD_Get_USB_Status+0xc>)
 8002fae:	5c18      	ldrbls	r0, [r3, r0]
{
 8002fb0:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002fb2:	4770      	bx	lr
 8002fb4:	08003ed2 	.word	0x08003ed2

08002fb8 <HAL_PCD_MspInit>:
{
 8002fb8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_PCD_MspInit+0x3c>)
 8002fbc:	6802      	ldr	r2, [r0, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d115      	bne.n	8002fee <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8002fc2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002fc6:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002fc8:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002fca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002fce:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002fd0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002fd2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002fd4:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002fde:	f7fd f939 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002fe2:	2014      	movs	r0, #20
}
 8002fe4:	b003      	add	sp, #12
 8002fe6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002fea:	f7fd b965 	b.w	80002b8 <HAL_NVIC_EnableIRQ>
}
 8002fee:	b003      	add	sp, #12
 8002ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ff4:	40005c00 	.word	0x40005c00

08002ff8 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002ff8:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002ffc:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003000:	f7ff ba16 	b.w	8002430 <USBD_LL_SetupStage>

08003004 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003004:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003008:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 800300c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003010:	f7ff ba3b 	b.w	800248a <USBD_LL_DataOutStage>

08003014 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003014:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800301a:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800301e:	f7ff ba64 	b.w	80024ea <USBD_LL_DataInStage>

08003022 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003022:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003026:	f7ff bae0 	b.w	80025ea <USBD_LL_SOF>

0800302a <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800302a:	6883      	ldr	r3, [r0, #8]
{ 
 800302c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800302e:	2b02      	cmp	r3, #2
{ 
 8003030:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003032:	d001      	beq.n	8003038 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8003034:	f7ff fd9a 	bl	8002b6c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003038:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 800303c:	2101      	movs	r1, #1
 800303e:	f7ff fac2 	bl	80025c6 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003042:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8003046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800304a:	f7ff ba9d 	b.w	8002588 <USBD_LL_Reset>
	...

08003050 <HAL_PCD_SuspendCallback>:
{
 8003050:	b510      	push	{r4, lr}
 8003052:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003054:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003058:	f7ff fab8 	bl	80025cc <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800305c:	69a3      	ldr	r3, [r4, #24]
 800305e:	b123      	cbz	r3, 800306a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003060:	4a02      	ldr	r2, [pc, #8]	; (800306c <HAL_PCD_SuspendCallback+0x1c>)
 8003062:	6913      	ldr	r3, [r2, #16]
 8003064:	f043 0306 	orr.w	r3, r3, #6
 8003068:	6113      	str	r3, [r2, #16]
}
 800306a:	bd10      	pop	{r4, pc}
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003070:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003074:	f7ff bab3 	b.w	80025de <USBD_LL_Resume>

08003078 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003078:	2308      	movs	r3, #8
{
 800307a:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <USBD_LL_Init+0x68>)
{
 800307e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003080:	4818      	ldr	r0, [pc, #96]	; (80030e4 <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003082:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003086:	2302      	movs	r3, #2
 8003088:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800308a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800308c:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8003090:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003094:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003098:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800309a:	f7fd fa51 	bl	8000540 <HAL_PCD_Init>
 800309e:	b108      	cbz	r0, 80030a4 <USBD_LL_Init+0x2c>
    Error_Handler( );
 80030a0:	f7ff fd64 	bl	8002b6c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80030a4:	2200      	movs	r2, #0
 80030a6:	2318      	movs	r3, #24
 80030a8:	4611      	mov	r1, r2
 80030aa:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80030ae:	f7fd fe23 	bl	8000cf8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80030b2:	2358      	movs	r3, #88	; 0x58
 80030b4:	2200      	movs	r2, #0
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80030bc:	f7fd fe1c 	bl	8000cf8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 80030c0:	2398      	movs	r3, #152	; 0x98
 80030c2:	2200      	movs	r2, #0
 80030c4:	2181      	movs	r1, #129	; 0x81
 80030c6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80030ca:	f7fd fe15 	bl	8000cf8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 80030ce:	23d8      	movs	r3, #216	; 0xd8
 80030d0:	2200      	movs	r2, #0
 80030d2:	2101      	movs	r1, #1
 80030d4:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80030d8:	f7fd fe0e 	bl	8000cf8 <HAL_PCDEx_PMAConfig>
}
 80030dc:	2000      	movs	r0, #0
 80030de:	bd10      	pop	{r4, pc}
 80030e0:	40005c00 	.word	0x40005c00
 80030e4:	200014d8 	.word	0x200014d8

080030e8 <USBD_LL_Start>:
{
 80030e8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80030ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80030ee:	f7fd fa8e 	bl	800060e <HAL_PCD_Start>
}
 80030f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80030f6:	f7ff bf57 	b.w	8002fa8 <USBD_Get_USB_Status>

080030fa <USBD_LL_OpenEP>:
{
 80030fa:	b510      	push	{r4, lr}
 80030fc:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80030fe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
{
 8003102:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003104:	4623      	mov	r3, r4
 8003106:	f7fd faad 	bl	8000664 <HAL_PCD_EP_Open>
}
 800310a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800310e:	f7ff bf4b 	b.w	8002fa8 <USBD_Get_USB_Status>

08003112 <USBD_LL_CloseEP>:
{
 8003112:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003114:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003118:	f7fd fac7 	bl	80006aa <HAL_PCD_EP_Close>
}
 800311c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003120:	f7ff bf42 	b.w	8002fa8 <USBD_Get_USB_Status>

08003124 <USBD_LL_FlushEP>:
{
 8003124:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8003126:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800312a:	f7fd fdcc 	bl	8000cc6 <HAL_PCD_EP_Flush>
}
 800312e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003132:	f7ff bf39 	b.w	8002fa8 <USBD_Get_USB_Status>

08003136 <USBD_LL_StallEP>:
{
 8003136:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003138:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800313c:	f7fd fd78 	bl	8000c30 <HAL_PCD_EP_SetStall>
}
 8003140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003144:	f7ff bf30 	b.w	8002fa8 <USBD_Get_USB_Status>

08003148 <USBD_LL_ClearStallEP>:
{
 8003148:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800314a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800314e:	f7fd fd97 	bl	8000c80 <HAL_PCD_EP_ClrStall>
}
 8003152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003156:	f7ff bf27 	b.w	8002fa8 <USBD_Get_USB_Status>

0800315a <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800315a:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800315c:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003160:	bf45      	ittet	mi
 8003162:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003166:	eb03 1141 	addmi.w	r1, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800316a:	eb03 1141 	addpl.w	r1, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800316e:	f891 002a 	ldrbmi.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003172:	bf58      	it	pl
 8003174:	f891 022a 	ldrbpl.w	r0, [r1, #554]	; 0x22a
}
 8003178:	4770      	bx	lr

0800317a <USBD_LL_SetUSBAddress>:
{
 800317a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800317c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003180:	f7fd fa5c 	bl	800063c <HAL_PCD_SetAddress>
}
 8003184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003188:	f7ff bf0e 	b.w	8002fa8 <USBD_Get_USB_Status>

0800318c <USBD_LL_Transmit>:
{
 800318c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800318e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003192:	f7fd fac7 	bl	8000724 <HAL_PCD_EP_Transmit>
}
 8003196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800319a:	f7ff bf05 	b.w	8002fa8 <USBD_Get_USB_Status>

0800319e <USBD_LL_PrepareReceive>:
{
 800319e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80031a0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80031a4:	f7fd faa2 	bl	80006ec <HAL_PCD_EP_Receive>
}
 80031a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80031ac:	f7ff befc 	b.w	8002fa8 <USBD_Get_USB_Status>

080031b0 <USBD_LL_GetRxDataSize>:
{
 80031b0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80031b2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80031b6:	f7fd faae 	bl	8000716 <HAL_PCD_EP_GetRxCount>
}
 80031ba:	bd08      	pop	{r3, pc}

080031bc <USBD_static_malloc>:
}
 80031bc:	4800      	ldr	r0, [pc, #0]	; (80031c0 <USBD_static_malloc+0x4>)
 80031be:	4770      	bx	lr
 80031c0:	20001938 	.word	0x20001938

080031c4 <USBD_static_free>:
}
 80031c4:	4770      	bx	lr

080031c6 <HAL_PCDEx_SetConnectionState>:
}
 80031c6:	4770      	bx	lr

080031c8 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80031c8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80031ca:	4801      	ldr	r0, [pc, #4]	; (80031d0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80031cc:	800b      	strh	r3, [r1, #0]
}
 80031ce:	4770      	bx	lr
 80031d0:	200000cc 	.word	0x200000cc

080031d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80031d4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80031d6:	4801      	ldr	r0, [pc, #4]	; (80031dc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80031d8:	800b      	strh	r3, [r1, #0]
}
 80031da:	4770      	bx	lr
 80031dc:	200000e0 	.word	0x200000e0

080031e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80031e0:	2300      	movs	r3, #0
 80031e2:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80031e4:	461e      	mov	r6, r3
 80031e6:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 80031e8:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 80031ea:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80031ee:	bf34      	ite	cc
 80031f0:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80031f2:	3437      	addcs	r4, #55	; 0x37
 80031f4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80031f8:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80031fc:	3301      	adds	r3, #1
 80031fe:	b2dc      	uxtb	r4, r3
 8003200:	42a2      	cmp	r2, r4
    value = value << 4;
 8003202:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8003206:	d8ef      	bhi.n	80031e8 <IntToUnicode+0x8>
  }
}
 8003208:	bd70      	pop	{r4, r5, r6, pc}
	...

0800320c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800320c:	231a      	movs	r3, #26
{
 800320e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003210:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <USBD_FS_SerialStrDescriptor+0x30>)
 8003214:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8003218:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 800321c:	1880      	adds	r0, r0, r2
 800321e:	d00a      	beq.n	8003236 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003220:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003224:	4906      	ldr	r1, [pc, #24]	; (8003240 <USBD_FS_SerialStrDescriptor+0x34>)
 8003226:	2208      	movs	r2, #8
 8003228:	f7ff ffda 	bl	80031e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800322c:	2204      	movs	r2, #4
 800322e:	4620      	mov	r0, r4
 8003230:	3110      	adds	r1, #16
 8003232:	f7ff ffd5 	bl	80031e0 <IntToUnicode>
}
 8003236:	4803      	ldr	r0, [pc, #12]	; (8003244 <USBD_FS_SerialStrDescriptor+0x38>)
 8003238:	bd10      	pop	{r4, pc}
 800323a:	bf00      	nop
 800323c:	1ffff000 	.word	0x1ffff000
 8003240:	200000e6 	.word	0x200000e6
 8003244:	200000e4 	.word	0x200000e4

08003248 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003248:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800324a:	4c04      	ldr	r4, [pc, #16]	; (800325c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800324c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800324e:	4804      	ldr	r0, [pc, #16]	; (8003260 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003250:	4621      	mov	r1, r4
 8003252:	f7ff fb75 	bl	8002940 <USBD_GetString>
}
 8003256:	4620      	mov	r0, r4
 8003258:	bd10      	pop	{r4, pc}
 800325a:	bf00      	nop
 800325c:	20001da8 	.word	0x20001da8
 8003260:	08003ed6 	.word	0x08003ed6

08003264 <USBD_FS_ProductStrDescriptor>:
{
 8003264:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003266:	4c04      	ldr	r4, [pc, #16]	; (8003278 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003268:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800326a:	4804      	ldr	r0, [pc, #16]	; (800327c <USBD_FS_ProductStrDescriptor+0x18>)
 800326c:	4621      	mov	r1, r4
 800326e:	f7ff fb67 	bl	8002940 <USBD_GetString>
}
 8003272:	4620      	mov	r0, r4
 8003274:	bd10      	pop	{r4, pc}
 8003276:	bf00      	nop
 8003278:	20001da8 	.word	0x20001da8
 800327c:	08003edb 	.word	0x08003edb

08003280 <USBD_FS_ConfigStrDescriptor>:
{
 8003280:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003282:	4c04      	ldr	r4, [pc, #16]	; (8003294 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8003284:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003286:	4804      	ldr	r0, [pc, #16]	; (8003298 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003288:	4621      	mov	r1, r4
 800328a:	f7ff fb59 	bl	8002940 <USBD_GetString>
}
 800328e:	4620      	mov	r0, r4
 8003290:	bd10      	pop	{r4, pc}
 8003292:	bf00      	nop
 8003294:	20001da8 	.word	0x20001da8
 8003298:	08003ee0 	.word	0x08003ee0

0800329c <USBD_FS_InterfaceStrDescriptor>:
{
 800329c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800329e:	4c04      	ldr	r4, [pc, #16]	; (80032b0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80032a0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80032a2:	4804      	ldr	r0, [pc, #16]	; (80032b4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80032a4:	4621      	mov	r1, r4
 80032a6:	f7ff fb4b 	bl	8002940 <USBD_GetString>
}
 80032aa:	4620      	mov	r0, r4
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	bf00      	nop
 80032b0:	20001da8 	.word	0x20001da8
 80032b4:	08003eeb 	.word	0x08003eeb

080032b8 <STORAGE_Init_FS>:
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
  /* USER CODE BEGIN 2 */
	if (lun == 0) {
		return (USBD_OK);
 80032b8:	2800      	cmp	r0, #0
	}
	return USBD_FAIL;
  /* USER CODE END 2 */
}
 80032ba:	bf14      	ite	ne
 80032bc:	2002      	movne	r0, #2
 80032be:	2000      	moveq	r0, #0
 80032c0:	4770      	bx	lr

080032c2 <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80032c2:	236f      	movs	r3, #111	; 0x6f
 80032c4:	600b      	str	r3, [r1, #0]
  *block_size = STORAGE_BLK_SIZ;
 80032c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  return (USBD_OK);
  /* USER CODE END 3 */
}
 80032ca:	2000      	movs	r0, #0
  *block_size = STORAGE_BLK_SIZ;
 80032cc:	8013      	strh	r3, [r2, #0]
}
 80032ce:	4770      	bx	lr

080032d0 <STORAGE_IsReady_FS>:
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80032d0:	2000      	movs	r0, #0
 80032d2:	4770      	bx	lr

080032d4 <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 80032d4:	2000      	movs	r0, #0
 80032d6:	4770      	bx	lr

080032d8 <STORAGE_Write_FS>:
{
 80032d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032da:	460e      	mov	r6, r1
 80032dc:	4615      	mov	r5, r2
 80032de:	461f      	mov	r7, r3
	if(lun == 0) {
 80032e0:	4604      	mov	r4, r0
{
 80032e2:	b087      	sub	sp, #28
	if(lun == 0) {
 80032e4:	b9f0      	cbnz	r0, 8003324 <STORAGE_Write_FS+0x4c>
		HAL_FLASH_Unlock();
 80032e6:	f7fd f82f 	bl	8000348 <HAL_FLASH_Unlock>
		f.PageAddress = FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE ;
 80032ea:	f505 3200 	add.w	r2, r5, #131072	; 0x20000
 80032ee:	3211      	adds	r2, #17
 80032f0:	0295      	lsls	r5, r2, #10
		HAL_FLASHEx_Erase(&f, &PageError);
 80032f2:	a901      	add	r1, sp, #4
 80032f4:	a802      	add	r0, sp, #8
		f.NbPages = blk_len;
 80032f6:	e9cd 5704 	strd	r5, r7, [sp, #16]
		f.TypeErase = FLASH_TYPEERASE_PAGES;
 80032fa:	9402      	str	r4, [sp, #8]
		uint32_t PageError = 0;
 80032fc:	9401      	str	r4, [sp, #4]
		HAL_FLASHEx_Erase(&f, &PageError);
 80032fe:	f7fd f8cb 	bl	8000498 <HAL_FLASHEx_Erase>
		for(uint16_t i=0;i<blk_len*FLASH_PAGE_SIZE;i+=4) {
 8003302:	02bf      	lsls	r7, r7, #10
 8003304:	42bc      	cmp	r4, r7
 8003306:	d304      	bcc.n	8003312 <STORAGE_Write_FS+0x3a>
		HAL_FLASH_Lock();
 8003308:	f7fd f830 	bl	800036c <HAL_FLASH_Lock>
		return USBD_OK;
 800330c:	2000      	movs	r0, #0
}
 800330e:	b007      	add	sp, #28
 8003310:	bdf0      	pop	{r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i, *(volatile uint32_t *)(&buf[i]));
 8003312:	5932      	ldr	r2, [r6, r4]
 8003314:	1929      	adds	r1, r5, r4
 8003316:	2300      	movs	r3, #0
 8003318:	2002      	movs	r0, #2
		for(uint16_t i=0;i<blk_len*FLASH_PAGE_SIZE;i+=4) {
 800331a:	3404      	adds	r4, #4
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE + i, *(volatile uint32_t *)(&buf[i]));
 800331c:	f7fd f85a 	bl	80003d4 <HAL_FLASH_Program>
		for(uint16_t i=0;i<blk_len*FLASH_PAGE_SIZE;i+=4) {
 8003320:	b2a4      	uxth	r4, r4
 8003322:	e7ef      	b.n	8003304 <STORAGE_Write_FS+0x2c>
	return USBD_FAIL;
 8003324:	2002      	movs	r0, #2
 8003326:	e7f2      	b.n	800330e <STORAGE_Write_FS+0x36>

08003328 <STORAGE_Read_FS>:
{
 8003328:	b510      	push	{r4, lr}
 800332a:	4604      	mov	r4, r0
 800332c:	4608      	mov	r0, r1
	if(lun == 0) {
 800332e:	b944      	cbnz	r4, 8003342 <STORAGE_Read_FS+0x1a>
		memcpy(buf, (uint8_t *)(FLASH_MSD_START_ADDR + blk_addr*FLASH_PAGE_SIZE), blk_len*FLASH_PAGE_SIZE);
 8003330:	f502 3100 	add.w	r1, r2, #131072	; 0x20000
 8003334:	3111      	adds	r1, #17
 8003336:	029a      	lsls	r2, r3, #10
 8003338:	0289      	lsls	r1, r1, #10
 800333a:	f000 fd77 	bl	8003e2c <memcpy>
 800333e:	4620      	mov	r0, r4
}
 8003340:	bd10      	pop	{r4, pc}
	return USBD_FAIL;
 8003342:	2002      	movs	r0, #2
 8003344:	e7fc      	b.n	8003340 <STORAGE_Read_FS+0x18>

08003346 <STORAGE_IsWriteProtected_FS>:
 8003346:	2000      	movs	r0, #0
 8003348:	4770      	bx	lr

0800334a <disk_status>:
 800334a:	2000      	movs	r0, #0
 800334c:	4770      	bx	lr

0800334e <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	return RES_OK;
}
 800334e:	2000      	movs	r0, #0
 8003350:	4770      	bx	lr

08003352 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003352:	b508      	push	{r3, lr}
 8003354:	4608      	mov	r0, r1
	memcpy(buff,(const void *)(FLASH_MSD_START_ADDR + sector*FLASH_PAGE_SIZE),count*FLASH_PAGE_SIZE);
 8003356:	f502 3100 	add.w	r1, r2, #131072	; 0x20000
 800335a:	3111      	adds	r1, #17
 800335c:	029a      	lsls	r2, r3, #10
 800335e:	0289      	lsls	r1, r1, #10
 8003360:	f000 fd64 	bl	8003e2c <memcpy>
	return RES_OK;
}
 8003364:	2000      	movs	r0, #0
 8003366:	bd08      	pop	{r3, pc}

08003368 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8003368:	6800      	ldr	r0, [r0, #0]
 800336a:	4770      	bx	lr

0800336c <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 800336c:	4603      	mov	r3, r0
 800336e:	b510      	push	{r4, lr}
 8003370:	4402      	add	r2, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8003372:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003376:	f811 4b01 	ldrb.w	r4, [r1], #1
	} while (--cnt && r == 0);
 800337a:	4293      	cmp	r3, r2
		r = *d++ - *s++;
 800337c:	eba0 0004 	sub.w	r0, r0, r4
	} while (--cnt && r == 0);
 8003380:	d001      	beq.n	8003386 <mem_cmp+0x1a>
 8003382:	2800      	cmp	r0, #0
 8003384:	d0f5      	beq.n	8003372 <mem_cmp+0x6>

	return r;
}
 8003386:	bd10      	pop	{r4, pc}

08003388 <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8003388:	68c3      	ldr	r3, [r0, #12]
	clst -= 2;		/* Cluster number is origin from 2 */
 800338a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800338c:	3b02      	subs	r3, #2
 800338e:	428b      	cmp	r3, r1
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8003390:	bf83      	ittte	hi
 8003392:	8943      	ldrhhi	r3, [r0, #10]
 8003394:	6a00      	ldrhi	r0, [r0, #32]
 8003396:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800339a:	2000      	movls	r0, #0
}
 800339c:	4770      	bx	lr

0800339e <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800339e:	6802      	ldr	r2, [r0, #0]
 80033a0:	0a89      	lsrs	r1, r1, #10
 80033a2:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80033a4:	6a03      	ldr	r3, [r0, #32]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80033a6:	fbb1 f1f2 	udiv	r1, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80033aa:	3304      	adds	r3, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80033ac:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80033ae:	b130      	cbz	r0, 80033be <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80033b0:	4281      	cmp	r1, r0
 80033b2:	d302      	bcc.n	80033ba <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 80033b4:	1a09      	subs	r1, r1, r0
 80033b6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80033b8:	e7f8      	b.n	80033ac <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 80033ba:	6858      	ldr	r0, [r3, #4]
 80033bc:	4408      	add	r0, r1
}
 80033be:	4770      	bx	lr

080033c0 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80033c0:	6802      	ldr	r2, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
 80033c2:	b14a      	cbz	r2, 80033d8 <get_ldnumber+0x18>
 80033c4:	4613      	mov	r3, r2
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 80033c6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80033ca:	2920      	cmp	r1, #32
 80033cc:	d90b      	bls.n	80033e6 <get_ldnumber+0x26>
 80033ce:	293a      	cmp	r1, #58	; 0x3a
 80033d0:	d1f9      	bne.n	80033c6 <get_ldnumber+0x6>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80033d2:	1c91      	adds	r1, r2, #2
 80033d4:	428b      	cmp	r3, r1
 80033d6:	d002      	beq.n	80033de <get_ldnumber+0x1e>
	if (!tp) return vol;	/* Invalid path name? */
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
 80033dc:	4770      	bx	lr
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	2a30      	cmp	r2, #48	; 0x30
 80033e2:	d1f9      	bne.n	80033d8 <get_ldnumber+0x18>
			*path = tt;		/* Snip the drive prefix off */
 80033e4:	6003      	str	r3, [r0, #0]
	return vol;		/* Return the default drive */
 80033e6:	2000      	movs	r0, #0
 80033e8:	4770      	bx	lr

080033ea <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80033ea:	b538      	push	{r3, r4, r5, lr}
 80033ec:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80033ee:	4604      	mov	r4, r0
 80033f0:	b918      	cbnz	r0, 80033fa <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80033f2:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80033f4:	2300      	movs	r3, #0
 80033f6:	602b      	str	r3, [r5, #0]
	return res;
}
 80033f8:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80033fa:	6803      	ldr	r3, [r0, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f8      	beq.n	80033f2 <validate+0x8>
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	2a00      	cmp	r2, #0
 8003404:	d0f5      	beq.n	80033f2 <validate+0x8>
 8003406:	8881      	ldrh	r1, [r0, #4]
 8003408:	88da      	ldrh	r2, [r3, #6]
 800340a:	4291      	cmp	r1, r2
 800340c:	d1f1      	bne.n	80033f2 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800340e:	7858      	ldrb	r0, [r3, #1]
 8003410:	f7ff ff9b 	bl	800334a <disk_status>
 8003414:	f010 0001 	ands.w	r0, r0, #1
 8003418:	d1eb      	bne.n	80033f2 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	e7eb      	b.n	80033f6 <validate+0xc>

0800341e <move_window>:
{
 800341e:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003420:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003422:	4605      	mov	r5, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003424:	428b      	cmp	r3, r1
{
 8003426:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003428:	d011      	beq.n	800344e <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800342a:	2301      	movs	r3, #1
 800342c:	460a      	mov	r2, r1
 800342e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8003432:	7840      	ldrb	r0, [r0, #1]
 8003434:	f7ff ff8d 	bl	8003352 <disk_read>
				res = FR_DISK_ERR;
 8003438:	2800      	cmp	r0, #0
 800343a:	bf18      	it	ne
 800343c:	f04f 34ff 	movne.w	r4, #4294967295
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8003440:	4603      	mov	r3, r0
				res = FR_DISK_ERR;
 8003442:	bf0c      	ite	eq
 8003444:	4603      	moveq	r3, r0
 8003446:	2301      	movne	r3, #1
			fs->winsect = sector;
 8003448:	626c      	str	r4, [r5, #36]	; 0x24
}
 800344a:	4618      	mov	r0, r3
 800344c:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e7fb      	b.n	800344a <move_window+0x2c>
	...

08003454 <check_fs>:
{
 8003454:	b538      	push	{r3, r4, r5, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003456:	2300      	movs	r3, #0
 8003458:	70c3      	strb	r3, [r0, #3]
 800345a:	f04f 33ff 	mov.w	r3, #4294967295
 800345e:	6243      	str	r3, [r0, #36]	; 0x24
{
 8003460:	4605      	mov	r5, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003462:	f7ff ffdc 	bl	800341e <move_window>
 8003466:	4604      	mov	r4, r0
 8003468:	b9f8      	cbnz	r0, 80034aa <check_fs+0x56>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 800346a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800346e:	f8b5 2226 	ldrh.w	r2, [r5, #550]	; 0x226
 8003472:	429a      	cmp	r2, r3
 8003474:	d11b      	bne.n	80034ae <check_fs+0x5a>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8003476:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800347a:	2beb      	cmp	r3, #235	; 0xeb
 800347c:	d003      	beq.n	8003486 <check_fs+0x32>
 800347e:	3318      	adds	r3, #24
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d815      	bhi.n	80034b2 <check_fs+0x5e>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8003486:	2203      	movs	r2, #3
 8003488:	490b      	ldr	r1, [pc, #44]	; (80034b8 <check_fs+0x64>)
 800348a:	f105 005e 	add.w	r0, r5, #94	; 0x5e
 800348e:	f7ff ff6d 	bl	800336c <mem_cmp>
 8003492:	b140      	cbz	r0, 80034a6 <check_fs+0x52>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8003494:	2205      	movs	r2, #5
 8003496:	4909      	ldr	r1, [pc, #36]	; (80034bc <check_fs+0x68>)
 8003498:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 800349c:	f7ff ff66 	bl	800336c <mem_cmp>
	return 2;	/* Valid BS but not FAT */
 80034a0:	2800      	cmp	r0, #0
 80034a2:	bf18      	it	ne
 80034a4:	2402      	movne	r4, #2
}
 80034a6:	4620      	mov	r0, r4
 80034a8:	bd38      	pop	{r3, r4, r5, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80034aa:	2404      	movs	r4, #4
 80034ac:	e7fb      	b.n	80034a6 <check_fs+0x52>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80034ae:	2403      	movs	r4, #3
 80034b0:	e7f9      	b.n	80034a6 <check_fs+0x52>
	return 2;	/* Valid BS but not FAT */
 80034b2:	2402      	movs	r4, #2
 80034b4:	e7f7      	b.n	80034a6 <check_fs+0x52>
 80034b6:	bf00      	nop
 80034b8:	08003f1d 	.word	0x08003f1d
 80034bc:	08003f21 	.word	0x08003f21

080034c0 <find_volume.constprop.0>:
	*rfs = 0;
 80034c0:	2300      	movs	r3, #0
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 80034c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 80034c6:	600b      	str	r3, [r1, #0]
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
 80034c8:	b085      	sub	sp, #20
 80034ca:	460d      	mov	r5, r1
	vol = get_ldnumber(path);
 80034cc:	f7ff ff78 	bl	80033c0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80034d0:	1e06      	subs	r6, r0, #0
 80034d2:	f2c0 80cc 	blt.w	800366e <find_volume.constprop.0+0x1ae>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80034d6:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <find_volume.constprop.0+0x1c8>)
 80034d8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80034dc:	2c00      	cmp	r4, #0
 80034de:	f000 80c8 	beq.w	8003672 <find_volume.constprop.0+0x1b2>
	*rfs = fs;							/* Return pointer to the filesystem object */
 80034e2:	602c      	str	r4, [r5, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80034e4:	7823      	ldrb	r3, [r4, #0]
 80034e6:	b953      	cbnz	r3, 80034fe <find_volume.constprop.0+0x3e>
	fs->fs_type = 0;					/* Clear the filesystem object */
 80034e8:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80034ea:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the filesystem object */
 80034ec:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80034ee:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 80034f0:	f7ff ff2d 	bl	800334e <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80034f4:	f010 0501 	ands.w	r5, r0, #1
 80034f8:	d00b      	beq.n	8003512 <find_volume.constprop.0+0x52>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80034fa:	2503      	movs	r5, #3
 80034fc:	e005      	b.n	800350a <find_volume.constprop.0+0x4a>
		stat = disk_status(fs->pdrv);
 80034fe:	7860      	ldrb	r0, [r4, #1]
 8003500:	f7ff ff23 	bl	800334a <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003504:	f010 0501 	ands.w	r5, r0, #1
 8003508:	d1ee      	bne.n	80034e8 <find_volume.constprop.0+0x28>
}
 800350a:	4628      	mov	r0, r5
 800350c:	b005      	add	sp, #20
 800350e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003512:	4629      	mov	r1, r5
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff ff9d 	bl	8003454 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800351a:	2802      	cmp	r0, #2
 800351c:	f040 808d 	bne.w	800363a <find_volume.constprop.0+0x17a>
 8003520:	466e      	mov	r6, sp
 8003522:	4632      	mov	r2, r6
 8003524:	f504 73f7 	add.w	r3, r4, #494	; 0x1ee
 8003528:	f204 212e 	addw	r1, r4, #558	; 0x22e
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800352c:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8003530:	b110      	cbz	r0, 8003538 <find_volume.constprop.0+0x78>
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ff18 	bl	8003368 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003538:	3310      	adds	r3, #16
 800353a:	428b      	cmp	r3, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800353c:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003540:	d1f4      	bne.n	800352c <find_volume.constprop.0+0x6c>
 8003542:	2700      	movs	r7, #0
			bsect = br[i];
 8003544:	f856 9b04 	ldr.w	r9, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003548:	f1b9 0f00 	cmp.w	r9, #0
 800354c:	d06d      	beq.n	800362a <find_volume.constprop.0+0x16a>
 800354e:	4649      	mov	r1, r9
 8003550:	4620      	mov	r0, r4
 8003552:	f7ff ff7f 	bl	8003454 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003556:	2801      	cmp	r0, #1
 8003558:	d868      	bhi.n	800362c <find_volume.constprop.0+0x16c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800355a:	f8b4 3033 	ldrh.w	r3, [r4, #51]	; 0x33
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	d16e      	bne.n	8003642 <find_volume.constprop.0+0x182>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003564:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003566:	b926      	cbnz	r6, 8003572 <find_volume.constprop.0+0xb2>
 8003568:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800356c:	f7ff fefc 	bl	8003368 <ld_dword>
 8003570:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003572:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		fs->fsize = fasize;
 8003576:	6126      	str	r6, [r4, #16]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003578:	1e5a      	subs	r2, r3, #1
 800357a:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800357c:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800357e:	d860      	bhi.n	8003642 <find_volume.constprop.0+0x182>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003580:	f894 8035 	ldrb.w	r8, [r4, #53]	; 0x35
 8003584:	4642      	mov	r2, r8
 8003586:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800358a:	2a00      	cmp	r2, #0
 800358c:	d059      	beq.n	8003642 <find_volume.constprop.0+0x182>
 800358e:	f108 32ff 	add.w	r2, r8, #4294967295
 8003592:	ea12 0f08 	tst.w	r2, r8
 8003596:	d154      	bne.n	8003642 <find_volume.constprop.0+0x182>
	rv = ptr[1];
 8003598:	f8b4 1039 	ldrh.w	r1, [r4, #57]	; 0x39
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800359c:	06ca      	lsls	r2, r1, #27
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800359e:	8121      	strh	r1, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80035a0:	d14f      	bne.n	8003642 <find_volume.constprop.0+0x182>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80035a2:	f8b4 003b 	ldrh.w	r0, [r4, #59]	; 0x3b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80035a6:	b918      	cbnz	r0, 80035b0 <find_volume.constprop.0+0xf0>
 80035a8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80035ac:	f7ff fedc 	bl	8003368 <ld_dword>
	rv = ptr[1];
 80035b0:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80035b2:	2f00      	cmp	r7, #0
 80035b4:	d045      	beq.n	8003642 <find_volume.constprop.0+0x182>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80035b6:	fb06 fe03 	mul.w	lr, r6, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80035ba:	eb07 1c51 	add.w	ip, r7, r1, lsr #5
 80035be:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80035c0:	4584      	cmp	ip, r0
 80035c2:	d83e      	bhi.n	8003642 <find_volume.constprop.0+0x182>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80035c4:	eba0 020c 	sub.w	r2, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80035c8:	4542      	cmp	r2, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80035ca:	fbb2 f3f8 	udiv	r3, r2, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80035ce:	d338      	bcc.n	8003642 <find_volume.constprop.0+0x182>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80035d0:	4a2e      	ldr	r2, [pc, #184]	; (800368c <find_volume.constprop.0+0x1cc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d835      	bhi.n	8003642 <find_volume.constprop.0+0x182>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80035d6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80035da:	4293      	cmp	r3, r2
 80035dc:	d94b      	bls.n	8003676 <find_volume.constprop.0+0x1b6>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80035de:	f04f 0803 	mov.w	r8, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80035e2:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80035e4:	444f      	add	r7, r9
		fs->database = bsect + sysect;					/* Data start sector */
 80035e6:	eb0c 0209 	add.w	r2, ip, r9
		if (fmt == FS_FAT32) {
 80035ea:	f1b8 0f03 	cmp.w	r8, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80035ee:	60e3      	str	r3, [r4, #12]
		fs->volbase = bsect;							/* Volume start sector */
 80035f0:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80035f4:	61a7      	str	r7, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 80035f6:	6222      	str	r2, [r4, #32]
		if (fmt == FS_FAT32) {
 80035f8:	d127      	bne.n	800364a <find_volume.constprop.0+0x18a>
	rv = rv << 8 | ptr[0];
 80035fa:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80035fe:	430a      	orrs	r2, r1
 8003600:	d11f      	bne.n	8003642 <find_volume.constprop.0+0x182>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003602:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8003606:	f7ff feaf 	bl	8003368 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800360a:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800360c:	61e0      	str	r0, [r4, #28]
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800360e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003612:	ebb6 2f93 	cmp.w	r6, r3, lsr #10
 8003616:	d314      	bcc.n	8003642 <find_volume.constprop.0+0x182>
	fs->id = ++Fsid;		/* Volume mount ID */
 8003618:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <find_volume.constprop.0+0x1d0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800361a:	f884 8000 	strb.w	r8, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
 800361e:	8813      	ldrh	r3, [r2, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	b29b      	uxth	r3, r3
 8003624:	8013      	strh	r3, [r2, #0]
 8003626:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8003628:	e76f      	b.n	800350a <find_volume.constprop.0+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800362a:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800362c:	3701      	adds	r7, #1
 800362e:	2f04      	cmp	r7, #4
 8003630:	d188      	bne.n	8003544 <find_volume.constprop.0+0x84>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003632:	2804      	cmp	r0, #4
 8003634:	d105      	bne.n	8003642 <find_volume.constprop.0+0x182>
 8003636:	2501      	movs	r5, #1
 8003638:	e767      	b.n	800350a <find_volume.constprop.0+0x4a>
 800363a:	2804      	cmp	r0, #4
 800363c:	d0fb      	beq.n	8003636 <find_volume.constprop.0+0x176>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800363e:	2801      	cmp	r0, #1
 8003640:	d901      	bls.n	8003646 <find_volume.constprop.0+0x186>
 8003642:	250d      	movs	r5, #13
 8003644:	e761      	b.n	800350a <find_volume.constprop.0+0x4a>
	bsect = 0;
 8003646:	46a9      	mov	r9, r5
 8003648:	e787      	b.n	800355a <find_volume.constprop.0+0x9a>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800364a:	2900      	cmp	r1, #0
 800364c:	d0f9      	beq.n	8003642 <find_volume.constprop.0+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800364e:	f1b8 0f02 	cmp.w	r8, #2
 8003652:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8003656:	bf18      	it	ne
 8003658:	18d2      	addne	r2, r2, r3
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800365a:	4477      	add	r7, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800365c:	bf14      	ite	ne
 800365e:	f003 0301 	andne.w	r3, r3, #1
 8003662:	4613      	moveq	r3, r2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003664:	61e7      	str	r7, [r4, #28]
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003666:	bf18      	it	ne
 8003668:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800366c:	e7cf      	b.n	800360e <find_volume.constprop.0+0x14e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800366e:	250b      	movs	r5, #11
 8003670:	e74b      	b.n	800350a <find_volume.constprop.0+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8003672:	250c      	movs	r5, #12
 8003674:	e749      	b.n	800350a <find_volume.constprop.0+0x4a>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003676:	f640 78f5 	movw	r8, #4085	; 0xff5
 800367a:	4543      	cmp	r3, r8
 800367c:	bf8c      	ite	hi
 800367e:	f04f 0802 	movhi.w	r8, #2
 8003682:	f04f 0801 	movls.w	r8, #1
 8003686:	e7ac      	b.n	80035e2 <find_volume.constprop.0+0x122>
 8003688:	20001fa8 	.word	0x20001fa8
 800368c:	0ffffff5 	.word	0x0ffffff5
 8003690:	20001fac 	.word	0x20001fac

08003694 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8003694:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8003696:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003698:	bf04      	itt	eq
 800369a:	8a8a      	ldrheq	r2, [r1, #20]
 800369c:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	4770      	bx	lr

080036a4 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80036a4:	2901      	cmp	r1, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80036a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a8:	4606      	mov	r6, r0
 80036aa:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80036ac:	d94f      	bls.n	800374e <get_fat.isra.0+0xaa>
 80036ae:	68c3      	ldr	r3, [r0, #12]
 80036b0:	4299      	cmp	r1, r3
 80036b2:	d24c      	bcs.n	800374e <get_fat.isra.0+0xaa>
		switch (fs->fs_type) {
 80036b4:	7803      	ldrb	r3, [r0, #0]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d029      	beq.n	800370e <get_fat.isra.0+0x6a>
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d035      	beq.n	800372a <get_fat.isra.0+0x86>
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d145      	bne.n	800374e <get_fat.isra.0+0xaa>
			bc = (UINT)clst; bc += bc / 2;
 80036c2:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036c6:	6981      	ldr	r1, [r0, #24]
 80036c8:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 80036cc:	f7ff fea7 	bl	800341e <move_window>
 80036d0:	b110      	cbz	r0, 80036d8 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80036d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036d8:	69b1      	ldr	r1, [r6, #24]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80036da:	1c67      	adds	r7, r4, #1
 80036dc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80036e0:	4434      	add	r4, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036e2:	4630      	mov	r0, r6
 80036e4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80036e8:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036ec:	f7ff fe97 	bl	800341e <move_window>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d1ee      	bne.n	80036d2 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80036f4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80036f8:	443e      	add	r6, r7
 80036fa:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80036fe:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8003700:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8003704:	bf4c      	ite	mi
 8003706:	0900      	lsrmi	r0, r0, #4
 8003708:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800370c:	e7e3      	b.n	80036d6 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800370e:	6981      	ldr	r1, [r0, #24]
 8003710:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8003714:	f7ff fe83 	bl	800341e <move_window>
 8003718:	2800      	cmp	r0, #0
 800371a:	d1da      	bne.n	80036d2 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800371c:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8003720:	ea01 0545 	and.w	r5, r1, r5, lsl #1
 8003724:	442e      	add	r6, r5
 8003726:	8d30      	ldrh	r0, [r6, #40]	; 0x28
			break;
 8003728:	e7d5      	b.n	80036d6 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800372a:	6981      	ldr	r1, [r0, #24]
 800372c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8003730:	f7ff fe75 	bl	800341e <move_window>
 8003734:	2800      	cmp	r0, #0
 8003736:	d1cc      	bne.n	80036d2 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8003738:	00ad      	lsls	r5, r5, #2
 800373a:	f106 0028 	add.w	r0, r6, #40	; 0x28
 800373e:	f405 757f 	and.w	r5, r5, #1020	; 0x3fc
 8003742:	4428      	add	r0, r5
 8003744:	f7ff fe10 	bl	8003368 <ld_dword>
 8003748:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800374c:	e7c3      	b.n	80036d6 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 800374e:	2001      	movs	r0, #1
	return val;
 8003750:	e7c1      	b.n	80036d6 <get_fat.isra.0+0x32>

08003752 <dir_sdi.constprop.0>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003752:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8003754:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003756:	6882      	ldr	r2, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003758:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800375a:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800375c:	6103      	str	r3, [r0, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800375e:	b99a      	cbnz	r2, 8003788 <dir_sdi.constprop.0+0x36>
 8003760:	782b      	ldrb	r3, [r5, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 8003766:	69eb      	ldr	r3, [r5, #28]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8003768:	b96b      	cbnz	r3, 8003786 <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800376a:	892b      	ldrh	r3, [r5, #8]
 800376c:	b90b      	cbnz	r3, 8003772 <dir_sdi.constprop.0+0x20>
 800376e:	2002      	movs	r0, #2
}
 8003770:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8003772:	69eb      	ldr	r3, [r5, #28]
 8003774:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 8003776:	69a3      	ldr	r3, [r4, #24]
	dp->clust = clst;					/* Current cluster# */
 8003778:	6162      	str	r2, [r4, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f7      	beq.n	800376e <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800377e:	3528      	adds	r5, #40	; 0x28
	return FR_OK;
 8003780:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003782:	61e5      	str	r5, [r4, #28]
	return FR_OK;
 8003784:	e7f4      	b.n	8003770 <dir_sdi.constprop.0+0x1e>
 8003786:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003788:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800378a:	b963      	cbnz	r3, 80037a6 <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800378c:	4611      	mov	r1, r2
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	f7ff ff88 	bl	80036a4 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003794:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003796:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003798:	d00b      	beq.n	80037b2 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800379a:	2801      	cmp	r0, #1
 800379c:	d9e7      	bls.n	800376e <dir_sdi.constprop.0+0x1c>
 800379e:	68eb      	ldr	r3, [r5, #12]
 80037a0:	4298      	cmp	r0, r3
 80037a2:	d3f3      	bcc.n	800378c <dir_sdi.constprop.0+0x3a>
 80037a4:	e7e3      	b.n	800376e <dir_sdi.constprop.0+0x1c>
		dp->sect = clst2sect(fs, clst);
 80037a6:	4611      	mov	r1, r2
 80037a8:	4628      	mov	r0, r5
 80037aa:	f7ff fded 	bl	8003388 <clst2sect>
 80037ae:	61a0      	str	r0, [r4, #24]
 80037b0:	e7e1      	b.n	8003776 <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80037b2:	2001      	movs	r0, #1
 80037b4:	e7dc      	b.n	8003770 <dir_sdi.constprop.0+0x1e>

080037b6 <dir_next.constprop.0>:
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 80037b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80037b8:	6906      	ldr	r6, [r0, #16]
static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 80037ba:	4604      	mov	r4, r0
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80037bc:	3620      	adds	r6, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80037be:	f5b6 1f00 	cmp.w	r6, #2097152	; 0x200000
 80037c2:	bf24      	itt	cs
 80037c4:	2300      	movcs	r3, #0
 80037c6:	6183      	strcs	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80037c8:	6983      	ldr	r3, [r0, #24]
	FATFS *fs = dp->obj.fs;
 80037ca:	6805      	ldr	r5, [r0, #0]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80037cc:	b163      	cbz	r3, 80037e8 <dir_next.constprop.0+0x32>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80037ce:	f3c6 0709 	ubfx	r7, r6, #0, #10
 80037d2:	bb07      	cbnz	r7, 8003816 <dir_next.constprop.0+0x60>
		if (dp->clust == 0) {	/* Static table */
 80037d4:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
 80037d6:	3301      	adds	r3, #1
 80037d8:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
 80037da:	b939      	cbnz	r1, 80037ec <dir_next.constprop.0+0x36>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80037dc:	892b      	ldrh	r3, [r5, #8]
 80037de:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 80037e2:	d818      	bhi.n	8003816 <dir_next.constprop.0+0x60>
				dp->sect = 0; return FR_NO_FILE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80037e8:	2004      	movs	r0, #4
 80037ea:	e019      	b.n	8003820 <dir_next.constprop.0+0x6a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80037ec:	896b      	ldrh	r3, [r5, #10]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	ea13 2396 	ands.w	r3, r3, r6, lsr #10
 80037f4:	d10f      	bne.n	8003816 <dir_next.constprop.0+0x60>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80037f6:	4628      	mov	r0, r5
 80037f8:	f7ff ff54 	bl	80036a4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80037fc:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80037fe:	4601      	mov	r1, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003800:	d90f      	bls.n	8003822 <dir_next.constprop.0+0x6c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003802:	1c43      	adds	r3, r0, #1
 8003804:	d00f      	beq.n	8003826 <dir_next.constprop.0+0x70>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8003806:	68eb      	ldr	r3, [r5, #12]
 8003808:	4298      	cmp	r0, r3
 800380a:	d2eb      	bcs.n	80037e4 <dir_next.constprop.0+0x2e>
				dp->clust = clst;		/* Initialize data for new cluster */
 800380c:	6160      	str	r0, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 800380e:	4628      	mov	r0, r5
 8003810:	f7ff fdba 	bl	8003388 <clst2sect>
 8003814:	61a0      	str	r0, [r4, #24]
	return FR_OK;
 8003816:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003818:	3528      	adds	r5, #40	; 0x28
 800381a:	443d      	add	r5, r7
	dp->dptr = ofs;						/* Current entry */
 800381c:	6126      	str	r6, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800381e:	61e5      	str	r5, [r4, #28]
}
 8003820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003822:	2002      	movs	r0, #2
 8003824:	e7fc      	b.n	8003820 <dir_next.constprop.0+0x6a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003826:	2001      	movs	r0, #1
 8003828:	e7fa      	b.n	8003820 <dir_next.constprop.0+0x6a>
	...

0800382c <follow_path>:
{
 800382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003832:	f8d0 8000 	ldr.w	r8, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003836:	460e      	mov	r6, r1
 8003838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800383c:	2b2f      	cmp	r3, #47	; 0x2f
 800383e:	d0fa      	beq.n	8003836 <follow_path+0xa>
 8003840:	2b5c      	cmp	r3, #92	; 0x5c
 8003842:	d0f8      	beq.n	8003836 <follow_path+0xa>
		dp->obj.sclust = 0;					/* Start from root directory */
 8003844:	2300      	movs	r3, #0
 8003846:	60ab      	str	r3, [r5, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003848:	7833      	ldrb	r3, [r6, #0]
 800384a:	2b1f      	cmp	r3, #31
 800384c:	d950      	bls.n	80038f0 <follow_path+0xc4>
		*d++ = (BYTE)val;
 800384e:	f04f 3920 	mov.w	r9, #538976288	; 0x20202020
	p = *path; sfn = dp->fn;
 8003852:	f105 0720 	add.w	r7, r5, #32
	si = i = 0; ni = 8;
 8003856:	2100      	movs	r1, #0
 8003858:	2008      	movs	r0, #8
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800385a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8003988 <follow_path+0x15c>
		*d++ = (BYTE)val;
 800385e:	f8c7 9004 	str.w	r9, [r7, #4]
 8003862:	f8c7 9000 	str.w	r9, [r7]
 8003866:	f8c7 9007 	str.w	r9, [r7, #7]
 800386a:	1e74      	subs	r4, r6, #1
 800386c:	f1c6 0e02 	rsb	lr, r6, #2
		c = (BYTE)p[si++];				/* Get a byte */
 8003870:	eb0e 0304 	add.w	r3, lr, r4
 8003874:	f814 2f01 	ldrb.w	r2, [r4, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003878:	2a20      	cmp	r2, #32
 800387a:	d908      	bls.n	800388e <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800387c:	2a2f      	cmp	r2, #47	; 0x2f
 800387e:	d001      	beq.n	8003884 <follow_path+0x58>
 8003880:	2a5c      	cmp	r2, #92	; 0x5c
 8003882:	d13f      	bne.n	8003904 <follow_path+0xd8>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003884:	5cf0      	ldrb	r0, [r6, r3]
 8003886:	282f      	cmp	r0, #47	; 0x2f
 8003888:	d03a      	beq.n	8003900 <follow_path+0xd4>
 800388a:	285c      	cmp	r0, #92	; 0x5c
 800388c:	d038      	beq.n	8003900 <follow_path+0xd4>
	*path = p + si;						/* Return pointer to the next segment */
 800388e:	441e      	add	r6, r3
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003890:	2900      	cmp	r1, #0
 8003892:	d048      	beq.n	8003926 <follow_path+0xfa>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003894:	f895 3020 	ldrb.w	r3, [r5, #32]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003898:	4628      	mov	r0, r5
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800389a:	2be5      	cmp	r3, #229	; 0xe5
 800389c:	bf04      	itt	eq
 800389e:	2305      	moveq	r3, #5
 80038a0:	f885 3020 	strbeq.w	r3, [r5, #32]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80038a4:	2a21      	cmp	r2, #33	; 0x21
 80038a6:	bf34      	ite	cc
 80038a8:	2304      	movcc	r3, #4
 80038aa:	2300      	movcs	r3, #0
 80038ac:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	FATFS *fs = dp->obj.fs;
 80038b0:	f8d5 a000 	ldr.w	sl, [r5]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80038b4:	f7ff ff4d 	bl	8003752 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 80038b8:	4604      	mov	r4, r0
 80038ba:	bbb8      	cbnz	r0, 800392c <follow_path+0x100>
		res = move_window(fs, dp->sect);
 80038bc:	4650      	mov	r0, sl
 80038be:	69a9      	ldr	r1, [r5, #24]
 80038c0:	f7ff fdad 	bl	800341e <move_window>
		if (res != FR_OK) break;
 80038c4:	4604      	mov	r4, r0
 80038c6:	bb88      	cbnz	r0, 800392c <follow_path+0x100>
		c = dp->dir[DIR_Name];
 80038c8:	69e8      	ldr	r0, [r5, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80038ca:	7803      	ldrb	r3, [r0, #0]
 80038cc:	b36b      	cbz	r3, 800392a <follow_path+0xfe>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80038ce:	7ac3      	ldrb	r3, [r0, #11]
 80038d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d4:	71ab      	strb	r3, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80038d6:	7ac4      	ldrb	r4, [r0, #11]
 80038d8:	f014 0408 	ands.w	r4, r4, #8
 80038dc:	d104      	bne.n	80038e8 <follow_path+0xbc>
 80038de:	220b      	movs	r2, #11
 80038e0:	4639      	mov	r1, r7
 80038e2:	f7ff fd43 	bl	800336c <mem_cmp>
 80038e6:	b308      	cbz	r0, 800392c <follow_path+0x100>
		res = dir_next(dp, 0);	/* Next entry */
 80038e8:	4628      	mov	r0, r5
 80038ea:	f7ff ff64 	bl	80037b6 <dir_next.constprop.0>
 80038ee:	e7e3      	b.n	80038b8 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 80038f0:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80038f2:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 80038f4:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
}
 80038f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		res = dir_sdi(dp, 0);
 80038fc:	f7ff bf29 	b.w	8003752 <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003900:	3301      	adds	r3, #1
 8003902:	e7bf      	b.n	8003884 <follow_path+0x58>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8003904:	2a2e      	cmp	r2, #46	; 0x2e
 8003906:	d030      	beq.n	800396a <follow_path+0x13e>
 8003908:	4288      	cmp	r0, r1
 800390a:	d90c      	bls.n	8003926 <follow_path+0xfa>
		if (c >= 0x80) {				/* Is SBC extended character? */
 800390c:	0613      	lsls	r3, r2, #24
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800390e:	bf44      	itt	mi
 8003910:	f002 027f 	andmi.w	r2, r2, #127	; 0x7f
 8003914:	f81a 2002 	ldrbmi.w	r2, [sl, r2]
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
 8003918:	f8df c070 	ldr.w	ip, [pc, #112]	; 800398c <follow_path+0x160>
	while (*str && *str != chr) str++;
 800391c:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8003920:	b343      	cbz	r3, 8003974 <follow_path+0x148>
 8003922:	429a      	cmp	r2, r3
 8003924:	d1fa      	bne.n	800391c <follow_path+0xf0>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8003926:	2406      	movs	r4, #6
	return res;
 8003928:	e009      	b.n	800393e <follow_path+0x112>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800392a:	2404      	movs	r4, #4
			ns = dp->fn[NSFLAG];
 800392c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 8003930:	b144      	cbz	r4, 8003944 <follow_path+0x118>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003932:	2c04      	cmp	r4, #4
 8003934:	d103      	bne.n	800393e <follow_path+0x112>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003936:	f013 0f04 	tst.w	r3, #4
 800393a:	bf08      	it	eq
 800393c:	2405      	moveq	r4, #5
}
 800393e:	4620      	mov	r0, r4
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003944:	075a      	lsls	r2, r3, #29
 8003946:	d4fa      	bmi.n	800393e <follow_path+0x112>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003948:	79ab      	ldrb	r3, [r5, #6]
 800394a:	06db      	lsls	r3, r3, #27
 800394c:	d50b      	bpl.n	8003966 <follow_path+0x13a>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800394e:	6929      	ldr	r1, [r5, #16]
 8003950:	f108 0328 	add.w	r3, r8, #40	; 0x28
 8003954:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003958:	f898 0000 	ldrb.w	r0, [r8]
 800395c:	4419      	add	r1, r3
 800395e:	f7ff fe99 	bl	8003694 <ld_clust.isra.0>
 8003962:	60a8      	str	r0, [r5, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003964:	e777      	b.n	8003856 <follow_path+0x2a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003966:	2405      	movs	r4, #5
 8003968:	e7e9      	b.n	800393e <follow_path+0x112>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800396a:	280b      	cmp	r0, #11
 800396c:	d0db      	beq.n	8003926 <follow_path+0xfa>
			i = 8; ni = 11;				/* Enter file extension field */
 800396e:	2108      	movs	r1, #8
 8003970:	200b      	movs	r0, #11
 8003972:	e77d      	b.n	8003870 <follow_path+0x44>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003974:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8003978:	2b19      	cmp	r3, #25
 800397a:	d801      	bhi.n	8003980 <follow_path+0x154>
 800397c:	3a20      	subs	r2, #32
 800397e:	b2d2      	uxtb	r2, r2
			sfn[i++] = c;
 8003980:	547a      	strb	r2, [r7, r1]
 8003982:	3101      	adds	r1, #1
 8003984:	e774      	b.n	8003870 <follow_path+0x44>
 8003986:	bf00      	nop
 8003988:	08003f36 	.word	0x08003f36
 800398c:	08003f27 	.word	0x08003f27

08003990 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003992:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003996:	a803      	add	r0, sp, #12
{
 8003998:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 800399a:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800399c:	f7ff fd10 	bl	80033c0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80039a0:	2800      	cmp	r0, #0
 80039a2:	db14      	blt.n	80039ce <f_mount+0x3e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80039a4:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <f_mount+0x44>)
 80039a6:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]

	if (cfs) {
 80039aa:	b10b      	cbz	r3, 80039b0 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80039ac:	2100      	movs	r1, #0
 80039ae:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 80039b0:	9b01      	ldr	r3, [sp, #4]
 80039b2:	b10b      	cbz	r3, 80039b8 <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
 80039b4:	2100      	movs	r1, #0
 80039b6:	7019      	strb	r1, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80039b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80039bc:	b124      	cbz	r4, 80039c8 <f_mount+0x38>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80039be:	4668      	mov	r0, sp
 80039c0:	a901      	add	r1, sp, #4
 80039c2:	f7ff fd7d 	bl	80034c0 <find_volume.constprop.0>
 80039c6:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 80039c8:	4620      	mov	r0, r4
 80039ca:	b004      	add	sp, #16
 80039cc:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80039ce:	240b      	movs	r4, #11
 80039d0:	e7fa      	b.n	80039c8 <f_mount+0x38>
 80039d2:	bf00      	nop
 80039d4:	20001fa8 	.word	0x20001fa8

080039d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80039d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039da:	b08f      	sub	sp, #60	; 0x3c
 80039dc:	4616      	mov	r6, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80039de:	4605      	mov	r5, r0
{
 80039e0:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d034      	beq.n	8003a50 <f_open+0x78>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
	res = find_volume(&path, &fs, mode);
 80039e6:	a902      	add	r1, sp, #8
 80039e8:	a801      	add	r0, sp, #4
 80039ea:	f7ff fd69 	bl	80034c0 <find_volume.constprop.0>
	if (res == FR_OK) {
 80039ee:	4604      	mov	r4, r0
 80039f0:	bb48      	cbnz	r0, 8003a46 <f_open+0x6e>
		dj.obj.fs = fs;
 80039f2:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80039f4:	9901      	ldr	r1, [sp, #4]
 80039f6:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
 80039f8:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80039fa:	f7ff ff17 	bl	800382c <follow_path>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
#endif
		}
#else		/* R/O configuration */
		if (res == FR_OK) {
 80039fe:	4604      	mov	r4, r0
 8003a00:	bb08      	cbnz	r0, 8003a46 <f_open+0x6e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
 8003a02:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db1c      	blt.n	8003a44 <f_open+0x6c>
				res = FR_INVALID_NAME;
			} else {
				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
 8003a0a:	f89d 4012 	ldrb.w	r4, [sp, #18]
 8003a0e:	f014 0410 	ands.w	r4, r4, #16
 8003a12:	d11b      	bne.n	8003a4c <f_open+0x74>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003a14:	9f02      	ldr	r7, [sp, #8]
 8003a16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a18:	7838      	ldrb	r0, [r7, #0]
 8003a1a:	f7ff fe3b 	bl	8003694 <ld_clust.isra.0>
 8003a1e:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003a20:	f101 001c 	add.w	r0, r1, #28
 8003a24:	f7ff fca0 	bl	8003368 <ld_dword>
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
			fp->obj.id = fs->id;
 8003a28:	88fb      	ldrh	r3, [r7, #6]
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8003a2a:	f006 0601 	and.w	r6, r6, #1
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003a2e:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003a30:	622c      	str	r4, [r5, #32]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003a32:	602f      	str	r7, [r5, #0]
			fp->obj.id = fs->id;
 8003a34:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8003a36:	742e      	strb	r6, [r5, #16]
			fp->err = 0;			/* Clear error flag */
 8003a38:	746c      	strb	r4, [r5, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8003a3a:	61ec      	str	r4, [r5, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003a3c:	616c      	str	r4, [r5, #20]
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
 8003a3e:	4620      	mov	r0, r4
 8003a40:	b00f      	add	sp, #60	; 0x3c
 8003a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_INVALID_NAME;
 8003a44:	2406      	movs	r4, #6
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003a46:	2300      	movs	r3, #0
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	e7f8      	b.n	8003a3e <f_open+0x66>
					res = FR_NO_FILE;
 8003a4c:	2404      	movs	r4, #4
 8003a4e:	e7fa      	b.n	8003a46 <f_open+0x6e>
	if (!fp) return FR_INVALID_OBJECT;
 8003a50:	2409      	movs	r4, #9
 8003a52:	e7f4      	b.n	8003a3e <f_open+0x66>

08003a54 <f_read_byte>:

FRESULT f_read_byte (
	FIL* fp, 		/* Pointer to the file object */
	uint8_t* buff		/* Pointer to data buffer */
)
{
 8003a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = fp->obj.fs;

	if (fp->obj.objsize - fp->fptr<=0) {
 8003a58:	68c3      	ldr	r3, [r0, #12]
{
 8003a5a:	460e      	mov	r6, r1
	if (fp->obj.objsize - fp->fptr<=0) {
 8003a5c:	6941      	ldr	r1, [r0, #20]
{
 8003a5e:	4604      	mov	r4, r0
	if (fp->obj.objsize - fp->fptr<=0) {
 8003a60:	428b      	cmp	r3, r1
 8003a62:	d038      	beq.n	8003ad6 <f_read_byte+0x82>
		LEAVE_FF(fs, FR_DISK_ERR);
	}

	if ((fp->fptr % SS(fs)) == 0) {
 8003a64:	f3c1 0709 	ubfx	r7, r1, #0, #10
 8003a68:	b9cf      	cbnz	r7, 8003a9e <f_read_byte+0x4a>
	FATFS *fs = fp->obj.fs;
 8003a6a:	f8d0 a000 	ldr.w	sl, [r0]
		uint32_t csect = (fp->fptr / SS(fs) & (fs->csize - 1));
 8003a6e:	0a8d      	lsrs	r5, r1, #10
 8003a70:	f8ba 900a 	ldrh.w	r9, [sl, #10]
 8003a74:	f109 38ff 	add.w	r8, r9, #4294967295
		if (csect == 0) {
 8003a78:	ea18 2891 	ands.w	r8, r8, r1, lsr #10
 8003a7c:	d102      	bne.n	8003a84 <f_read_byte+0x30>
			DWORD clst;
			if (fp->fptr == 0) {
 8003a7e:	b9d1      	cbnz	r1, 8003ab6 <f_read_byte+0x62>
				clst = fp->obj.sclust;
 8003a80:	6883      	ldr	r3, [r0, #8]
					clst -= ncl;
					tbl++;
				}
				clst += *tbl;
			}
			fp->clust = clst;
 8003a82:	61a3      	str	r3, [r4, #24]
		}

		if(fp->clust >= fs->n_fatent) return 0;
 8003a84:	69a2      	ldr	r2, [r4, #24]
 8003a86:	f8da 300c 	ldr.w	r3, [sl, #12]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d211      	bcs.n	8003ab2 <f_read_byte+0x5e>
		fp->sect = fs->database + fs->csize * (fp->clust - 2) + csect;
 8003a8e:	f8da 3020 	ldr.w	r3, [sl, #32]
 8003a92:	3a02      	subs	r2, #2
 8003a94:	fb09 3902 	mla	r9, r9, r2, r3
 8003a98:	eb09 0308 	add.w	r3, r9, r8
 8003a9c:	61e3      	str	r3, [r4, #28]
	}

	*buff = *(uint8_t*)(FLASH_MSD_START_ADDR + fp->sect*FLASH_PAGE_SIZE+fp->fptr % SS(fs));
 8003a9e:	69e3      	ldr	r3, [r4, #28]
 8003aa0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003aa4:	3311      	adds	r3, #17
 8003aa6:	029b      	lsls	r3, r3, #10
 8003aa8:	5ddb      	ldrb	r3, [r3, r7]
 8003aaa:	7033      	strb	r3, [r6, #0]

	fp->fptr++;
 8003aac:	6963      	ldr	r3, [r4, #20]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	6163      	str	r3, [r4, #20]
		if(fp->clust >= fs->n_fatent) return 0;
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	e010      	b.n	8003ad8 <f_read_byte+0x84>
				clst = clmt_clust(fp, fp->fptr);
 8003ab6:	f7ff fc72 	bl	800339e <clmt_clust>
				clst = (DWORD)(fp->fptr / SS(fs) / fs->csize);
 8003aba:	fbb5 f3f9 	udiv	r3, r5, r9
				DWORD *tbl = fp->cltbl + 1;
 8003abe:	6a22      	ldr	r2, [r4, #32]
 8003ac0:	3204      	adds	r2, #4
					ncl = *tbl++;
 8003ac2:	6811      	ldr	r1, [r2, #0]
					if (ncl == 0 || clst < ncl) break;
 8003ac4:	b121      	cbz	r1, 8003ad0 <f_read_byte+0x7c>
 8003ac6:	428b      	cmp	r3, r1
 8003ac8:	d302      	bcc.n	8003ad0 <f_read_byte+0x7c>
					clst -= ncl;
 8003aca:	1a5b      	subs	r3, r3, r1
					tbl++;
 8003acc:	3208      	adds	r2, #8
					ncl = *tbl++;
 8003ace:	e7f8      	b.n	8003ac2 <f_read_byte+0x6e>
				clst += *tbl;
 8003ad0:	6852      	ldr	r2, [r2, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	e7d5      	b.n	8003a82 <f_read_byte+0x2e>
		LEAVE_FF(fs, FR_DISK_ERR);
 8003ad6:	2001      	movs	r0, #1

	LEAVE_FF(fs, FR_OK);
}
 8003ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003adc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8003adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003ae2:	a901      	add	r1, sp, #4
{
 8003ae4:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8003ae6:	f7ff fc80 	bl	80033ea <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8003aea:	4606      	mov	r6, r0
 8003aec:	b9e8      	cbnz	r0, 8003b2a <f_lseek+0x4e>
 8003aee:	7c66      	ldrb	r6, [r4, #17]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8003af0:	b9de      	cbnz	r6, 8003b2a <f_lseek+0x4e>

#if FF_USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8003af2:	6a23      	ldr	r3, [r4, #32]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05c      	beq.n	8003bb2 <f_lseek+0xd6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8003af8:	1c69      	adds	r1, r5, #1
 8003afa:	d138      	bne.n	8003b6e <f_lseek+0x92>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003afc:	461d      	mov	r5, r3
			cl = fp->obj.sclust;		/* Origin of the chain */
 8003afe:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8003b02:	2702      	movs	r7, #2
 8003b04:	f855 bb04 	ldr.w	fp, [r5], #4
			if (cl != 0) {
 8003b08:	f1b8 0f00 	cmp.w	r8, #0
 8003b0c:	d028      	beq.n	8003b60 <f_lseek+0x84>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003b0e:	4640      	mov	r0, r8
 8003b10:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 8003b14:	4601      	mov	r1, r0
 8003b16:	4681      	mov	r9, r0
 8003b18:	6820      	ldr	r0, [r4, #0]
 8003b1a:	f7ff fdc3 	bl	80036a4 <get_fat.isra.0>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003b1e:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8003b20:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8003b24:	d807      	bhi.n	8003b36 <f_lseek+0x5a>
 8003b26:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003b28:	7466      	strb	r6, [r4, #17]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	b003      	add	sp, #12
 8003b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b32:	4680      	mov	r8, r0
 8003b34:	e7eb      	b.n	8003b0e <f_lseek+0x32>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003b36:	1c42      	adds	r2, r0, #1
 8003b38:	d101      	bne.n	8003b3e <f_lseek+0x62>
 8003b3a:	2601      	movs	r6, #1
 8003b3c:	e7f4      	b.n	8003b28 <f_lseek+0x4c>
					} while (cl == pcl + 1);
 8003b3e:	f109 0901 	add.w	r9, r9, #1
 8003b42:	4581      	cmp	r9, r0
 8003b44:	d0e6      	beq.n	8003b14 <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8003b46:	3702      	adds	r7, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8003b48:	45bb      	cmp	fp, r7
						*tbl++ = ncl; *tbl++ = tcl;
 8003b4a:	bf21      	itttt	cs
 8003b4c:	462b      	movcs	r3, r5
 8003b4e:	f843 ab08 	strcs.w	sl, [r3], #8
 8003b52:	f8c5 8004 	strcs.w	r8, [r5, #4]
 8003b56:	461d      	movcs	r5, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8003b58:	9b01      	ldr	r3, [sp, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4283      	cmp	r3, r0
 8003b5e:	d8e8      	bhi.n	8003b32 <f_lseek+0x56>
			*fp->cltbl = ulen;	/* Number of items used */
 8003b60:	6a23      	ldr	r3, [r4, #32]
			if (ulen <= tlen) {
 8003b62:	455f      	cmp	r7, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8003b64:	601f      	str	r7, [r3, #0]
			if (ulen <= tlen) {
 8003b66:	d86f      	bhi.n	8003c48 <f_lseek+0x16c>
				*tbl = 0;		/* Terminate table */
 8003b68:	2300      	movs	r3, #0
 8003b6a:	602b      	str	r3, [r5, #0]
 8003b6c:	e7dd      	b.n	8003b2a <f_lseek+0x4e>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8003b6e:	68e1      	ldr	r1, [r4, #12]
 8003b70:	428d      	cmp	r5, r1
 8003b72:	bf28      	it	cs
 8003b74:	460d      	movcs	r5, r1
			fp->fptr = ofs;				/* Set file pointer */
 8003b76:	6165      	str	r5, [r4, #20]
			if (ofs > 0) {
 8003b78:	2d00      	cmp	r5, #0
 8003b7a:	d0d6      	beq.n	8003b2a <f_lseek+0x4e>
				fp->clust = clmt_clust(fp, ofs - 1);
 8003b7c:	1e6f      	subs	r7, r5, #1
 8003b7e:	4639      	mov	r1, r7
 8003b80:	4620      	mov	r0, r4
 8003b82:	f7ff fc0c 	bl	800339e <clmt_clust>
				dsc = clst2sect(fs, fp->clust);
 8003b86:	9a01      	ldr	r2, [sp, #4]
				fp->clust = clmt_clust(fp, ofs - 1);
 8003b88:	4601      	mov	r1, r0
 8003b8a:	61a0      	str	r0, [r4, #24]
				dsc = clst2sect(fs, fp->clust);
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f7ff fbfb 	bl	8003388 <clst2sect>
				if (dsc == 0) ABORT(fs, FR_INT_ERR);
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d0c7      	beq.n	8003b26 <f_lseek+0x4a>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003b96:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003b9a:	2d00      	cmp	r5, #0
 8003b9c:	d0c5      	beq.n	8003b2a <f_lseek+0x4e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8003b9e:	8951      	ldrh	r1, [r2, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003ba0:	69e3      	ldr	r3, [r4, #28]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8003ba2:	3901      	subs	r1, #1
 8003ba4:	ea01 2197 	and.w	r1, r1, r7, lsr #10
 8003ba8:	4408      	add	r0, r1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8003baa:	4283      	cmp	r3, r0
 8003bac:	d0bd      	beq.n	8003b2a <f_lseek+0x4e>
					fp->sect = dsc;
 8003bae:	61e0      	str	r0, [r4, #28]
 8003bb0:	e7bb      	b.n	8003b2a <f_lseek+0x4e>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8003bb2:	68e1      	ldr	r1, [r4, #12]
		ifptr = fp->fptr;
 8003bb4:	6963      	ldr	r3, [r4, #20]
 8003bb6:	428d      	cmp	r5, r1
 8003bb8:	bf28      	it	cs
 8003bba:	460d      	movcs	r5, r1
		fp->fptr = nsect = 0;
 8003bbc:	6166      	str	r6, [r4, #20]
		if (ofs > 0) {
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	d0b3      	beq.n	8003b2a <f_lseek+0x4e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8003bc2:	9a01      	ldr	r2, [sp, #4]
 8003bc4:	8957      	ldrh	r7, [r2, #10]
 8003bc6:	02bf      	lsls	r7, r7, #10
			if (ifptr > 0 &&
 8003bc8:	b1c3      	cbz	r3, 8003bfc <f_lseek+0x120>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	1e6a      	subs	r2, r5, #1
 8003bce:	fbb2 f2f7 	udiv	r2, r2, r7
 8003bd2:	fbb3 f1f7 	udiv	r1, r3, r7
			if (ifptr > 0 &&
 8003bd6:	428a      	cmp	r2, r1
 8003bd8:	d310      	bcc.n	8003bfc <f_lseek+0x120>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003bda:	427a      	negs	r2, r7
 8003bdc:	4013      	ands	r3, r2
				clst = fp->clust;
 8003bde:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8003be0:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 8003be2:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8003be4:	b9f1      	cbnz	r1, 8003c24 <f_lseek+0x148>
		fp->fptr = nsect = 0;
 8003be6:	2500      	movs	r5, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8003be8:	6963      	ldr	r3, [r4, #20]
 8003bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d09b      	beq.n	8003b2a <f_lseek+0x4e>
 8003bf2:	69e3      	ldr	r3, [r4, #28]
 8003bf4:	42ab      	cmp	r3, r5
 8003bf6:	d098      	beq.n	8003b2a <f_lseek+0x4e>
			fp->sect = nsect;
 8003bf8:	61e5      	str	r5, [r4, #28]
 8003bfa:	e796      	b.n	8003b2a <f_lseek+0x4e>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8003bfc:	68a1      	ldr	r1, [r4, #8]
				fp->clust = clst;
 8003bfe:	61a1      	str	r1, [r4, #24]
 8003c00:	e7f0      	b.n	8003be4 <f_lseek+0x108>
					ofs -= bcs; fp->fptr += bcs;
 8003c02:	443b      	add	r3, r7
 8003c04:	6163      	str	r3, [r4, #20]
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8003c06:	6820      	ldr	r0, [r4, #0]
 8003c08:	f7ff fd4c 	bl	80036a4 <get_fat.isra.0>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003c0c:	1c43      	adds	r3, r0, #1
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8003c0e:	4601      	mov	r1, r0
					ofs -= bcs; fp->fptr += bcs;
 8003c10:	eba5 0507 	sub.w	r5, r5, r7
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003c14:	d091      	beq.n	8003b3a <f_lseek+0x5e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8003c16:	2801      	cmp	r0, #1
 8003c18:	d985      	bls.n	8003b26 <f_lseek+0x4a>
 8003c1a:	9b01      	ldr	r3, [sp, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4283      	cmp	r3, r0
 8003c20:	d981      	bls.n	8003b26 <f_lseek+0x4a>
					fp->clust = clst;
 8003c22:	61a0      	str	r0, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 8003c24:	42bd      	cmp	r5, r7
					ofs -= bcs; fp->fptr += bcs;
 8003c26:	6963      	ldr	r3, [r4, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 8003c28:	d8eb      	bhi.n	8003c02 <f_lseek+0x126>
				fp->fptr += ofs;
 8003c2a:	442b      	add	r3, r5
 8003c2c:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8003c2e:	f3c5 0309 	ubfx	r3, r5, #0, #10
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0d7      	beq.n	8003be6 <f_lseek+0x10a>
					nsect = clst2sect(fs, clst);	/* Current sector */
 8003c36:	9801      	ldr	r0, [sp, #4]
 8003c38:	f7ff fba6 	bl	8003388 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	f43f af72 	beq.w	8003b26 <f_lseek+0x4a>
					nsect += (DWORD)(ofs / SS(fs));
 8003c42:	eb00 2595 	add.w	r5, r0, r5, lsr #10
 8003c46:	e7cf      	b.n	8003be8 <f_lseek+0x10c>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8003c48:	2611      	movs	r6, #17
 8003c4a:	e76e      	b.n	8003b2a <f_lseek+0x4e>

08003c4c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8003c4e:	4604      	mov	r4, r0
{
 8003c50:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8003c52:	b340      	cbz	r0, 8003ca6 <f_opendir+0x5a>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8003c54:	a903      	add	r1, sp, #12
 8003c56:	a801      	add	r0, sp, #4
 8003c58:	f7ff fc32 	bl	80034c0 <find_volume.constprop.0>
	if (res == FR_OK) {
 8003c5c:	b970      	cbnz	r0, 8003c7c <f_opendir+0x30>
		dp->obj.fs = fs;
 8003c5e:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003c60:	4620      	mov	r0, r4
 8003c62:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
 8003c64:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8003c66:	f7ff fde1 	bl	800382c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8003c6a:	b9f0      	cbnz	r0, 8003caa <f_opendir+0x5e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8003c6c:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	db0c      	blt.n	8003c8e <f_opendir+0x42>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8003c74:	79a3      	ldrb	r3, [r4, #6]
 8003c76:	06db      	lsls	r3, r3, #27
 8003c78:	d403      	bmi.n	8003c82 <f_opendir+0x36>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8003c7a:	2005      	movs	r0, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	e00f      	b.n	8003ca2 <f_opendir+0x56>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8003c82:	9b03      	ldr	r3, [sp, #12]
 8003c84:	69e1      	ldr	r1, [r4, #28]
 8003c86:	7818      	ldrb	r0, [r3, #0]
 8003c88:	f7ff fd04 	bl	8003694 <ld_clust.isra.0>
 8003c8c:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
 8003c8e:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003c90:	4620      	mov	r0, r4
				dp->obj.id = fs->id;
 8003c92:	88db      	ldrh	r3, [r3, #6]
 8003c94:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003c96:	f7ff fd5c 	bl	8003752 <dir_sdi.constprop.0>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003c9a:	2804      	cmp	r0, #4
 8003c9c:	d0ed      	beq.n	8003c7a <f_opendir+0x2e>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d1ec      	bne.n	8003c7c <f_opendir+0x30>

	LEAVE_FF(fs, res);
}
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bd10      	pop	{r4, pc}
	if (!dp) return FR_INVALID_OBJECT;
 8003ca6:	2009      	movs	r0, #9
 8003ca8:	e7fb      	b.n	8003ca2 <f_opendir+0x56>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003caa:	2804      	cmp	r0, #4
 8003cac:	d0e5      	beq.n	8003c7a <f_opendir+0x2e>
 8003cae:	e7e5      	b.n	8003c7c <f_opendir+0x30>

08003cb0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8003cb0:	b513      	push	{r0, r1, r4, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8003cb2:	a901      	add	r1, sp, #4
{
 8003cb4:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8003cb6:	f7ff fb98 	bl	80033ea <validate>
	if (res == FR_OK) {
 8003cba:	b900      	cbnz	r0, 8003cbe <f_closedir+0xe>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 8003cbc:	6020      	str	r0, [r4, #0]
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8003cbe:	b002      	add	sp, #8
 8003cc0:	bd10      	pop	{r4, pc}

08003cc2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8003cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cc4:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8003cc6:	a901      	add	r1, sp, #4
{
 8003cc8:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8003cca:	f7ff fb8e 	bl	80033ea <validate>
	if (res == FR_OK) {
 8003cce:	4605      	mov	r5, r0
 8003cd0:	b920      	cbnz	r0, 8003cdc <f_readdir+0x1a>
		if (!fno) {
 8003cd2:	b936      	cbnz	r6, 8003ce2 <f_readdir+0x20>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f7ff fd3c 	bl	8003752 <dir_sdi.constprop.0>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8003cda:	4605      	mov	r5, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8003cdc:	4628      	mov	r0, r5
 8003cde:	b003      	add	sp, #12
 8003ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	FRESULT res = FR_NO_FILE;
 8003ce2:	2004      	movs	r0, #4
	FATFS *fs = dp->obj.fs;
 8003ce4:	6827      	ldr	r7, [r4, #0]
	while (dp->sect) {
 8003ce6:	69a1      	ldr	r1, [r4, #24]
 8003ce8:	b959      	cbnz	r1, 8003d02 <f_readdir+0x40>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003cea:	bb20      	cbnz	r0, 8003d36 <f_readdir+0x74>
	fno->fname[0] = 0;			/* Invaidate file info */
 8003cec:	2300      	movs	r3, #0
 8003cee:	7273      	strb	r3, [r6, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003cf0:	69a2      	ldr	r2, [r4, #24]
 8003cf2:	bb3a      	cbnz	r2, 8003d44 <f_readdir+0x82>
				res = dir_next(dp, 0);		/* Increment index for next */
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7ff fd5e 	bl	80037b6 <dir_next.constprop.0>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8003cfa:	2804      	cmp	r0, #4
 8003cfc:	bf18      	it	ne
 8003cfe:	4605      	movne	r5, r0
 8003d00:	e7ec      	b.n	8003cdc <f_readdir+0x1a>
		res = move_window(fs, dp->sect);
 8003d02:	4638      	mov	r0, r7
 8003d04:	f7ff fb8b 	bl	800341e <move_window>
		if (res != FR_OK) break;
 8003d08:	b9a8      	cbnz	r0, 8003d36 <f_readdir+0x74>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8003d0a:	69e3      	ldr	r3, [r4, #28]
 8003d0c:	781a      	ldrb	r2, [r3, #0]
		if (b == 0) {
 8003d0e:	b1ba      	cbz	r2, 8003d40 <f_readdir+0x7e>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003d10:	7adb      	ldrb	r3, [r3, #11]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003d12:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d18:	71a3      	strb	r3, [r4, #6]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8003d1a:	d007      	beq.n	8003d2c <f_readdir+0x6a>
 8003d1c:	2a2e      	cmp	r2, #46	; 0x2e
 8003d1e:	d005      	beq.n	8003d2c <f_readdir+0x6a>
 8003d20:	2b0f      	cmp	r3, #15
 8003d22:	d003      	beq.n	8003d2c <f_readdir+0x6a>
 8003d24:	f023 0320 	bic.w	r3, r3, #32
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d1df      	bne.n	8003cec <f_readdir+0x2a>
		res = dir_next(dp, 0);		/* Next entry */
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f7ff fd42 	bl	80037b6 <dir_next.constprop.0>
		if (res != FR_OK) break;
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d0d7      	beq.n	8003ce6 <f_readdir+0x24>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003d36:	2300      	movs	r3, #0
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8003d38:	2804      	cmp	r0, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003d3a:	61a3      	str	r3, [r4, #24]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8003d3c:	d1cd      	bne.n	8003cda <f_readdir+0x18>
 8003d3e:	e7d5      	b.n	8003cec <f_readdir+0x2a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003d40:	2004      	movs	r0, #4
 8003d42:	e7f8      	b.n	8003d36 <f_readdir+0x74>
	si = di = 0;
 8003d44:	4618      	mov	r0, r3
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8003d46:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
		c = (TCHAR)dp->dir[si++];
 8003d4a:	69e2      	ldr	r2, [r4, #28]
 8003d4c:	1e57      	subs	r7, r2, #1
 8003d4e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8003d52:	3001      	adds	r0, #1
		if (c == ' ') continue;		/* Skip padding spaces */
 8003d54:	2920      	cmp	r1, #32
 8003d56:	d00e      	beq.n	8003d76 <f_readdir+0xb4>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8003d58:	2905      	cmp	r1, #5
 8003d5a:	bf08      	it	eq
 8003d5c:	21e5      	moveq	r1, #229	; 0xe5
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8003d5e:	2809      	cmp	r0, #9
 8003d60:	bf02      	ittt	eq
 8003d62:	eb06 0e03 	addeq.w	lr, r6, r3
 8003d66:	3301      	addeq	r3, #1
 8003d68:	f88e c009 	strbeq.w	ip, [lr, #9]
		fno->fname[di++] = c;
 8003d6c:	eb06 0e03 	add.w	lr, r6, r3
 8003d70:	f88e 1009 	strb.w	r1, [lr, #9]
 8003d74:	3301      	adds	r3, #1
	while (si < 11) {		/* Copy name body and extension */
 8003d76:	280b      	cmp	r0, #11
 8003d78:	d1e9      	bne.n	8003d4e <f_readdir+0x8c>
	fno->fname[di] = 0;
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4433      	add	r3, r6
 8003d7e:	7259      	strb	r1, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8003d80:	7ad3      	ldrb	r3, [r2, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003d82:	f102 001c 	add.w	r0, r2, #28
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8003d86:	7233      	strb	r3, [r6, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003d88:	f7ff faee 	bl	8003368 <ld_dword>
 8003d8c:	6030      	str	r0, [r6, #0]
	rv = ptr[1];
 8003d8e:	8ad3      	ldrh	r3, [r2, #22]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8003d90:	80f3      	strh	r3, [r6, #6]
	rv = ptr[1];
 8003d92:	8b13      	ldrh	r3, [r2, #24]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8003d94:	80b3      	strh	r3, [r6, #4]
 8003d96:	e7ad      	b.n	8003cf4 <f_readdir+0x32>

08003d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003d98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003d9a:	e003      	b.n	8003da4 <LoopCopyDataInit>

08003d9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003d9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003da0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003da2:	3104      	adds	r1, #4

08003da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003da4:	480a      	ldr	r0, [pc, #40]	; (8003dd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003da8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003daa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003dac:	d3f6      	bcc.n	8003d9c <CopyDataInit>
  ldr r2, =_sbss
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003db0:	e002      	b.n	8003db8 <LoopFillZerobss>

08003db2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003db2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003db4:	f842 3b04 	str.w	r3, [r2], #4

08003db8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003db8:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003dba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003dbc:	d3f9      	bcc.n	8003db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003dbe:	f7ff f8a5 	bl	8002f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dc2:	f000 f80f 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dc6:	f7fe ff1d 	bl	8002c04 <main>
  bx lr
 8003dca:	4770      	bx	lr
  ldr r3, =_sidata
 8003dcc:	08003fc0 	.word	0x08003fc0
  ldr r0, =_sdata
 8003dd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003dd4:	20000120 	.word	0x20000120
  ldr r2, =_sbss
 8003dd8:	20000120 	.word	0x20000120
  ldr r3, = _ebss
 8003ddc:	20001fb0 	.word	0x20001fb0

08003de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003de0:	e7fe      	b.n	8003de0 <ADC1_2_IRQHandler>
	...

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	2600      	movs	r6, #0
 8003de8:	4d0c      	ldr	r5, [pc, #48]	; (8003e1c <__libc_init_array+0x38>)
 8003dea:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	f000 f838 	bl	8003e68 <_init>
 8003df8:	2600      	movs	r6, #0
 8003dfa:	4d0a      	ldr	r5, [pc, #40]	; (8003e24 <__libc_init_array+0x40>)
 8003dfc:	4c0a      	ldr	r4, [pc, #40]	; (8003e28 <__libc_init_array+0x44>)
 8003dfe:	1b64      	subs	r4, r4, r5
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	08003fb8 	.word	0x08003fb8
 8003e20:	08003fb8 	.word	0x08003fb8
 8003e24:	08003fb8 	.word	0x08003fb8
 8003e28:	08003fbc 	.word	0x08003fbc

08003e2c <memcpy>:
 8003e2c:	440a      	add	r2, r1
 8003e2e:	4291      	cmp	r1, r2
 8003e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e34:	d100      	bne.n	8003e38 <memcpy+0xc>
 8003e36:	4770      	bx	lr
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e3e:	4291      	cmp	r1, r2
 8003e40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e44:	d1f9      	bne.n	8003e3a <memcpy+0xe>
 8003e46:	bd10      	pop	{r4, pc}

08003e48 <memset>:
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4402      	add	r2, r0
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <memset+0xa>
 8003e50:	4770      	bx	lr
 8003e52:	f803 1b01 	strb.w	r1, [r3], #1
 8003e56:	e7f9      	b.n	8003e4c <memset+0x4>

08003e58 <strcpy>:
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e5e:	f803 2b01 	strb.w	r2, [r3], #1
 8003e62:	2a00      	cmp	r2, #0
 8003e64:	d1f9      	bne.n	8003e5a <strcpy+0x2>
 8003e66:	4770      	bx	lr

08003e68 <_init>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr

08003e74 <_fini>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr
